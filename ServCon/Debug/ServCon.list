
ServCon.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003bd4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08003c94  08003c94  00013c94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ccc  08003ccc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003ccc  08003ccc  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003ccc  08003ccc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ccc  08003ccc  00013ccc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003cd0  08003cd0  00013cd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003cd4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000134  2000000c  08003ce0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000140  08003ce0  00020140  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d96f  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ccd  00000000  00000000  0002d9a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c08  00000000  00000000  0002f670  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b60  00000000  00000000  00030278  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000180e1  00000000  00000000  00030dd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000df2b  00000000  00000000  00048eb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d7a3  00000000  00000000  00056de4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e4587  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b64  00000000  00000000  000e45d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003c7c 	.word	0x08003c7c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08003c7c 	.word	0x08003c7c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <HAL_UART_RxCpltCallback>:
//{
//  HAL_GPIO_TogglePin (GPIOB, GPIO_PIN_3);  // toggle PA0
//}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]

  	HAL_UART_Receive_DMA(&huart2, Rx_data, 2);
 8000228:	4904      	ldr	r1, [pc, #16]	; (800023c <HAL_UART_RxCpltCallback+0x1c>)
 800022a:	4b05      	ldr	r3, [pc, #20]	; (8000240 <HAL_UART_RxCpltCallback+0x20>)
 800022c:	2202      	movs	r2, #2
 800022e:	0018      	movs	r0, r3
 8000230:	f002 fc36 	bl	8002aa0 <HAL_UART_Receive_DMA>
}
 8000234:	46c0      	nop			; (mov r8, r8)
 8000236:	46bd      	mov	sp, r7
 8000238:	b002      	add	sp, #8
 800023a:	bd80      	pop	{r7, pc}
 800023c:	20000138 	.word	0x20000138
 8000240:	20000070 	.word	0x20000070

08000244 <mapOutput>:

int mapOutput(int steeringVal){
 8000244:	b580      	push	{r7, lr}
 8000246:	b082      	sub	sp, #8
 8000248:	af00      	add	r7, sp, #0
 800024a:	6078      	str	r0, [r7, #4]
	return 2 * steeringVal + 1250;
 800024c:	687b      	ldr	r3, [r7, #4]
 800024e:	4a04      	ldr	r2, [pc, #16]	; (8000260 <mapOutput+0x1c>)
 8000250:	4694      	mov	ip, r2
 8000252:	4463      	add	r3, ip
 8000254:	005b      	lsls	r3, r3, #1
}
 8000256:	0018      	movs	r0, r3
 8000258:	46bd      	mov	sp, r7
 800025a:	b002      	add	sp, #8
 800025c:	bd80      	pop	{r7, pc}
 800025e:	46c0      	nop			; (mov r8, r8)
 8000260:	00000271 	.word	0x00000271

08000264 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000268:	f000 fb26 	bl	80008b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800026c:	f000 f834 	bl	80002d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000270:	f000 f950 	bl	8000514 <MX_GPIO_Init>
  MX_DMA_Init();
 8000274:	f000 f930 	bl	80004d8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000278:	f000 f8fe 	bl	8000478 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 800027c:	f000 f868 	bl	8000350 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);
 8000280:	4b12      	ldr	r3, [pc, #72]	; (80002cc <main+0x68>)
 8000282:	0018      	movs	r0, r3
 8000284:	f001 fd6a 	bl	8001d5c <HAL_TIM_Base_Start>
  HAL_UART_Receive_DMA (&huart2, Rx_data, 2);
 8000288:	4911      	ldr	r1, [pc, #68]	; (80002d0 <main+0x6c>)
 800028a:	4b12      	ldr	r3, [pc, #72]	; (80002d4 <main+0x70>)
 800028c:	2202      	movs	r2, #2
 800028e:	0018      	movs	r0, r3
 8000290:	f002 fc06 	bl	8002aa0 <HAL_UART_Receive_DMA>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000294:	4b0d      	ldr	r3, [pc, #52]	; (80002cc <main+0x68>)
 8000296:	2100      	movs	r1, #0
 8000298:	0018      	movs	r0, r3
 800029a:	f001 fdfb 	bl	8001e94 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 800029e:	4b0b      	ldr	r3, [pc, #44]	; (80002cc <main+0x68>)
 80002a0:	2104      	movs	r1, #4
 80002a2:	0018      	movs	r0, r3
 80002a4:	f001 fdf6 	bl	8001e94 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 80002a8:	4b08      	ldr	r3, [pc, #32]	; (80002cc <main+0x68>)
 80002aa:	210c      	movs	r1, #12
 80002ac:	0018      	movs	r0, r3
 80002ae:	f001 fdf1 	bl	8001e94 <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, mapOutput(Rx_data[0]));
 80002b2:	4b07      	ldr	r3, [pc, #28]	; (80002d0 <main+0x6c>)
 80002b4:	781b      	ldrb	r3, [r3, #0]
 80002b6:	0018      	movs	r0, r3
 80002b8:	f7ff ffc4 	bl	8000244 <mapOutput>
 80002bc:	0002      	movs	r2, r0
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <main+0x68>)
 80002c0:	681b      	ldr	r3, [r3, #0]
 80002c2:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_Delay(60);
 80002c4:	203c      	movs	r0, #60	; 0x3c
 80002c6:	f000 fb5b 	bl	8000980 <HAL_Delay>
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, mapOutput(Rx_data[0]));
 80002ca:	e7f2      	b.n	80002b2 <main+0x4e>
 80002cc:	20000028 	.word	0x20000028
 80002d0:	20000138 	.word	0x20000138
 80002d4:	20000070 	.word	0x20000070

080002d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002d8:	b590      	push	{r4, r7, lr}
 80002da:	b093      	sub	sp, #76	; 0x4c
 80002dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002de:	2414      	movs	r4, #20
 80002e0:	193b      	adds	r3, r7, r4
 80002e2:	0018      	movs	r0, r3
 80002e4:	2334      	movs	r3, #52	; 0x34
 80002e6:	001a      	movs	r2, r3
 80002e8:	2100      	movs	r1, #0
 80002ea:	f003 fcbf 	bl	8003c6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002ee:	1d3b      	adds	r3, r7, #4
 80002f0:	0018      	movs	r0, r3
 80002f2:	2310      	movs	r3, #16
 80002f4:	001a      	movs	r2, r3
 80002f6:	2100      	movs	r1, #0
 80002f8:	f003 fcb8 	bl	8003c6c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 80002fc:	193b      	adds	r3, r7, r4
 80002fe:	2220      	movs	r2, #32
 8000300:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000302:	193b      	adds	r3, r7, r4
 8000304:	2201      	movs	r2, #1
 8000306:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000308:	193b      	adds	r3, r7, r4
 800030a:	2200      	movs	r2, #0
 800030c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800030e:	193b      	adds	r3, r7, r4
 8000310:	0018      	movs	r0, r3
 8000312:	f000 ffd3 	bl	80012bc <HAL_RCC_OscConfig>
 8000316:	1e03      	subs	r3, r0, #0
 8000318:	d001      	beq.n	800031e <SystemClock_Config+0x46>
  {
    Error_Handler();
 800031a:	f000 f951 	bl	80005c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800031e:	1d3b      	adds	r3, r7, #4
 8000320:	2207      	movs	r2, #7
 8000322:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 8000324:	1d3b      	adds	r3, r7, #4
 8000326:	2203      	movs	r2, #3
 8000328:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800032a:	1d3b      	adds	r3, r7, #4
 800032c:	2200      	movs	r2, #0
 800032e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000330:	1d3b      	adds	r3, r7, #4
 8000332:	2200      	movs	r2, #0
 8000334:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000336:	1d3b      	adds	r3, r7, #4
 8000338:	2101      	movs	r1, #1
 800033a:	0018      	movs	r0, r3
 800033c:	f001 fb44 	bl	80019c8 <HAL_RCC_ClockConfig>
 8000340:	1e03      	subs	r3, r0, #0
 8000342:	d001      	beq.n	8000348 <SystemClock_Config+0x70>
  {
    Error_Handler();
 8000344:	f000 f93c 	bl	80005c0 <Error_Handler>
  }
}
 8000348:	46c0      	nop			; (mov r8, r8)
 800034a:	46bd      	mov	sp, r7
 800034c:	b013      	add	sp, #76	; 0x4c
 800034e:	bd90      	pop	{r4, r7, pc}

08000350 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000350:	b580      	push	{r7, lr}
 8000352:	b08e      	sub	sp, #56	; 0x38
 8000354:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000356:	2328      	movs	r3, #40	; 0x28
 8000358:	18fb      	adds	r3, r7, r3
 800035a:	0018      	movs	r0, r3
 800035c:	2310      	movs	r3, #16
 800035e:	001a      	movs	r2, r3
 8000360:	2100      	movs	r1, #0
 8000362:	f003 fc83 	bl	8003c6c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000366:	2320      	movs	r3, #32
 8000368:	18fb      	adds	r3, r7, r3
 800036a:	0018      	movs	r0, r3
 800036c:	2308      	movs	r3, #8
 800036e:	001a      	movs	r2, r3
 8000370:	2100      	movs	r1, #0
 8000372:	f003 fc7b 	bl	8003c6c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000376:	1d3b      	adds	r3, r7, #4
 8000378:	0018      	movs	r0, r3
 800037a:	231c      	movs	r3, #28
 800037c:	001a      	movs	r2, r3
 800037e:	2100      	movs	r1, #0
 8000380:	f003 fc74 	bl	8003c6c <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000384:	4b3a      	ldr	r3, [pc, #232]	; (8000470 <MX_TIM2_Init+0x120>)
 8000386:	2280      	movs	r2, #128	; 0x80
 8000388:	05d2      	lsls	r2, r2, #23
 800038a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 48-1;
 800038c:	4b38      	ldr	r3, [pc, #224]	; (8000470 <MX_TIM2_Init+0x120>)
 800038e:	222f      	movs	r2, #47	; 0x2f
 8000390:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000392:	4b37      	ldr	r3, [pc, #220]	; (8000470 <MX_TIM2_Init+0x120>)
 8000394:	2200      	movs	r2, #0
 8000396:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000-1;
 8000398:	4b35      	ldr	r3, [pc, #212]	; (8000470 <MX_TIM2_Init+0x120>)
 800039a:	4a36      	ldr	r2, [pc, #216]	; (8000474 <MX_TIM2_Init+0x124>)
 800039c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800039e:	4b34      	ldr	r3, [pc, #208]	; (8000470 <MX_TIM2_Init+0x120>)
 80003a0:	2200      	movs	r2, #0
 80003a2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80003a4:	4b32      	ldr	r3, [pc, #200]	; (8000470 <MX_TIM2_Init+0x120>)
 80003a6:	2280      	movs	r2, #128	; 0x80
 80003a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80003aa:	4b31      	ldr	r3, [pc, #196]	; (8000470 <MX_TIM2_Init+0x120>)
 80003ac:	0018      	movs	r0, r3
 80003ae:	f001 fc85 	bl	8001cbc <HAL_TIM_Base_Init>
 80003b2:	1e03      	subs	r3, r0, #0
 80003b4:	d001      	beq.n	80003ba <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80003b6:	f000 f903 	bl	80005c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80003ba:	2128      	movs	r1, #40	; 0x28
 80003bc:	187b      	adds	r3, r7, r1
 80003be:	2280      	movs	r2, #128	; 0x80
 80003c0:	0152      	lsls	r2, r2, #5
 80003c2:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80003c4:	187a      	adds	r2, r7, r1
 80003c6:	4b2a      	ldr	r3, [pc, #168]	; (8000470 <MX_TIM2_Init+0x120>)
 80003c8:	0011      	movs	r1, r2
 80003ca:	0018      	movs	r0, r3
 80003cc:	f001 fed4 	bl	8002178 <HAL_TIM_ConfigClockSource>
 80003d0:	1e03      	subs	r3, r0, #0
 80003d2:	d001      	beq.n	80003d8 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 80003d4:	f000 f8f4 	bl	80005c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80003d8:	4b25      	ldr	r3, [pc, #148]	; (8000470 <MX_TIM2_Init+0x120>)
 80003da:	0018      	movs	r0, r3
 80003dc:	f001 fd02 	bl	8001de4 <HAL_TIM_PWM_Init>
 80003e0:	1e03      	subs	r3, r0, #0
 80003e2:	d001      	beq.n	80003e8 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 80003e4:	f000 f8ec 	bl	80005c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003e8:	2120      	movs	r1, #32
 80003ea:	187b      	adds	r3, r7, r1
 80003ec:	2200      	movs	r2, #0
 80003ee:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003f0:	187b      	adds	r3, r7, r1
 80003f2:	2200      	movs	r2, #0
 80003f4:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80003f6:	187a      	adds	r2, r7, r1
 80003f8:	4b1d      	ldr	r3, [pc, #116]	; (8000470 <MX_TIM2_Init+0x120>)
 80003fa:	0011      	movs	r1, r2
 80003fc:	0018      	movs	r0, r3
 80003fe:	f002 faa3 	bl	8002948 <HAL_TIMEx_MasterConfigSynchronization>
 8000402:	1e03      	subs	r3, r0, #0
 8000404:	d001      	beq.n	800040a <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 8000406:	f000 f8db 	bl	80005c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800040a:	1d3b      	adds	r3, r7, #4
 800040c:	2260      	movs	r2, #96	; 0x60
 800040e:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000410:	1d3b      	adds	r3, r7, #4
 8000412:	2200      	movs	r2, #0
 8000414:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000416:	1d3b      	adds	r3, r7, #4
 8000418:	2200      	movs	r2, #0
 800041a:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800041c:	1d3b      	adds	r3, r7, #4
 800041e:	2200      	movs	r2, #0
 8000420:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000422:	1d39      	adds	r1, r7, #4
 8000424:	4b12      	ldr	r3, [pc, #72]	; (8000470 <MX_TIM2_Init+0x120>)
 8000426:	2200      	movs	r2, #0
 8000428:	0018      	movs	r0, r3
 800042a:	f001 fddf 	bl	8001fec <HAL_TIM_PWM_ConfigChannel>
 800042e:	1e03      	subs	r3, r0, #0
 8000430:	d001      	beq.n	8000436 <MX_TIM2_Init+0xe6>
  {
    Error_Handler();
 8000432:	f000 f8c5 	bl	80005c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000436:	1d39      	adds	r1, r7, #4
 8000438:	4b0d      	ldr	r3, [pc, #52]	; (8000470 <MX_TIM2_Init+0x120>)
 800043a:	2204      	movs	r2, #4
 800043c:	0018      	movs	r0, r3
 800043e:	f001 fdd5 	bl	8001fec <HAL_TIM_PWM_ConfigChannel>
 8000442:	1e03      	subs	r3, r0, #0
 8000444:	d001      	beq.n	800044a <MX_TIM2_Init+0xfa>
  {
    Error_Handler();
 8000446:	f000 f8bb 	bl	80005c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800044a:	1d39      	adds	r1, r7, #4
 800044c:	4b08      	ldr	r3, [pc, #32]	; (8000470 <MX_TIM2_Init+0x120>)
 800044e:	220c      	movs	r2, #12
 8000450:	0018      	movs	r0, r3
 8000452:	f001 fdcb 	bl	8001fec <HAL_TIM_PWM_ConfigChannel>
 8000456:	1e03      	subs	r3, r0, #0
 8000458:	d001      	beq.n	800045e <MX_TIM2_Init+0x10e>
  {
    Error_Handler();
 800045a:	f000 f8b1 	bl	80005c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800045e:	4b04      	ldr	r3, [pc, #16]	; (8000470 <MX_TIM2_Init+0x120>)
 8000460:	0018      	movs	r0, r3
 8000462:	f000 f8f3 	bl	800064c <HAL_TIM_MspPostInit>

}
 8000466:	46c0      	nop			; (mov r8, r8)
 8000468:	46bd      	mov	sp, r7
 800046a:	b00e      	add	sp, #56	; 0x38
 800046c:	bd80      	pop	{r7, pc}
 800046e:	46c0      	nop			; (mov r8, r8)
 8000470:	20000028 	.word	0x20000028
 8000474:	00004e1f 	.word	0x00004e1f

08000478 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800047c:	4b14      	ldr	r3, [pc, #80]	; (80004d0 <MX_USART2_UART_Init+0x58>)
 800047e:	4a15      	ldr	r2, [pc, #84]	; (80004d4 <MX_USART2_UART_Init+0x5c>)
 8000480:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000482:	4b13      	ldr	r3, [pc, #76]	; (80004d0 <MX_USART2_UART_Init+0x58>)
 8000484:	22e1      	movs	r2, #225	; 0xe1
 8000486:	0252      	lsls	r2, r2, #9
 8000488:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800048a:	4b11      	ldr	r3, [pc, #68]	; (80004d0 <MX_USART2_UART_Init+0x58>)
 800048c:	2200      	movs	r2, #0
 800048e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000490:	4b0f      	ldr	r3, [pc, #60]	; (80004d0 <MX_USART2_UART_Init+0x58>)
 8000492:	2200      	movs	r2, #0
 8000494:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000496:	4b0e      	ldr	r3, [pc, #56]	; (80004d0 <MX_USART2_UART_Init+0x58>)
 8000498:	2200      	movs	r2, #0
 800049a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800049c:	4b0c      	ldr	r3, [pc, #48]	; (80004d0 <MX_USART2_UART_Init+0x58>)
 800049e:	220c      	movs	r2, #12
 80004a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004a2:	4b0b      	ldr	r3, [pc, #44]	; (80004d0 <MX_USART2_UART_Init+0x58>)
 80004a4:	2200      	movs	r2, #0
 80004a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80004a8:	4b09      	ldr	r3, [pc, #36]	; (80004d0 <MX_USART2_UART_Init+0x58>)
 80004aa:	2200      	movs	r2, #0
 80004ac:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80004ae:	4b08      	ldr	r3, [pc, #32]	; (80004d0 <MX_USART2_UART_Init+0x58>)
 80004b0:	2200      	movs	r2, #0
 80004b2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80004b4:	4b06      	ldr	r3, [pc, #24]	; (80004d0 <MX_USART2_UART_Init+0x58>)
 80004b6:	2200      	movs	r2, #0
 80004b8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80004ba:	4b05      	ldr	r3, [pc, #20]	; (80004d0 <MX_USART2_UART_Init+0x58>)
 80004bc:	0018      	movs	r0, r3
 80004be:	f002 fa9b 	bl	80029f8 <HAL_UART_Init>
 80004c2:	1e03      	subs	r3, r0, #0
 80004c4:	d001      	beq.n	80004ca <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80004c6:	f000 f87b 	bl	80005c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80004ca:	46c0      	nop			; (mov r8, r8)
 80004cc:	46bd      	mov	sp, r7
 80004ce:	bd80      	pop	{r7, pc}
 80004d0:	20000070 	.word	0x20000070
 80004d4:	40004400 	.word	0x40004400

080004d8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b082      	sub	sp, #8
 80004dc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80004de:	4b0c      	ldr	r3, [pc, #48]	; (8000510 <MX_DMA_Init+0x38>)
 80004e0:	695a      	ldr	r2, [r3, #20]
 80004e2:	4b0b      	ldr	r3, [pc, #44]	; (8000510 <MX_DMA_Init+0x38>)
 80004e4:	2101      	movs	r1, #1
 80004e6:	430a      	orrs	r2, r1
 80004e8:	615a      	str	r2, [r3, #20]
 80004ea:	4b09      	ldr	r3, [pc, #36]	; (8000510 <MX_DMA_Init+0x38>)
 80004ec:	695b      	ldr	r3, [r3, #20]
 80004ee:	2201      	movs	r2, #1
 80004f0:	4013      	ands	r3, r2
 80004f2:	607b      	str	r3, [r7, #4]
 80004f4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_IRQn, 0, 0);
 80004f6:	2200      	movs	r2, #0
 80004f8:	2100      	movs	r1, #0
 80004fa:	200b      	movs	r0, #11
 80004fc:	f000 fb10 	bl	8000b20 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_IRQn);
 8000500:	200b      	movs	r0, #11
 8000502:	f000 fb22 	bl	8000b4a <HAL_NVIC_EnableIRQ>

}
 8000506:	46c0      	nop			; (mov r8, r8)
 8000508:	46bd      	mov	sp, r7
 800050a:	b002      	add	sp, #8
 800050c:	bd80      	pop	{r7, pc}
 800050e:	46c0      	nop			; (mov r8, r8)
 8000510:	40021000 	.word	0x40021000

08000514 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000514:	b590      	push	{r4, r7, lr}
 8000516:	b089      	sub	sp, #36	; 0x24
 8000518:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800051a:	240c      	movs	r4, #12
 800051c:	193b      	adds	r3, r7, r4
 800051e:	0018      	movs	r0, r3
 8000520:	2314      	movs	r3, #20
 8000522:	001a      	movs	r2, r3
 8000524:	2100      	movs	r1, #0
 8000526:	f003 fba1 	bl	8003c6c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800052a:	4b23      	ldr	r3, [pc, #140]	; (80005b8 <MX_GPIO_Init+0xa4>)
 800052c:	695a      	ldr	r2, [r3, #20]
 800052e:	4b22      	ldr	r3, [pc, #136]	; (80005b8 <MX_GPIO_Init+0xa4>)
 8000530:	2180      	movs	r1, #128	; 0x80
 8000532:	03c9      	lsls	r1, r1, #15
 8000534:	430a      	orrs	r2, r1
 8000536:	615a      	str	r2, [r3, #20]
 8000538:	4b1f      	ldr	r3, [pc, #124]	; (80005b8 <MX_GPIO_Init+0xa4>)
 800053a:	695a      	ldr	r2, [r3, #20]
 800053c:	2380      	movs	r3, #128	; 0x80
 800053e:	03db      	lsls	r3, r3, #15
 8000540:	4013      	ands	r3, r2
 8000542:	60bb      	str	r3, [r7, #8]
 8000544:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000546:	4b1c      	ldr	r3, [pc, #112]	; (80005b8 <MX_GPIO_Init+0xa4>)
 8000548:	695a      	ldr	r2, [r3, #20]
 800054a:	4b1b      	ldr	r3, [pc, #108]	; (80005b8 <MX_GPIO_Init+0xa4>)
 800054c:	2180      	movs	r1, #128	; 0x80
 800054e:	0289      	lsls	r1, r1, #10
 8000550:	430a      	orrs	r2, r1
 8000552:	615a      	str	r2, [r3, #20]
 8000554:	4b18      	ldr	r3, [pc, #96]	; (80005b8 <MX_GPIO_Init+0xa4>)
 8000556:	695a      	ldr	r2, [r3, #20]
 8000558:	2380      	movs	r3, #128	; 0x80
 800055a:	029b      	lsls	r3, r3, #10
 800055c:	4013      	ands	r3, r2
 800055e:	607b      	str	r3, [r7, #4]
 8000560:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000562:	4b15      	ldr	r3, [pc, #84]	; (80005b8 <MX_GPIO_Init+0xa4>)
 8000564:	695a      	ldr	r2, [r3, #20]
 8000566:	4b14      	ldr	r3, [pc, #80]	; (80005b8 <MX_GPIO_Init+0xa4>)
 8000568:	2180      	movs	r1, #128	; 0x80
 800056a:	02c9      	lsls	r1, r1, #11
 800056c:	430a      	orrs	r2, r1
 800056e:	615a      	str	r2, [r3, #20]
 8000570:	4b11      	ldr	r3, [pc, #68]	; (80005b8 <MX_GPIO_Init+0xa4>)
 8000572:	695a      	ldr	r2, [r3, #20]
 8000574:	2380      	movs	r3, #128	; 0x80
 8000576:	02db      	lsls	r3, r3, #11
 8000578:	4013      	ands	r3, r2
 800057a:	603b      	str	r3, [r7, #0]
 800057c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 800057e:	4b0f      	ldr	r3, [pc, #60]	; (80005bc <MX_GPIO_Init+0xa8>)
 8000580:	2200      	movs	r2, #0
 8000582:	2108      	movs	r1, #8
 8000584:	0018      	movs	r0, r3
 8000586:	f000 fe7b 	bl	8001280 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800058a:	0021      	movs	r1, r4
 800058c:	187b      	adds	r3, r7, r1
 800058e:	2208      	movs	r2, #8
 8000590:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000592:	187b      	adds	r3, r7, r1
 8000594:	2201      	movs	r2, #1
 8000596:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000598:	187b      	adds	r3, r7, r1
 800059a:	2200      	movs	r2, #0
 800059c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800059e:	187b      	adds	r3, r7, r1
 80005a0:	2200      	movs	r2, #0
 80005a2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005a4:	187b      	adds	r3, r7, r1
 80005a6:	4a05      	ldr	r2, [pc, #20]	; (80005bc <MX_GPIO_Init+0xa8>)
 80005a8:	0019      	movs	r1, r3
 80005aa:	0010      	movs	r0, r2
 80005ac:	f000 fd00 	bl	8000fb0 <HAL_GPIO_Init>

}
 80005b0:	46c0      	nop			; (mov r8, r8)
 80005b2:	46bd      	mov	sp, r7
 80005b4:	b009      	add	sp, #36	; 0x24
 80005b6:	bd90      	pop	{r4, r7, pc}
 80005b8:	40021000 	.word	0x40021000
 80005bc:	48000400 	.word	0x48000400

080005c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005c4:	b672      	cpsid	i
}
 80005c6:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005c8:	e7fe      	b.n	80005c8 <Error_Handler+0x8>
	...

080005cc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b082      	sub	sp, #8
 80005d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005d2:	4b0f      	ldr	r3, [pc, #60]	; (8000610 <HAL_MspInit+0x44>)
 80005d4:	699a      	ldr	r2, [r3, #24]
 80005d6:	4b0e      	ldr	r3, [pc, #56]	; (8000610 <HAL_MspInit+0x44>)
 80005d8:	2101      	movs	r1, #1
 80005da:	430a      	orrs	r2, r1
 80005dc:	619a      	str	r2, [r3, #24]
 80005de:	4b0c      	ldr	r3, [pc, #48]	; (8000610 <HAL_MspInit+0x44>)
 80005e0:	699b      	ldr	r3, [r3, #24]
 80005e2:	2201      	movs	r2, #1
 80005e4:	4013      	ands	r3, r2
 80005e6:	607b      	str	r3, [r7, #4]
 80005e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005ea:	4b09      	ldr	r3, [pc, #36]	; (8000610 <HAL_MspInit+0x44>)
 80005ec:	69da      	ldr	r2, [r3, #28]
 80005ee:	4b08      	ldr	r3, [pc, #32]	; (8000610 <HAL_MspInit+0x44>)
 80005f0:	2180      	movs	r1, #128	; 0x80
 80005f2:	0549      	lsls	r1, r1, #21
 80005f4:	430a      	orrs	r2, r1
 80005f6:	61da      	str	r2, [r3, #28]
 80005f8:	4b05      	ldr	r3, [pc, #20]	; (8000610 <HAL_MspInit+0x44>)
 80005fa:	69da      	ldr	r2, [r3, #28]
 80005fc:	2380      	movs	r3, #128	; 0x80
 80005fe:	055b      	lsls	r3, r3, #21
 8000600:	4013      	ands	r3, r2
 8000602:	603b      	str	r3, [r7, #0]
 8000604:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000606:	46c0      	nop			; (mov r8, r8)
 8000608:	46bd      	mov	sp, r7
 800060a:	b002      	add	sp, #8
 800060c:	bd80      	pop	{r7, pc}
 800060e:	46c0      	nop			; (mov r8, r8)
 8000610:	40021000 	.word	0x40021000

08000614 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b084      	sub	sp, #16
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	681a      	ldr	r2, [r3, #0]
 8000620:	2380      	movs	r3, #128	; 0x80
 8000622:	05db      	lsls	r3, r3, #23
 8000624:	429a      	cmp	r2, r3
 8000626:	d10b      	bne.n	8000640 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000628:	4b07      	ldr	r3, [pc, #28]	; (8000648 <HAL_TIM_Base_MspInit+0x34>)
 800062a:	69da      	ldr	r2, [r3, #28]
 800062c:	4b06      	ldr	r3, [pc, #24]	; (8000648 <HAL_TIM_Base_MspInit+0x34>)
 800062e:	2101      	movs	r1, #1
 8000630:	430a      	orrs	r2, r1
 8000632:	61da      	str	r2, [r3, #28]
 8000634:	4b04      	ldr	r3, [pc, #16]	; (8000648 <HAL_TIM_Base_MspInit+0x34>)
 8000636:	69db      	ldr	r3, [r3, #28]
 8000638:	2201      	movs	r2, #1
 800063a:	4013      	ands	r3, r2
 800063c:	60fb      	str	r3, [r7, #12]
 800063e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000640:	46c0      	nop			; (mov r8, r8)
 8000642:	46bd      	mov	sp, r7
 8000644:	b004      	add	sp, #16
 8000646:	bd80      	pop	{r7, pc}
 8000648:	40021000 	.word	0x40021000

0800064c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800064c:	b590      	push	{r4, r7, lr}
 800064e:	b089      	sub	sp, #36	; 0x24
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000654:	240c      	movs	r4, #12
 8000656:	193b      	adds	r3, r7, r4
 8000658:	0018      	movs	r0, r3
 800065a:	2314      	movs	r3, #20
 800065c:	001a      	movs	r2, r3
 800065e:	2100      	movs	r1, #0
 8000660:	f003 fb04 	bl	8003c6c <memset>
  if(htim->Instance==TIM2)
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	681a      	ldr	r2, [r3, #0]
 8000668:	2380      	movs	r3, #128	; 0x80
 800066a:	05db      	lsls	r3, r3, #23
 800066c:	429a      	cmp	r2, r3
 800066e:	d124      	bne.n	80006ba <HAL_TIM_MspPostInit+0x6e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000670:	4b14      	ldr	r3, [pc, #80]	; (80006c4 <HAL_TIM_MspPostInit+0x78>)
 8000672:	695a      	ldr	r2, [r3, #20]
 8000674:	4b13      	ldr	r3, [pc, #76]	; (80006c4 <HAL_TIM_MspPostInit+0x78>)
 8000676:	2180      	movs	r1, #128	; 0x80
 8000678:	0289      	lsls	r1, r1, #10
 800067a:	430a      	orrs	r2, r1
 800067c:	615a      	str	r2, [r3, #20]
 800067e:	4b11      	ldr	r3, [pc, #68]	; (80006c4 <HAL_TIM_MspPostInit+0x78>)
 8000680:	695a      	ldr	r2, [r3, #20]
 8000682:	2380      	movs	r3, #128	; 0x80
 8000684:	029b      	lsls	r3, r3, #10
 8000686:	4013      	ands	r3, r2
 8000688:	60bb      	str	r3, [r7, #8]
 800068a:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3;
 800068c:	0021      	movs	r1, r4
 800068e:	187b      	adds	r3, r7, r1
 8000690:	220b      	movs	r2, #11
 8000692:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000694:	187b      	adds	r3, r7, r1
 8000696:	2202      	movs	r2, #2
 8000698:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069a:	187b      	adds	r3, r7, r1
 800069c:	2200      	movs	r2, #0
 800069e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006a0:	187b      	adds	r3, r7, r1
 80006a2:	2200      	movs	r2, #0
 80006a4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 80006a6:	187b      	adds	r3, r7, r1
 80006a8:	2202      	movs	r2, #2
 80006aa:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ac:	187a      	adds	r2, r7, r1
 80006ae:	2390      	movs	r3, #144	; 0x90
 80006b0:	05db      	lsls	r3, r3, #23
 80006b2:	0011      	movs	r1, r2
 80006b4:	0018      	movs	r0, r3
 80006b6:	f000 fc7b 	bl	8000fb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80006ba:	46c0      	nop			; (mov r8, r8)
 80006bc:	46bd      	mov	sp, r7
 80006be:	b009      	add	sp, #36	; 0x24
 80006c0:	bd90      	pop	{r4, r7, pc}
 80006c2:	46c0      	nop			; (mov r8, r8)
 80006c4:	40021000 	.word	0x40021000

080006c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80006c8:	b590      	push	{r4, r7, lr}
 80006ca:	b08b      	sub	sp, #44	; 0x2c
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d0:	2414      	movs	r4, #20
 80006d2:	193b      	adds	r3, r7, r4
 80006d4:	0018      	movs	r0, r3
 80006d6:	2314      	movs	r3, #20
 80006d8:	001a      	movs	r2, r3
 80006da:	2100      	movs	r1, #0
 80006dc:	f003 fac6 	bl	8003c6c <memset>
  if(huart->Instance==USART2)
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	4a33      	ldr	r2, [pc, #204]	; (80007b4 <HAL_UART_MspInit+0xec>)
 80006e6:	4293      	cmp	r3, r2
 80006e8:	d160      	bne.n	80007ac <HAL_UART_MspInit+0xe4>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80006ea:	4b33      	ldr	r3, [pc, #204]	; (80007b8 <HAL_UART_MspInit+0xf0>)
 80006ec:	69da      	ldr	r2, [r3, #28]
 80006ee:	4b32      	ldr	r3, [pc, #200]	; (80007b8 <HAL_UART_MspInit+0xf0>)
 80006f0:	2180      	movs	r1, #128	; 0x80
 80006f2:	0289      	lsls	r1, r1, #10
 80006f4:	430a      	orrs	r2, r1
 80006f6:	61da      	str	r2, [r3, #28]
 80006f8:	4b2f      	ldr	r3, [pc, #188]	; (80007b8 <HAL_UART_MspInit+0xf0>)
 80006fa:	69da      	ldr	r2, [r3, #28]
 80006fc:	2380      	movs	r3, #128	; 0x80
 80006fe:	029b      	lsls	r3, r3, #10
 8000700:	4013      	ands	r3, r2
 8000702:	613b      	str	r3, [r7, #16]
 8000704:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000706:	4b2c      	ldr	r3, [pc, #176]	; (80007b8 <HAL_UART_MspInit+0xf0>)
 8000708:	695a      	ldr	r2, [r3, #20]
 800070a:	4b2b      	ldr	r3, [pc, #172]	; (80007b8 <HAL_UART_MspInit+0xf0>)
 800070c:	2180      	movs	r1, #128	; 0x80
 800070e:	0289      	lsls	r1, r1, #10
 8000710:	430a      	orrs	r2, r1
 8000712:	615a      	str	r2, [r3, #20]
 8000714:	4b28      	ldr	r3, [pc, #160]	; (80007b8 <HAL_UART_MspInit+0xf0>)
 8000716:	695a      	ldr	r2, [r3, #20]
 8000718:	2380      	movs	r3, #128	; 0x80
 800071a:	029b      	lsls	r3, r3, #10
 800071c:	4013      	ands	r3, r2
 800071e:	60fb      	str	r3, [r7, #12]
 8000720:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8000722:	0021      	movs	r1, r4
 8000724:	187b      	adds	r3, r7, r1
 8000726:	4a25      	ldr	r2, [pc, #148]	; (80007bc <HAL_UART_MspInit+0xf4>)
 8000728:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800072a:	187b      	adds	r3, r7, r1
 800072c:	2202      	movs	r2, #2
 800072e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000730:	187b      	adds	r3, r7, r1
 8000732:	2200      	movs	r2, #0
 8000734:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000736:	187b      	adds	r3, r7, r1
 8000738:	2203      	movs	r2, #3
 800073a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 800073c:	187b      	adds	r3, r7, r1
 800073e:	2201      	movs	r2, #1
 8000740:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000742:	187a      	adds	r2, r7, r1
 8000744:	2390      	movs	r3, #144	; 0x90
 8000746:	05db      	lsls	r3, r3, #23
 8000748:	0011      	movs	r1, r2
 800074a:	0018      	movs	r0, r3
 800074c:	f000 fc30 	bl	8000fb0 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel5;
 8000750:	4b1b      	ldr	r3, [pc, #108]	; (80007c0 <HAL_UART_MspInit+0xf8>)
 8000752:	4a1c      	ldr	r2, [pc, #112]	; (80007c4 <HAL_UART_MspInit+0xfc>)
 8000754:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000756:	4b1a      	ldr	r3, [pc, #104]	; (80007c0 <HAL_UART_MspInit+0xf8>)
 8000758:	2200      	movs	r2, #0
 800075a:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800075c:	4b18      	ldr	r3, [pc, #96]	; (80007c0 <HAL_UART_MspInit+0xf8>)
 800075e:	2200      	movs	r2, #0
 8000760:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000762:	4b17      	ldr	r3, [pc, #92]	; (80007c0 <HAL_UART_MspInit+0xf8>)
 8000764:	2280      	movs	r2, #128	; 0x80
 8000766:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000768:	4b15      	ldr	r3, [pc, #84]	; (80007c0 <HAL_UART_MspInit+0xf8>)
 800076a:	2200      	movs	r2, #0
 800076c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800076e:	4b14      	ldr	r3, [pc, #80]	; (80007c0 <HAL_UART_MspInit+0xf8>)
 8000770:	2200      	movs	r2, #0
 8000772:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8000774:	4b12      	ldr	r3, [pc, #72]	; (80007c0 <HAL_UART_MspInit+0xf8>)
 8000776:	2220      	movs	r2, #32
 8000778:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800077a:	4b11      	ldr	r3, [pc, #68]	; (80007c0 <HAL_UART_MspInit+0xf8>)
 800077c:	2200      	movs	r2, #0
 800077e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000780:	4b0f      	ldr	r3, [pc, #60]	; (80007c0 <HAL_UART_MspInit+0xf8>)
 8000782:	0018      	movs	r0, r3
 8000784:	f000 f9fe 	bl	8000b84 <HAL_DMA_Init>
 8000788:	1e03      	subs	r3, r0, #0
 800078a:	d001      	beq.n	8000790 <HAL_UART_MspInit+0xc8>
    {
      Error_Handler();
 800078c:	f7ff ff18 	bl	80005c0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	4a0b      	ldr	r2, [pc, #44]	; (80007c0 <HAL_UART_MspInit+0xf8>)
 8000794:	671a      	str	r2, [r3, #112]	; 0x70
 8000796:	4b0a      	ldr	r3, [pc, #40]	; (80007c0 <HAL_UART_MspInit+0xf8>)
 8000798:	687a      	ldr	r2, [r7, #4]
 800079a:	625a      	str	r2, [r3, #36]	; 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800079c:	2200      	movs	r2, #0
 800079e:	2100      	movs	r1, #0
 80007a0:	201c      	movs	r0, #28
 80007a2:	f000 f9bd 	bl	8000b20 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80007a6:	201c      	movs	r0, #28
 80007a8:	f000 f9cf 	bl	8000b4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80007ac:	46c0      	nop			; (mov r8, r8)
 80007ae:	46bd      	mov	sp, r7
 80007b0:	b00b      	add	sp, #44	; 0x2c
 80007b2:	bd90      	pop	{r4, r7, pc}
 80007b4:	40004400 	.word	0x40004400
 80007b8:	40021000 	.word	0x40021000
 80007bc:	00008004 	.word	0x00008004
 80007c0:	200000f4 	.word	0x200000f4
 80007c4:	40020058 	.word	0x40020058

080007c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007cc:	e7fe      	b.n	80007cc <NMI_Handler+0x4>

080007ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007ce:	b580      	push	{r7, lr}
 80007d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007d2:	e7fe      	b.n	80007d2 <HardFault_Handler+0x4>

080007d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80007d8:	46c0      	nop			; (mov r8, r8)
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}

080007de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007de:	b580      	push	{r7, lr}
 80007e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007e2:	46c0      	nop			; (mov r8, r8)
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}

080007e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007ec:	f000 f8ac 	bl	8000948 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007f0:	46c0      	nop			; (mov r8, r8)
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
	...

080007f8 <DMA1_Channel4_5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4 and 5 interrupts.
  */
void DMA1_Channel4_5_IRQHandler(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80007fc:	4b03      	ldr	r3, [pc, #12]	; (800080c <DMA1_Channel4_5_IRQHandler+0x14>)
 80007fe:	0018      	movs	r0, r3
 8000800:	f000 faeb 	bl	8000dda <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_IRQn 1 */
}
 8000804:	46c0      	nop			; (mov r8, r8)
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
 800080a:	46c0      	nop			; (mov r8, r8)
 800080c:	200000f4 	.word	0x200000f4

08000810 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000814:	4b03      	ldr	r3, [pc, #12]	; (8000824 <USART2_IRQHandler+0x14>)
 8000816:	0018      	movs	r0, r3
 8000818:	f002 f9a4 	bl	8002b64 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800081c:	46c0      	nop			; (mov r8, r8)
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
 8000822:	46c0      	nop			; (mov r8, r8)
 8000824:	20000070 	.word	0x20000070

08000828 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800082c:	46c0      	nop			; (mov r8, r8)
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
	...

08000834 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000834:	4813      	ldr	r0, [pc, #76]	; (8000884 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000836:	4685      	mov	sp, r0

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 8000838:	4813      	ldr	r0, [pc, #76]	; (8000888 <LoopForever+0x6>)
    LDR R1, [R0]
 800083a:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 800083c:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 800083e:	4a13      	ldr	r2, [pc, #76]	; (800088c <LoopForever+0xa>)
    CMP R1, R2
 8000840:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8000842:	d105      	bne.n	8000850 <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 8000844:	4812      	ldr	r0, [pc, #72]	; (8000890 <LoopForever+0xe>)
    LDR R1,=0x00000001
 8000846:	4913      	ldr	r1, [pc, #76]	; (8000894 <LoopForever+0x12>)
    STR R1, [R0]
 8000848:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 800084a:	4813      	ldr	r0, [pc, #76]	; (8000898 <LoopForever+0x16>)
    LDR R1,=0x00000000
 800084c:	4913      	ldr	r1, [pc, #76]	; (800089c <LoopForever+0x1a>)
    STR R1, [R0]
 800084e:	6001      	str	r1, [r0, #0]

08000850 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000850:	4813      	ldr	r0, [pc, #76]	; (80008a0 <LoopForever+0x1e>)
  ldr r1, =_edata
 8000852:	4914      	ldr	r1, [pc, #80]	; (80008a4 <LoopForever+0x22>)
  ldr r2, =_sidata
 8000854:	4a14      	ldr	r2, [pc, #80]	; (80008a8 <LoopForever+0x26>)
  movs r3, #0
 8000856:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000858:	e002      	b.n	8000860 <LoopCopyDataInit>

0800085a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800085a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800085c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800085e:	3304      	adds	r3, #4

08000860 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000860:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000862:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000864:	d3f9      	bcc.n	800085a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000866:	4a11      	ldr	r2, [pc, #68]	; (80008ac <LoopForever+0x2a>)
  ldr r4, =_ebss
 8000868:	4c11      	ldr	r4, [pc, #68]	; (80008b0 <LoopForever+0x2e>)
  movs r3, #0
 800086a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800086c:	e001      	b.n	8000872 <LoopFillZerobss>

0800086e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800086e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000870:	3204      	adds	r2, #4

08000872 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000872:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000874:	d3fb      	bcc.n	800086e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000876:	f7ff ffd7 	bl	8000828 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800087a:	f003 f9d3 	bl	8003c24 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800087e:	f7ff fcf1 	bl	8000264 <main>

08000882 <LoopForever>:

LoopForever:
    b LoopForever
 8000882:	e7fe      	b.n	8000882 <LoopForever>
  ldr   r0, =_estack
 8000884:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 8000888:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 800088c:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 8000890:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 8000894:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8000898:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 800089c:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 80008a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008a4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80008a8:	08003cd4 	.word	0x08003cd4
  ldr r2, =_sbss
 80008ac:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80008b0:	20000140 	.word	0x20000140

080008b4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008b4:	e7fe      	b.n	80008b4 <ADC1_IRQHandler>
	...

080008b8 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008bc:	4b07      	ldr	r3, [pc, #28]	; (80008dc <HAL_Init+0x24>)
 80008be:	681a      	ldr	r2, [r3, #0]
 80008c0:	4b06      	ldr	r3, [pc, #24]	; (80008dc <HAL_Init+0x24>)
 80008c2:	2110      	movs	r1, #16
 80008c4:	430a      	orrs	r2, r1
 80008c6:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80008c8:	2000      	movs	r0, #0
 80008ca:	f000 f809 	bl	80008e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008ce:	f7ff fe7d 	bl	80005cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008d2:	2300      	movs	r3, #0
}
 80008d4:	0018      	movs	r0, r3
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	46c0      	nop			; (mov r8, r8)
 80008dc:	40022000 	.word	0x40022000

080008e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008e0:	b590      	push	{r4, r7, lr}
 80008e2:	b083      	sub	sp, #12
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008e8:	4b14      	ldr	r3, [pc, #80]	; (800093c <HAL_InitTick+0x5c>)
 80008ea:	681c      	ldr	r4, [r3, #0]
 80008ec:	4b14      	ldr	r3, [pc, #80]	; (8000940 <HAL_InitTick+0x60>)
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	0019      	movs	r1, r3
 80008f2:	23fa      	movs	r3, #250	; 0xfa
 80008f4:	0098      	lsls	r0, r3, #2
 80008f6:	f7ff fc07 	bl	8000108 <__udivsi3>
 80008fa:	0003      	movs	r3, r0
 80008fc:	0019      	movs	r1, r3
 80008fe:	0020      	movs	r0, r4
 8000900:	f7ff fc02 	bl	8000108 <__udivsi3>
 8000904:	0003      	movs	r3, r0
 8000906:	0018      	movs	r0, r3
 8000908:	f000 f92f 	bl	8000b6a <HAL_SYSTICK_Config>
 800090c:	1e03      	subs	r3, r0, #0
 800090e:	d001      	beq.n	8000914 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000910:	2301      	movs	r3, #1
 8000912:	e00f      	b.n	8000934 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	2b03      	cmp	r3, #3
 8000918:	d80b      	bhi.n	8000932 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800091a:	6879      	ldr	r1, [r7, #4]
 800091c:	2301      	movs	r3, #1
 800091e:	425b      	negs	r3, r3
 8000920:	2200      	movs	r2, #0
 8000922:	0018      	movs	r0, r3
 8000924:	f000 f8fc 	bl	8000b20 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000928:	4b06      	ldr	r3, [pc, #24]	; (8000944 <HAL_InitTick+0x64>)
 800092a:	687a      	ldr	r2, [r7, #4]
 800092c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800092e:	2300      	movs	r3, #0
 8000930:	e000      	b.n	8000934 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000932:	2301      	movs	r3, #1
}
 8000934:	0018      	movs	r0, r3
 8000936:	46bd      	mov	sp, r7
 8000938:	b003      	add	sp, #12
 800093a:	bd90      	pop	{r4, r7, pc}
 800093c:	20000000 	.word	0x20000000
 8000940:	20000008 	.word	0x20000008
 8000944:	20000004 	.word	0x20000004

08000948 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800094c:	4b05      	ldr	r3, [pc, #20]	; (8000964 <HAL_IncTick+0x1c>)
 800094e:	781b      	ldrb	r3, [r3, #0]
 8000950:	001a      	movs	r2, r3
 8000952:	4b05      	ldr	r3, [pc, #20]	; (8000968 <HAL_IncTick+0x20>)
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	18d2      	adds	r2, r2, r3
 8000958:	4b03      	ldr	r3, [pc, #12]	; (8000968 <HAL_IncTick+0x20>)
 800095a:	601a      	str	r2, [r3, #0]
}
 800095c:	46c0      	nop			; (mov r8, r8)
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	46c0      	nop			; (mov r8, r8)
 8000964:	20000008 	.word	0x20000008
 8000968:	2000013c 	.word	0x2000013c

0800096c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
  return uwTick;
 8000970:	4b02      	ldr	r3, [pc, #8]	; (800097c <HAL_GetTick+0x10>)
 8000972:	681b      	ldr	r3, [r3, #0]
}
 8000974:	0018      	movs	r0, r3
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
 800097a:	46c0      	nop			; (mov r8, r8)
 800097c:	2000013c 	.word	0x2000013c

08000980 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b084      	sub	sp, #16
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000988:	f7ff fff0 	bl	800096c <HAL_GetTick>
 800098c:	0003      	movs	r3, r0
 800098e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	3301      	adds	r3, #1
 8000998:	d005      	beq.n	80009a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800099a:	4b0a      	ldr	r3, [pc, #40]	; (80009c4 <HAL_Delay+0x44>)
 800099c:	781b      	ldrb	r3, [r3, #0]
 800099e:	001a      	movs	r2, r3
 80009a0:	68fb      	ldr	r3, [r7, #12]
 80009a2:	189b      	adds	r3, r3, r2
 80009a4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80009a6:	46c0      	nop			; (mov r8, r8)
 80009a8:	f7ff ffe0 	bl	800096c <HAL_GetTick>
 80009ac:	0002      	movs	r2, r0
 80009ae:	68bb      	ldr	r3, [r7, #8]
 80009b0:	1ad3      	subs	r3, r2, r3
 80009b2:	68fa      	ldr	r2, [r7, #12]
 80009b4:	429a      	cmp	r2, r3
 80009b6:	d8f7      	bhi.n	80009a8 <HAL_Delay+0x28>
  {
  }
}
 80009b8:	46c0      	nop			; (mov r8, r8)
 80009ba:	46c0      	nop			; (mov r8, r8)
 80009bc:	46bd      	mov	sp, r7
 80009be:	b004      	add	sp, #16
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	46c0      	nop			; (mov r8, r8)
 80009c4:	20000008 	.word	0x20000008

080009c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b082      	sub	sp, #8
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	0002      	movs	r2, r0
 80009d0:	1dfb      	adds	r3, r7, #7
 80009d2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80009d4:	1dfb      	adds	r3, r7, #7
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	2b7f      	cmp	r3, #127	; 0x7f
 80009da:	d809      	bhi.n	80009f0 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009dc:	1dfb      	adds	r3, r7, #7
 80009de:	781b      	ldrb	r3, [r3, #0]
 80009e0:	001a      	movs	r2, r3
 80009e2:	231f      	movs	r3, #31
 80009e4:	401a      	ands	r2, r3
 80009e6:	4b04      	ldr	r3, [pc, #16]	; (80009f8 <__NVIC_EnableIRQ+0x30>)
 80009e8:	2101      	movs	r1, #1
 80009ea:	4091      	lsls	r1, r2
 80009ec:	000a      	movs	r2, r1
 80009ee:	601a      	str	r2, [r3, #0]
  }
}
 80009f0:	46c0      	nop			; (mov r8, r8)
 80009f2:	46bd      	mov	sp, r7
 80009f4:	b002      	add	sp, #8
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	e000e100 	.word	0xe000e100

080009fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009fc:	b590      	push	{r4, r7, lr}
 80009fe:	b083      	sub	sp, #12
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	0002      	movs	r2, r0
 8000a04:	6039      	str	r1, [r7, #0]
 8000a06:	1dfb      	adds	r3, r7, #7
 8000a08:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000a0a:	1dfb      	adds	r3, r7, #7
 8000a0c:	781b      	ldrb	r3, [r3, #0]
 8000a0e:	2b7f      	cmp	r3, #127	; 0x7f
 8000a10:	d828      	bhi.n	8000a64 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a12:	4a2f      	ldr	r2, [pc, #188]	; (8000ad0 <__NVIC_SetPriority+0xd4>)
 8000a14:	1dfb      	adds	r3, r7, #7
 8000a16:	781b      	ldrb	r3, [r3, #0]
 8000a18:	b25b      	sxtb	r3, r3
 8000a1a:	089b      	lsrs	r3, r3, #2
 8000a1c:	33c0      	adds	r3, #192	; 0xc0
 8000a1e:	009b      	lsls	r3, r3, #2
 8000a20:	589b      	ldr	r3, [r3, r2]
 8000a22:	1dfa      	adds	r2, r7, #7
 8000a24:	7812      	ldrb	r2, [r2, #0]
 8000a26:	0011      	movs	r1, r2
 8000a28:	2203      	movs	r2, #3
 8000a2a:	400a      	ands	r2, r1
 8000a2c:	00d2      	lsls	r2, r2, #3
 8000a2e:	21ff      	movs	r1, #255	; 0xff
 8000a30:	4091      	lsls	r1, r2
 8000a32:	000a      	movs	r2, r1
 8000a34:	43d2      	mvns	r2, r2
 8000a36:	401a      	ands	r2, r3
 8000a38:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a3a:	683b      	ldr	r3, [r7, #0]
 8000a3c:	019b      	lsls	r3, r3, #6
 8000a3e:	22ff      	movs	r2, #255	; 0xff
 8000a40:	401a      	ands	r2, r3
 8000a42:	1dfb      	adds	r3, r7, #7
 8000a44:	781b      	ldrb	r3, [r3, #0]
 8000a46:	0018      	movs	r0, r3
 8000a48:	2303      	movs	r3, #3
 8000a4a:	4003      	ands	r3, r0
 8000a4c:	00db      	lsls	r3, r3, #3
 8000a4e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a50:	481f      	ldr	r0, [pc, #124]	; (8000ad0 <__NVIC_SetPriority+0xd4>)
 8000a52:	1dfb      	adds	r3, r7, #7
 8000a54:	781b      	ldrb	r3, [r3, #0]
 8000a56:	b25b      	sxtb	r3, r3
 8000a58:	089b      	lsrs	r3, r3, #2
 8000a5a:	430a      	orrs	r2, r1
 8000a5c:	33c0      	adds	r3, #192	; 0xc0
 8000a5e:	009b      	lsls	r3, r3, #2
 8000a60:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000a62:	e031      	b.n	8000ac8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a64:	4a1b      	ldr	r2, [pc, #108]	; (8000ad4 <__NVIC_SetPriority+0xd8>)
 8000a66:	1dfb      	adds	r3, r7, #7
 8000a68:	781b      	ldrb	r3, [r3, #0]
 8000a6a:	0019      	movs	r1, r3
 8000a6c:	230f      	movs	r3, #15
 8000a6e:	400b      	ands	r3, r1
 8000a70:	3b08      	subs	r3, #8
 8000a72:	089b      	lsrs	r3, r3, #2
 8000a74:	3306      	adds	r3, #6
 8000a76:	009b      	lsls	r3, r3, #2
 8000a78:	18d3      	adds	r3, r2, r3
 8000a7a:	3304      	adds	r3, #4
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	1dfa      	adds	r2, r7, #7
 8000a80:	7812      	ldrb	r2, [r2, #0]
 8000a82:	0011      	movs	r1, r2
 8000a84:	2203      	movs	r2, #3
 8000a86:	400a      	ands	r2, r1
 8000a88:	00d2      	lsls	r2, r2, #3
 8000a8a:	21ff      	movs	r1, #255	; 0xff
 8000a8c:	4091      	lsls	r1, r2
 8000a8e:	000a      	movs	r2, r1
 8000a90:	43d2      	mvns	r2, r2
 8000a92:	401a      	ands	r2, r3
 8000a94:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a96:	683b      	ldr	r3, [r7, #0]
 8000a98:	019b      	lsls	r3, r3, #6
 8000a9a:	22ff      	movs	r2, #255	; 0xff
 8000a9c:	401a      	ands	r2, r3
 8000a9e:	1dfb      	adds	r3, r7, #7
 8000aa0:	781b      	ldrb	r3, [r3, #0]
 8000aa2:	0018      	movs	r0, r3
 8000aa4:	2303      	movs	r3, #3
 8000aa6:	4003      	ands	r3, r0
 8000aa8:	00db      	lsls	r3, r3, #3
 8000aaa:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000aac:	4809      	ldr	r0, [pc, #36]	; (8000ad4 <__NVIC_SetPriority+0xd8>)
 8000aae:	1dfb      	adds	r3, r7, #7
 8000ab0:	781b      	ldrb	r3, [r3, #0]
 8000ab2:	001c      	movs	r4, r3
 8000ab4:	230f      	movs	r3, #15
 8000ab6:	4023      	ands	r3, r4
 8000ab8:	3b08      	subs	r3, #8
 8000aba:	089b      	lsrs	r3, r3, #2
 8000abc:	430a      	orrs	r2, r1
 8000abe:	3306      	adds	r3, #6
 8000ac0:	009b      	lsls	r3, r3, #2
 8000ac2:	18c3      	adds	r3, r0, r3
 8000ac4:	3304      	adds	r3, #4
 8000ac6:	601a      	str	r2, [r3, #0]
}
 8000ac8:	46c0      	nop			; (mov r8, r8)
 8000aca:	46bd      	mov	sp, r7
 8000acc:	b003      	add	sp, #12
 8000ace:	bd90      	pop	{r4, r7, pc}
 8000ad0:	e000e100 	.word	0xe000e100
 8000ad4:	e000ed00 	.word	0xe000ed00

08000ad8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b082      	sub	sp, #8
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	1e5a      	subs	r2, r3, #1
 8000ae4:	2380      	movs	r3, #128	; 0x80
 8000ae6:	045b      	lsls	r3, r3, #17
 8000ae8:	429a      	cmp	r2, r3
 8000aea:	d301      	bcc.n	8000af0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000aec:	2301      	movs	r3, #1
 8000aee:	e010      	b.n	8000b12 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000af0:	4b0a      	ldr	r3, [pc, #40]	; (8000b1c <SysTick_Config+0x44>)
 8000af2:	687a      	ldr	r2, [r7, #4]
 8000af4:	3a01      	subs	r2, #1
 8000af6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000af8:	2301      	movs	r3, #1
 8000afa:	425b      	negs	r3, r3
 8000afc:	2103      	movs	r1, #3
 8000afe:	0018      	movs	r0, r3
 8000b00:	f7ff ff7c 	bl	80009fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b04:	4b05      	ldr	r3, [pc, #20]	; (8000b1c <SysTick_Config+0x44>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b0a:	4b04      	ldr	r3, [pc, #16]	; (8000b1c <SysTick_Config+0x44>)
 8000b0c:	2207      	movs	r2, #7
 8000b0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b10:	2300      	movs	r3, #0
}
 8000b12:	0018      	movs	r0, r3
 8000b14:	46bd      	mov	sp, r7
 8000b16:	b002      	add	sp, #8
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	46c0      	nop			; (mov r8, r8)
 8000b1c:	e000e010 	.word	0xe000e010

08000b20 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b084      	sub	sp, #16
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	60b9      	str	r1, [r7, #8]
 8000b28:	607a      	str	r2, [r7, #4]
 8000b2a:	210f      	movs	r1, #15
 8000b2c:	187b      	adds	r3, r7, r1
 8000b2e:	1c02      	adds	r2, r0, #0
 8000b30:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000b32:	68ba      	ldr	r2, [r7, #8]
 8000b34:	187b      	adds	r3, r7, r1
 8000b36:	781b      	ldrb	r3, [r3, #0]
 8000b38:	b25b      	sxtb	r3, r3
 8000b3a:	0011      	movs	r1, r2
 8000b3c:	0018      	movs	r0, r3
 8000b3e:	f7ff ff5d 	bl	80009fc <__NVIC_SetPriority>
}
 8000b42:	46c0      	nop			; (mov r8, r8)
 8000b44:	46bd      	mov	sp, r7
 8000b46:	b004      	add	sp, #16
 8000b48:	bd80      	pop	{r7, pc}

08000b4a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b4a:	b580      	push	{r7, lr}
 8000b4c:	b082      	sub	sp, #8
 8000b4e:	af00      	add	r7, sp, #0
 8000b50:	0002      	movs	r2, r0
 8000b52:	1dfb      	adds	r3, r7, #7
 8000b54:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b56:	1dfb      	adds	r3, r7, #7
 8000b58:	781b      	ldrb	r3, [r3, #0]
 8000b5a:	b25b      	sxtb	r3, r3
 8000b5c:	0018      	movs	r0, r3
 8000b5e:	f7ff ff33 	bl	80009c8 <__NVIC_EnableIRQ>
}
 8000b62:	46c0      	nop			; (mov r8, r8)
 8000b64:	46bd      	mov	sp, r7
 8000b66:	b002      	add	sp, #8
 8000b68:	bd80      	pop	{r7, pc}

08000b6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b6a:	b580      	push	{r7, lr}
 8000b6c:	b082      	sub	sp, #8
 8000b6e:	af00      	add	r7, sp, #0
 8000b70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	0018      	movs	r0, r3
 8000b76:	f7ff ffaf 	bl	8000ad8 <SysTick_Config>
 8000b7a:	0003      	movs	r3, r0
}
 8000b7c:	0018      	movs	r0, r3
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	b002      	add	sp, #8
 8000b82:	bd80      	pop	{r7, pc}

08000b84 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b084      	sub	sp, #16
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d101      	bne.n	8000b9a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000b96:	2301      	movs	r3, #1
 8000b98:	e036      	b.n	8000c08 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	2221      	movs	r2, #33	; 0x21
 8000b9e:	2102      	movs	r1, #2
 8000ba0:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000baa:	68fb      	ldr	r3, [r7, #12]
 8000bac:	4a18      	ldr	r2, [pc, #96]	; (8000c10 <HAL_DMA_Init+0x8c>)
 8000bae:	4013      	ands	r3, r2
 8000bb0:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000bba:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	68db      	ldr	r3, [r3, #12]
 8000bc0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000bc6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	695b      	ldr	r3, [r3, #20]
 8000bcc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000bd2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	69db      	ldr	r3, [r3, #28]
 8000bd8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000bda:	68fa      	ldr	r2, [r7, #12]
 8000bdc:	4313      	orrs	r3, r2
 8000bde:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	68fa      	ldr	r2, [r7, #12]
 8000be6:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	0018      	movs	r0, r3
 8000bec:	f000 f9c4 	bl	8000f78 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	2221      	movs	r2, #33	; 0x21
 8000bfa:	2101      	movs	r1, #1
 8000bfc:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	2220      	movs	r2, #32
 8000c02:	2100      	movs	r1, #0
 8000c04:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8000c06:	2300      	movs	r3, #0
}  
 8000c08:	0018      	movs	r0, r3
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	b004      	add	sp, #16
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	ffffc00f 	.word	0xffffc00f

08000c14 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b086      	sub	sp, #24
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	60f8      	str	r0, [r7, #12]
 8000c1c:	60b9      	str	r1, [r7, #8]
 8000c1e:	607a      	str	r2, [r7, #4]
 8000c20:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8000c22:	2317      	movs	r3, #23
 8000c24:	18fb      	adds	r3, r7, r3
 8000c26:	2200      	movs	r2, #0
 8000c28:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8000c2a:	68fb      	ldr	r3, [r7, #12]
 8000c2c:	2220      	movs	r2, #32
 8000c2e:	5c9b      	ldrb	r3, [r3, r2]
 8000c30:	2b01      	cmp	r3, #1
 8000c32:	d101      	bne.n	8000c38 <HAL_DMA_Start_IT+0x24>
 8000c34:	2302      	movs	r3, #2
 8000c36:	e04f      	b.n	8000cd8 <HAL_DMA_Start_IT+0xc4>
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	2220      	movs	r2, #32
 8000c3c:	2101      	movs	r1, #1
 8000c3e:	5499      	strb	r1, [r3, r2]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	2221      	movs	r2, #33	; 0x21
 8000c44:	5c9b      	ldrb	r3, [r3, r2]
 8000c46:	b2db      	uxtb	r3, r3
 8000c48:	2b01      	cmp	r3, #1
 8000c4a:	d13a      	bne.n	8000cc2 <HAL_DMA_Start_IT+0xae>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	2221      	movs	r2, #33	; 0x21
 8000c50:	2102      	movs	r1, #2
 8000c52:	5499      	strb	r1, [r3, r2]
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	2200      	movs	r2, #0
 8000c58:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	681a      	ldr	r2, [r3, #0]
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	2101      	movs	r1, #1
 8000c66:	438a      	bics	r2, r1
 8000c68:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000c6a:	683b      	ldr	r3, [r7, #0]
 8000c6c:	687a      	ldr	r2, [r7, #4]
 8000c6e:	68b9      	ldr	r1, [r7, #8]
 8000c70:	68f8      	ldr	r0, [r7, #12]
 8000c72:	f000 f954 	bl	8000f1e <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d008      	beq.n	8000c90 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	681a      	ldr	r2, [r3, #0]
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	210e      	movs	r1, #14
 8000c8a:	430a      	orrs	r2, r1
 8000c8c:	601a      	str	r2, [r3, #0]
 8000c8e:	e00f      	b.n	8000cb0 <HAL_DMA_Start_IT+0x9c>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	681a      	ldr	r2, [r3, #0]
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	210a      	movs	r1, #10
 8000c9c:	430a      	orrs	r2, r1
 8000c9e:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	681a      	ldr	r2, [r3, #0]
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	2104      	movs	r1, #4
 8000cac:	438a      	bics	r2, r1
 8000cae:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	681a      	ldr	r2, [r3, #0]
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	2101      	movs	r1, #1
 8000cbc:	430a      	orrs	r2, r1
 8000cbe:	601a      	str	r2, [r3, #0]
 8000cc0:	e007      	b.n	8000cd2 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000cc2:	68fb      	ldr	r3, [r7, #12]
 8000cc4:	2220      	movs	r2, #32
 8000cc6:	2100      	movs	r1, #0
 8000cc8:	5499      	strb	r1, [r3, r2]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8000cca:	2317      	movs	r3, #23
 8000ccc:	18fb      	adds	r3, r7, r3
 8000cce:	2202      	movs	r2, #2
 8000cd0:	701a      	strb	r2, [r3, #0]
  }     
  
  return status;    
 8000cd2:	2317      	movs	r3, #23
 8000cd4:	18fb      	adds	r3, r7, r3
 8000cd6:	781b      	ldrb	r3, [r3, #0]
} 
 8000cd8:	0018      	movs	r0, r3
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	b006      	add	sp, #24
 8000cde:	bd80      	pop	{r7, pc}

08000ce0 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	2221      	movs	r2, #33	; 0x21
 8000cec:	5c9b      	ldrb	r3, [r3, r2]
 8000cee:	b2db      	uxtb	r3, r3
 8000cf0:	2b02      	cmp	r3, #2
 8000cf2:	d008      	beq.n	8000d06 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	2204      	movs	r2, #4
 8000cf8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	2220      	movs	r2, #32
 8000cfe:	2100      	movs	r1, #0
 8000d00:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 8000d02:	2301      	movs	r3, #1
 8000d04:	e020      	b.n	8000d48 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	681a      	ldr	r2, [r3, #0]
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	210e      	movs	r1, #14
 8000d12:	438a      	bics	r2, r1
 8000d14:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	681a      	ldr	r2, [r3, #0]
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	2101      	movs	r1, #1
 8000d22:	438a      	bics	r2, r1
 8000d24:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d2e:	2101      	movs	r1, #1
 8000d30:	4091      	lsls	r1, r2
 8000d32:	000a      	movs	r2, r1
 8000d34:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	2221      	movs	r2, #33	; 0x21
 8000d3a:	2101      	movs	r1, #1
 8000d3c:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	2220      	movs	r2, #32
 8000d42:	2100      	movs	r1, #0
 8000d44:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8000d46:	2300      	movs	r3, #0
}
 8000d48:	0018      	movs	r0, r3
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	b002      	add	sp, #8
 8000d4e:	bd80      	pop	{r7, pc}

08000d50 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b084      	sub	sp, #16
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d58:	210f      	movs	r1, #15
 8000d5a:	187b      	adds	r3, r7, r1
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	2221      	movs	r2, #33	; 0x21
 8000d64:	5c9b      	ldrb	r3, [r3, r2]
 8000d66:	b2db      	uxtb	r3, r3
 8000d68:	2b02      	cmp	r3, #2
 8000d6a:	d006      	beq.n	8000d7a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	2204      	movs	r2, #4
 8000d70:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000d72:	187b      	adds	r3, r7, r1
 8000d74:	2201      	movs	r2, #1
 8000d76:	701a      	strb	r2, [r3, #0]
 8000d78:	e028      	b.n	8000dcc <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	681a      	ldr	r2, [r3, #0]
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	210e      	movs	r1, #14
 8000d86:	438a      	bics	r2, r1
 8000d88:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	681a      	ldr	r2, [r3, #0]
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	2101      	movs	r1, #1
 8000d96:	438a      	bics	r2, r1
 8000d98:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000da2:	2101      	movs	r1, #1
 8000da4:	4091      	lsls	r1, r2
 8000da6:	000a      	movs	r2, r1
 8000da8:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	2221      	movs	r2, #33	; 0x21
 8000dae:	2101      	movs	r1, #1
 8000db0:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	2220      	movs	r2, #32
 8000db6:	2100      	movs	r1, #0
 8000db8:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d004      	beq.n	8000dcc <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000dc6:	687a      	ldr	r2, [r7, #4]
 8000dc8:	0010      	movs	r0, r2
 8000dca:	4798      	blx	r3
    } 
  }
  return status;
 8000dcc:	230f      	movs	r3, #15
 8000dce:	18fb      	adds	r3, r7, r3
 8000dd0:	781b      	ldrb	r3, [r3, #0]
}
 8000dd2:	0018      	movs	r0, r3
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	b004      	add	sp, #16
 8000dd8:	bd80      	pop	{r7, pc}

08000dda <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000dda:	b580      	push	{r7, lr}
 8000ddc:	b084      	sub	sp, #16
 8000dde:	af00      	add	r7, sp, #0
 8000de0:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000df6:	2204      	movs	r2, #4
 8000df8:	409a      	lsls	r2, r3
 8000dfa:	0013      	movs	r3, r2
 8000dfc:	68fa      	ldr	r2, [r7, #12]
 8000dfe:	4013      	ands	r3, r2
 8000e00:	d024      	beq.n	8000e4c <HAL_DMA_IRQHandler+0x72>
 8000e02:	68bb      	ldr	r3, [r7, #8]
 8000e04:	2204      	movs	r2, #4
 8000e06:	4013      	ands	r3, r2
 8000e08:	d020      	beq.n	8000e4c <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	2220      	movs	r2, #32
 8000e12:	4013      	ands	r3, r2
 8000e14:	d107      	bne.n	8000e26 <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	681a      	ldr	r2, [r3, #0]
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	2104      	movs	r1, #4
 8000e22:	438a      	bics	r2, r1
 8000e24:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e2e:	2104      	movs	r1, #4
 8000e30:	4091      	lsls	r1, r2
 8000e32:	000a      	movs	r2, r1
 8000e34:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d100      	bne.n	8000e40 <HAL_DMA_IRQHandler+0x66>
 8000e3e:	e06a      	b.n	8000f16 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e44:	687a      	ldr	r2, [r7, #4]
 8000e46:	0010      	movs	r0, r2
 8000e48:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8000e4a:	e064      	b.n	8000f16 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e50:	2202      	movs	r2, #2
 8000e52:	409a      	lsls	r2, r3
 8000e54:	0013      	movs	r3, r2
 8000e56:	68fa      	ldr	r2, [r7, #12]
 8000e58:	4013      	ands	r3, r2
 8000e5a:	d02b      	beq.n	8000eb4 <HAL_DMA_IRQHandler+0xda>
 8000e5c:	68bb      	ldr	r3, [r7, #8]
 8000e5e:	2202      	movs	r2, #2
 8000e60:	4013      	ands	r3, r2
 8000e62:	d027      	beq.n	8000eb4 <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	2220      	movs	r2, #32
 8000e6c:	4013      	ands	r3, r2
 8000e6e:	d10b      	bne.n	8000e88 <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	681a      	ldr	r2, [r3, #0]
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	210a      	movs	r1, #10
 8000e7c:	438a      	bics	r2, r1
 8000e7e:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	2221      	movs	r2, #33	; 0x21
 8000e84:	2101      	movs	r1, #1
 8000e86:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e90:	2102      	movs	r1, #2
 8000e92:	4091      	lsls	r1, r2
 8000e94:	000a      	movs	r2, r1
 8000e96:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	2220      	movs	r2, #32
 8000e9c:	2100      	movs	r1, #0
 8000e9e:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d036      	beq.n	8000f16 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000eac:	687a      	ldr	r2, [r7, #4]
 8000eae:	0010      	movs	r0, r2
 8000eb0:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8000eb2:	e030      	b.n	8000f16 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb8:	2208      	movs	r2, #8
 8000eba:	409a      	lsls	r2, r3
 8000ebc:	0013      	movs	r3, r2
 8000ebe:	68fa      	ldr	r2, [r7, #12]
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	d028      	beq.n	8000f16 <HAL_DMA_IRQHandler+0x13c>
 8000ec4:	68bb      	ldr	r3, [r7, #8]
 8000ec6:	2208      	movs	r2, #8
 8000ec8:	4013      	ands	r3, r2
 8000eca:	d024      	beq.n	8000f16 <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	681a      	ldr	r2, [r3, #0]
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	210e      	movs	r1, #14
 8000ed8:	438a      	bics	r2, r1
 8000eda:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ee4:	2101      	movs	r1, #1
 8000ee6:	4091      	lsls	r1, r2
 8000ee8:	000a      	movs	r2, r1
 8000eea:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	2201      	movs	r2, #1
 8000ef0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	2221      	movs	r2, #33	; 0x21
 8000ef6:	2101      	movs	r1, #1
 8000ef8:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	2220      	movs	r2, #32
 8000efe:	2100      	movs	r1, #0
 8000f00:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d005      	beq.n	8000f16 <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0e:	687a      	ldr	r2, [r7, #4]
 8000f10:	0010      	movs	r0, r2
 8000f12:	4798      	blx	r3
    }
   }
}  
 8000f14:	e7ff      	b.n	8000f16 <HAL_DMA_IRQHandler+0x13c>
 8000f16:	46c0      	nop			; (mov r8, r8)
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	b004      	add	sp, #16
 8000f1c:	bd80      	pop	{r7, pc}

08000f1e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000f1e:	b580      	push	{r7, lr}
 8000f20:	b084      	sub	sp, #16
 8000f22:	af00      	add	r7, sp, #0
 8000f24:	60f8      	str	r0, [r7, #12]
 8000f26:	60b9      	str	r1, [r7, #8]
 8000f28:	607a      	str	r2, [r7, #4]
 8000f2a:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f34:	2101      	movs	r1, #1
 8000f36:	4091      	lsls	r1, r2
 8000f38:	000a      	movs	r2, r1
 8000f3a:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	683a      	ldr	r2, [r7, #0]
 8000f42:	605a      	str	r2, [r3, #4]
  
  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	2b10      	cmp	r3, #16
 8000f4a:	d108      	bne.n	8000f5e <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	687a      	ldr	r2, [r7, #4]
 8000f52:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	68ba      	ldr	r2, [r7, #8]
 8000f5a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8000f5c:	e007      	b.n	8000f6e <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	68ba      	ldr	r2, [r7, #8]
 8000f64:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	687a      	ldr	r2, [r7, #4]
 8000f6c:	60da      	str	r2, [r3, #12]
}
 8000f6e:	46c0      	nop			; (mov r8, r8)
 8000f70:	46bd      	mov	sp, r7
 8000f72:	b004      	add	sp, #16
 8000f74:	bd80      	pop	{r7, pc}
	...

08000f78 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4a08      	ldr	r2, [pc, #32]	; (8000fa8 <DMA_CalcBaseAndBitshift+0x30>)
 8000f86:	4694      	mov	ip, r2
 8000f88:	4463      	add	r3, ip
 8000f8a:	2114      	movs	r1, #20
 8000f8c:	0018      	movs	r0, r3
 8000f8e:	f7ff f8bb 	bl	8000108 <__udivsi3>
 8000f92:	0003      	movs	r3, r0
 8000f94:	009a      	lsls	r2, r3, #2
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	4a03      	ldr	r2, [pc, #12]	; (8000fac <DMA_CalcBaseAndBitshift+0x34>)
 8000f9e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8000fa0:	46c0      	nop			; (mov r8, r8)
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	b002      	add	sp, #8
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	bffdfff8 	.word	0xbffdfff8
 8000fac:	40020000 	.word	0x40020000

08000fb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b086      	sub	sp, #24
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
 8000fb8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fbe:	e149      	b.n	8001254 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	2101      	movs	r1, #1
 8000fc6:	697a      	ldr	r2, [r7, #20]
 8000fc8:	4091      	lsls	r1, r2
 8000fca:	000a      	movs	r2, r1
 8000fcc:	4013      	ands	r3, r2
 8000fce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d100      	bne.n	8000fd8 <HAL_GPIO_Init+0x28>
 8000fd6:	e13a      	b.n	800124e <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	2203      	movs	r2, #3
 8000fde:	4013      	ands	r3, r2
 8000fe0:	2b01      	cmp	r3, #1
 8000fe2:	d005      	beq.n	8000ff0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	2203      	movs	r2, #3
 8000fea:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000fec:	2b02      	cmp	r3, #2
 8000fee:	d130      	bne.n	8001052 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	689b      	ldr	r3, [r3, #8]
 8000ff4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000ff6:	697b      	ldr	r3, [r7, #20]
 8000ff8:	005b      	lsls	r3, r3, #1
 8000ffa:	2203      	movs	r2, #3
 8000ffc:	409a      	lsls	r2, r3
 8000ffe:	0013      	movs	r3, r2
 8001000:	43da      	mvns	r2, r3
 8001002:	693b      	ldr	r3, [r7, #16]
 8001004:	4013      	ands	r3, r2
 8001006:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	68da      	ldr	r2, [r3, #12]
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	005b      	lsls	r3, r3, #1
 8001010:	409a      	lsls	r2, r3
 8001012:	0013      	movs	r3, r2
 8001014:	693a      	ldr	r2, [r7, #16]
 8001016:	4313      	orrs	r3, r2
 8001018:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	693a      	ldr	r2, [r7, #16]
 800101e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001026:	2201      	movs	r2, #1
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	409a      	lsls	r2, r3
 800102c:	0013      	movs	r3, r2
 800102e:	43da      	mvns	r2, r3
 8001030:	693b      	ldr	r3, [r7, #16]
 8001032:	4013      	ands	r3, r2
 8001034:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	091b      	lsrs	r3, r3, #4
 800103c:	2201      	movs	r2, #1
 800103e:	401a      	ands	r2, r3
 8001040:	697b      	ldr	r3, [r7, #20]
 8001042:	409a      	lsls	r2, r3
 8001044:	0013      	movs	r3, r2
 8001046:	693a      	ldr	r2, [r7, #16]
 8001048:	4313      	orrs	r3, r2
 800104a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	693a      	ldr	r2, [r7, #16]
 8001050:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	685b      	ldr	r3, [r3, #4]
 8001056:	2203      	movs	r2, #3
 8001058:	4013      	ands	r3, r2
 800105a:	2b03      	cmp	r3, #3
 800105c:	d017      	beq.n	800108e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	68db      	ldr	r3, [r3, #12]
 8001062:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	005b      	lsls	r3, r3, #1
 8001068:	2203      	movs	r2, #3
 800106a:	409a      	lsls	r2, r3
 800106c:	0013      	movs	r3, r2
 800106e:	43da      	mvns	r2, r3
 8001070:	693b      	ldr	r3, [r7, #16]
 8001072:	4013      	ands	r3, r2
 8001074:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	689a      	ldr	r2, [r3, #8]
 800107a:	697b      	ldr	r3, [r7, #20]
 800107c:	005b      	lsls	r3, r3, #1
 800107e:	409a      	lsls	r2, r3
 8001080:	0013      	movs	r3, r2
 8001082:	693a      	ldr	r2, [r7, #16]
 8001084:	4313      	orrs	r3, r2
 8001086:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	693a      	ldr	r2, [r7, #16]
 800108c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	2203      	movs	r2, #3
 8001094:	4013      	ands	r3, r2
 8001096:	2b02      	cmp	r3, #2
 8001098:	d123      	bne.n	80010e2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800109a:	697b      	ldr	r3, [r7, #20]
 800109c:	08da      	lsrs	r2, r3, #3
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	3208      	adds	r2, #8
 80010a2:	0092      	lsls	r2, r2, #2
 80010a4:	58d3      	ldr	r3, [r2, r3]
 80010a6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	2207      	movs	r2, #7
 80010ac:	4013      	ands	r3, r2
 80010ae:	009b      	lsls	r3, r3, #2
 80010b0:	220f      	movs	r2, #15
 80010b2:	409a      	lsls	r2, r3
 80010b4:	0013      	movs	r3, r2
 80010b6:	43da      	mvns	r2, r3
 80010b8:	693b      	ldr	r3, [r7, #16]
 80010ba:	4013      	ands	r3, r2
 80010bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	691a      	ldr	r2, [r3, #16]
 80010c2:	697b      	ldr	r3, [r7, #20]
 80010c4:	2107      	movs	r1, #7
 80010c6:	400b      	ands	r3, r1
 80010c8:	009b      	lsls	r3, r3, #2
 80010ca:	409a      	lsls	r2, r3
 80010cc:	0013      	movs	r3, r2
 80010ce:	693a      	ldr	r2, [r7, #16]
 80010d0:	4313      	orrs	r3, r2
 80010d2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80010d4:	697b      	ldr	r3, [r7, #20]
 80010d6:	08da      	lsrs	r2, r3, #3
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	3208      	adds	r2, #8
 80010dc:	0092      	lsls	r2, r2, #2
 80010de:	6939      	ldr	r1, [r7, #16]
 80010e0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	005b      	lsls	r3, r3, #1
 80010ec:	2203      	movs	r2, #3
 80010ee:	409a      	lsls	r2, r3
 80010f0:	0013      	movs	r3, r2
 80010f2:	43da      	mvns	r2, r3
 80010f4:	693b      	ldr	r3, [r7, #16]
 80010f6:	4013      	ands	r3, r2
 80010f8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	2203      	movs	r2, #3
 8001100:	401a      	ands	r2, r3
 8001102:	697b      	ldr	r3, [r7, #20]
 8001104:	005b      	lsls	r3, r3, #1
 8001106:	409a      	lsls	r2, r3
 8001108:	0013      	movs	r3, r2
 800110a:	693a      	ldr	r2, [r7, #16]
 800110c:	4313      	orrs	r3, r2
 800110e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	693a      	ldr	r2, [r7, #16]
 8001114:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	685a      	ldr	r2, [r3, #4]
 800111a:	23c0      	movs	r3, #192	; 0xc0
 800111c:	029b      	lsls	r3, r3, #10
 800111e:	4013      	ands	r3, r2
 8001120:	d100      	bne.n	8001124 <HAL_GPIO_Init+0x174>
 8001122:	e094      	b.n	800124e <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001124:	4b51      	ldr	r3, [pc, #324]	; (800126c <HAL_GPIO_Init+0x2bc>)
 8001126:	699a      	ldr	r2, [r3, #24]
 8001128:	4b50      	ldr	r3, [pc, #320]	; (800126c <HAL_GPIO_Init+0x2bc>)
 800112a:	2101      	movs	r1, #1
 800112c:	430a      	orrs	r2, r1
 800112e:	619a      	str	r2, [r3, #24]
 8001130:	4b4e      	ldr	r3, [pc, #312]	; (800126c <HAL_GPIO_Init+0x2bc>)
 8001132:	699b      	ldr	r3, [r3, #24]
 8001134:	2201      	movs	r2, #1
 8001136:	4013      	ands	r3, r2
 8001138:	60bb      	str	r3, [r7, #8]
 800113a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800113c:	4a4c      	ldr	r2, [pc, #304]	; (8001270 <HAL_GPIO_Init+0x2c0>)
 800113e:	697b      	ldr	r3, [r7, #20]
 8001140:	089b      	lsrs	r3, r3, #2
 8001142:	3302      	adds	r3, #2
 8001144:	009b      	lsls	r3, r3, #2
 8001146:	589b      	ldr	r3, [r3, r2]
 8001148:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800114a:	697b      	ldr	r3, [r7, #20]
 800114c:	2203      	movs	r2, #3
 800114e:	4013      	ands	r3, r2
 8001150:	009b      	lsls	r3, r3, #2
 8001152:	220f      	movs	r2, #15
 8001154:	409a      	lsls	r2, r3
 8001156:	0013      	movs	r3, r2
 8001158:	43da      	mvns	r2, r3
 800115a:	693b      	ldr	r3, [r7, #16]
 800115c:	4013      	ands	r3, r2
 800115e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001160:	687a      	ldr	r2, [r7, #4]
 8001162:	2390      	movs	r3, #144	; 0x90
 8001164:	05db      	lsls	r3, r3, #23
 8001166:	429a      	cmp	r2, r3
 8001168:	d00d      	beq.n	8001186 <HAL_GPIO_Init+0x1d6>
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	4a41      	ldr	r2, [pc, #260]	; (8001274 <HAL_GPIO_Init+0x2c4>)
 800116e:	4293      	cmp	r3, r2
 8001170:	d007      	beq.n	8001182 <HAL_GPIO_Init+0x1d2>
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	4a40      	ldr	r2, [pc, #256]	; (8001278 <HAL_GPIO_Init+0x2c8>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d101      	bne.n	800117e <HAL_GPIO_Init+0x1ce>
 800117a:	2302      	movs	r3, #2
 800117c:	e004      	b.n	8001188 <HAL_GPIO_Init+0x1d8>
 800117e:	2305      	movs	r3, #5
 8001180:	e002      	b.n	8001188 <HAL_GPIO_Init+0x1d8>
 8001182:	2301      	movs	r3, #1
 8001184:	e000      	b.n	8001188 <HAL_GPIO_Init+0x1d8>
 8001186:	2300      	movs	r3, #0
 8001188:	697a      	ldr	r2, [r7, #20]
 800118a:	2103      	movs	r1, #3
 800118c:	400a      	ands	r2, r1
 800118e:	0092      	lsls	r2, r2, #2
 8001190:	4093      	lsls	r3, r2
 8001192:	693a      	ldr	r2, [r7, #16]
 8001194:	4313      	orrs	r3, r2
 8001196:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001198:	4935      	ldr	r1, [pc, #212]	; (8001270 <HAL_GPIO_Init+0x2c0>)
 800119a:	697b      	ldr	r3, [r7, #20]
 800119c:	089b      	lsrs	r3, r3, #2
 800119e:	3302      	adds	r3, #2
 80011a0:	009b      	lsls	r3, r3, #2
 80011a2:	693a      	ldr	r2, [r7, #16]
 80011a4:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011a6:	4b35      	ldr	r3, [pc, #212]	; (800127c <HAL_GPIO_Init+0x2cc>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	43da      	mvns	r2, r3
 80011b0:	693b      	ldr	r3, [r7, #16]
 80011b2:	4013      	ands	r3, r2
 80011b4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	685a      	ldr	r2, [r3, #4]
 80011ba:	2380      	movs	r3, #128	; 0x80
 80011bc:	025b      	lsls	r3, r3, #9
 80011be:	4013      	ands	r3, r2
 80011c0:	d003      	beq.n	80011ca <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 80011c2:	693a      	ldr	r2, [r7, #16]
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	4313      	orrs	r3, r2
 80011c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80011ca:	4b2c      	ldr	r3, [pc, #176]	; (800127c <HAL_GPIO_Init+0x2cc>)
 80011cc:	693a      	ldr	r2, [r7, #16]
 80011ce:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80011d0:	4b2a      	ldr	r3, [pc, #168]	; (800127c <HAL_GPIO_Init+0x2cc>)
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	43da      	mvns	r2, r3
 80011da:	693b      	ldr	r3, [r7, #16]
 80011dc:	4013      	ands	r3, r2
 80011de:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	685a      	ldr	r2, [r3, #4]
 80011e4:	2380      	movs	r3, #128	; 0x80
 80011e6:	029b      	lsls	r3, r3, #10
 80011e8:	4013      	ands	r3, r2
 80011ea:	d003      	beq.n	80011f4 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 80011ec:	693a      	ldr	r2, [r7, #16]
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	4313      	orrs	r3, r2
 80011f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80011f4:	4b21      	ldr	r3, [pc, #132]	; (800127c <HAL_GPIO_Init+0x2cc>)
 80011f6:	693a      	ldr	r2, [r7, #16]
 80011f8:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011fa:	4b20      	ldr	r3, [pc, #128]	; (800127c <HAL_GPIO_Init+0x2cc>)
 80011fc:	689b      	ldr	r3, [r3, #8]
 80011fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	43da      	mvns	r2, r3
 8001204:	693b      	ldr	r3, [r7, #16]
 8001206:	4013      	ands	r3, r2
 8001208:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	685a      	ldr	r2, [r3, #4]
 800120e:	2380      	movs	r3, #128	; 0x80
 8001210:	035b      	lsls	r3, r3, #13
 8001212:	4013      	ands	r3, r2
 8001214:	d003      	beq.n	800121e <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8001216:	693a      	ldr	r2, [r7, #16]
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	4313      	orrs	r3, r2
 800121c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800121e:	4b17      	ldr	r3, [pc, #92]	; (800127c <HAL_GPIO_Init+0x2cc>)
 8001220:	693a      	ldr	r2, [r7, #16]
 8001222:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001224:	4b15      	ldr	r3, [pc, #84]	; (800127c <HAL_GPIO_Init+0x2cc>)
 8001226:	68db      	ldr	r3, [r3, #12]
 8001228:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	43da      	mvns	r2, r3
 800122e:	693b      	ldr	r3, [r7, #16]
 8001230:	4013      	ands	r3, r2
 8001232:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	685a      	ldr	r2, [r3, #4]
 8001238:	2380      	movs	r3, #128	; 0x80
 800123a:	039b      	lsls	r3, r3, #14
 800123c:	4013      	ands	r3, r2
 800123e:	d003      	beq.n	8001248 <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 8001240:	693a      	ldr	r2, [r7, #16]
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	4313      	orrs	r3, r2
 8001246:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001248:	4b0c      	ldr	r3, [pc, #48]	; (800127c <HAL_GPIO_Init+0x2cc>)
 800124a:	693a      	ldr	r2, [r7, #16]
 800124c:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 800124e:	697b      	ldr	r3, [r7, #20]
 8001250:	3301      	adds	r3, #1
 8001252:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	681a      	ldr	r2, [r3, #0]
 8001258:	697b      	ldr	r3, [r7, #20]
 800125a:	40da      	lsrs	r2, r3
 800125c:	1e13      	subs	r3, r2, #0
 800125e:	d000      	beq.n	8001262 <HAL_GPIO_Init+0x2b2>
 8001260:	e6ae      	b.n	8000fc0 <HAL_GPIO_Init+0x10>
  } 
}
 8001262:	46c0      	nop			; (mov r8, r8)
 8001264:	46c0      	nop			; (mov r8, r8)
 8001266:	46bd      	mov	sp, r7
 8001268:	b006      	add	sp, #24
 800126a:	bd80      	pop	{r7, pc}
 800126c:	40021000 	.word	0x40021000
 8001270:	40010000 	.word	0x40010000
 8001274:	48000400 	.word	0x48000400
 8001278:	48000800 	.word	0x48000800
 800127c:	40010400 	.word	0x40010400

08001280 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
 8001288:	0008      	movs	r0, r1
 800128a:	0011      	movs	r1, r2
 800128c:	1cbb      	adds	r3, r7, #2
 800128e:	1c02      	adds	r2, r0, #0
 8001290:	801a      	strh	r2, [r3, #0]
 8001292:	1c7b      	adds	r3, r7, #1
 8001294:	1c0a      	adds	r2, r1, #0
 8001296:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001298:	1c7b      	adds	r3, r7, #1
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d004      	beq.n	80012aa <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80012a0:	1cbb      	adds	r3, r7, #2
 80012a2:	881a      	ldrh	r2, [r3, #0]
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80012a8:	e003      	b.n	80012b2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80012aa:	1cbb      	adds	r3, r7, #2
 80012ac:	881a      	ldrh	r2, [r3, #0]
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	629a      	str	r2, [r3, #40]	; 0x28
}
 80012b2:	46c0      	nop			; (mov r8, r8)
 80012b4:	46bd      	mov	sp, r7
 80012b6:	b002      	add	sp, #8
 80012b8:	bd80      	pop	{r7, pc}
	...

080012bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b088      	sub	sp, #32
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d102      	bne.n	80012d0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80012ca:	2301      	movs	r3, #1
 80012cc:	f000 fb76 	bl	80019bc <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	2201      	movs	r2, #1
 80012d6:	4013      	ands	r3, r2
 80012d8:	d100      	bne.n	80012dc <HAL_RCC_OscConfig+0x20>
 80012da:	e08e      	b.n	80013fa <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80012dc:	4bc5      	ldr	r3, [pc, #788]	; (80015f4 <HAL_RCC_OscConfig+0x338>)
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	220c      	movs	r2, #12
 80012e2:	4013      	ands	r3, r2
 80012e4:	2b04      	cmp	r3, #4
 80012e6:	d00e      	beq.n	8001306 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80012e8:	4bc2      	ldr	r3, [pc, #776]	; (80015f4 <HAL_RCC_OscConfig+0x338>)
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	220c      	movs	r2, #12
 80012ee:	4013      	ands	r3, r2
 80012f0:	2b08      	cmp	r3, #8
 80012f2:	d117      	bne.n	8001324 <HAL_RCC_OscConfig+0x68>
 80012f4:	4bbf      	ldr	r3, [pc, #764]	; (80015f4 <HAL_RCC_OscConfig+0x338>)
 80012f6:	685a      	ldr	r2, [r3, #4]
 80012f8:	23c0      	movs	r3, #192	; 0xc0
 80012fa:	025b      	lsls	r3, r3, #9
 80012fc:	401a      	ands	r2, r3
 80012fe:	2380      	movs	r3, #128	; 0x80
 8001300:	025b      	lsls	r3, r3, #9
 8001302:	429a      	cmp	r2, r3
 8001304:	d10e      	bne.n	8001324 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001306:	4bbb      	ldr	r3, [pc, #748]	; (80015f4 <HAL_RCC_OscConfig+0x338>)
 8001308:	681a      	ldr	r2, [r3, #0]
 800130a:	2380      	movs	r3, #128	; 0x80
 800130c:	029b      	lsls	r3, r3, #10
 800130e:	4013      	ands	r3, r2
 8001310:	d100      	bne.n	8001314 <HAL_RCC_OscConfig+0x58>
 8001312:	e071      	b.n	80013f8 <HAL_RCC_OscConfig+0x13c>
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d000      	beq.n	800131e <HAL_RCC_OscConfig+0x62>
 800131c:	e06c      	b.n	80013f8 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 800131e:	2301      	movs	r3, #1
 8001320:	f000 fb4c 	bl	80019bc <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	2b01      	cmp	r3, #1
 800132a:	d107      	bne.n	800133c <HAL_RCC_OscConfig+0x80>
 800132c:	4bb1      	ldr	r3, [pc, #708]	; (80015f4 <HAL_RCC_OscConfig+0x338>)
 800132e:	681a      	ldr	r2, [r3, #0]
 8001330:	4bb0      	ldr	r3, [pc, #704]	; (80015f4 <HAL_RCC_OscConfig+0x338>)
 8001332:	2180      	movs	r1, #128	; 0x80
 8001334:	0249      	lsls	r1, r1, #9
 8001336:	430a      	orrs	r2, r1
 8001338:	601a      	str	r2, [r3, #0]
 800133a:	e02f      	b.n	800139c <HAL_RCC_OscConfig+0xe0>
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d10c      	bne.n	800135e <HAL_RCC_OscConfig+0xa2>
 8001344:	4bab      	ldr	r3, [pc, #684]	; (80015f4 <HAL_RCC_OscConfig+0x338>)
 8001346:	681a      	ldr	r2, [r3, #0]
 8001348:	4baa      	ldr	r3, [pc, #680]	; (80015f4 <HAL_RCC_OscConfig+0x338>)
 800134a:	49ab      	ldr	r1, [pc, #684]	; (80015f8 <HAL_RCC_OscConfig+0x33c>)
 800134c:	400a      	ands	r2, r1
 800134e:	601a      	str	r2, [r3, #0]
 8001350:	4ba8      	ldr	r3, [pc, #672]	; (80015f4 <HAL_RCC_OscConfig+0x338>)
 8001352:	681a      	ldr	r2, [r3, #0]
 8001354:	4ba7      	ldr	r3, [pc, #668]	; (80015f4 <HAL_RCC_OscConfig+0x338>)
 8001356:	49a9      	ldr	r1, [pc, #676]	; (80015fc <HAL_RCC_OscConfig+0x340>)
 8001358:	400a      	ands	r2, r1
 800135a:	601a      	str	r2, [r3, #0]
 800135c:	e01e      	b.n	800139c <HAL_RCC_OscConfig+0xe0>
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	2b05      	cmp	r3, #5
 8001364:	d10e      	bne.n	8001384 <HAL_RCC_OscConfig+0xc8>
 8001366:	4ba3      	ldr	r3, [pc, #652]	; (80015f4 <HAL_RCC_OscConfig+0x338>)
 8001368:	681a      	ldr	r2, [r3, #0]
 800136a:	4ba2      	ldr	r3, [pc, #648]	; (80015f4 <HAL_RCC_OscConfig+0x338>)
 800136c:	2180      	movs	r1, #128	; 0x80
 800136e:	02c9      	lsls	r1, r1, #11
 8001370:	430a      	orrs	r2, r1
 8001372:	601a      	str	r2, [r3, #0]
 8001374:	4b9f      	ldr	r3, [pc, #636]	; (80015f4 <HAL_RCC_OscConfig+0x338>)
 8001376:	681a      	ldr	r2, [r3, #0]
 8001378:	4b9e      	ldr	r3, [pc, #632]	; (80015f4 <HAL_RCC_OscConfig+0x338>)
 800137a:	2180      	movs	r1, #128	; 0x80
 800137c:	0249      	lsls	r1, r1, #9
 800137e:	430a      	orrs	r2, r1
 8001380:	601a      	str	r2, [r3, #0]
 8001382:	e00b      	b.n	800139c <HAL_RCC_OscConfig+0xe0>
 8001384:	4b9b      	ldr	r3, [pc, #620]	; (80015f4 <HAL_RCC_OscConfig+0x338>)
 8001386:	681a      	ldr	r2, [r3, #0]
 8001388:	4b9a      	ldr	r3, [pc, #616]	; (80015f4 <HAL_RCC_OscConfig+0x338>)
 800138a:	499b      	ldr	r1, [pc, #620]	; (80015f8 <HAL_RCC_OscConfig+0x33c>)
 800138c:	400a      	ands	r2, r1
 800138e:	601a      	str	r2, [r3, #0]
 8001390:	4b98      	ldr	r3, [pc, #608]	; (80015f4 <HAL_RCC_OscConfig+0x338>)
 8001392:	681a      	ldr	r2, [r3, #0]
 8001394:	4b97      	ldr	r3, [pc, #604]	; (80015f4 <HAL_RCC_OscConfig+0x338>)
 8001396:	4999      	ldr	r1, [pc, #612]	; (80015fc <HAL_RCC_OscConfig+0x340>)
 8001398:	400a      	ands	r2, r1
 800139a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d014      	beq.n	80013ce <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013a4:	f7ff fae2 	bl	800096c <HAL_GetTick>
 80013a8:	0003      	movs	r3, r0
 80013aa:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013ac:	e008      	b.n	80013c0 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013ae:	f7ff fadd 	bl	800096c <HAL_GetTick>
 80013b2:	0002      	movs	r2, r0
 80013b4:	69bb      	ldr	r3, [r7, #24]
 80013b6:	1ad3      	subs	r3, r2, r3
 80013b8:	2b64      	cmp	r3, #100	; 0x64
 80013ba:	d901      	bls.n	80013c0 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 80013bc:	2303      	movs	r3, #3
 80013be:	e2fd      	b.n	80019bc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013c0:	4b8c      	ldr	r3, [pc, #560]	; (80015f4 <HAL_RCC_OscConfig+0x338>)
 80013c2:	681a      	ldr	r2, [r3, #0]
 80013c4:	2380      	movs	r3, #128	; 0x80
 80013c6:	029b      	lsls	r3, r3, #10
 80013c8:	4013      	ands	r3, r2
 80013ca:	d0f0      	beq.n	80013ae <HAL_RCC_OscConfig+0xf2>
 80013cc:	e015      	b.n	80013fa <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013ce:	f7ff facd 	bl	800096c <HAL_GetTick>
 80013d2:	0003      	movs	r3, r0
 80013d4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013d6:	e008      	b.n	80013ea <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013d8:	f7ff fac8 	bl	800096c <HAL_GetTick>
 80013dc:	0002      	movs	r2, r0
 80013de:	69bb      	ldr	r3, [r7, #24]
 80013e0:	1ad3      	subs	r3, r2, r3
 80013e2:	2b64      	cmp	r3, #100	; 0x64
 80013e4:	d901      	bls.n	80013ea <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 80013e6:	2303      	movs	r3, #3
 80013e8:	e2e8      	b.n	80019bc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013ea:	4b82      	ldr	r3, [pc, #520]	; (80015f4 <HAL_RCC_OscConfig+0x338>)
 80013ec:	681a      	ldr	r2, [r3, #0]
 80013ee:	2380      	movs	r3, #128	; 0x80
 80013f0:	029b      	lsls	r3, r3, #10
 80013f2:	4013      	ands	r3, r2
 80013f4:	d1f0      	bne.n	80013d8 <HAL_RCC_OscConfig+0x11c>
 80013f6:	e000      	b.n	80013fa <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013f8:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	2202      	movs	r2, #2
 8001400:	4013      	ands	r3, r2
 8001402:	d100      	bne.n	8001406 <HAL_RCC_OscConfig+0x14a>
 8001404:	e06c      	b.n	80014e0 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001406:	4b7b      	ldr	r3, [pc, #492]	; (80015f4 <HAL_RCC_OscConfig+0x338>)
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	220c      	movs	r2, #12
 800140c:	4013      	ands	r3, r2
 800140e:	d00e      	beq.n	800142e <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001410:	4b78      	ldr	r3, [pc, #480]	; (80015f4 <HAL_RCC_OscConfig+0x338>)
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	220c      	movs	r2, #12
 8001416:	4013      	ands	r3, r2
 8001418:	2b08      	cmp	r3, #8
 800141a:	d11f      	bne.n	800145c <HAL_RCC_OscConfig+0x1a0>
 800141c:	4b75      	ldr	r3, [pc, #468]	; (80015f4 <HAL_RCC_OscConfig+0x338>)
 800141e:	685a      	ldr	r2, [r3, #4]
 8001420:	23c0      	movs	r3, #192	; 0xc0
 8001422:	025b      	lsls	r3, r3, #9
 8001424:	401a      	ands	r2, r3
 8001426:	2380      	movs	r3, #128	; 0x80
 8001428:	021b      	lsls	r3, r3, #8
 800142a:	429a      	cmp	r2, r3
 800142c:	d116      	bne.n	800145c <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800142e:	4b71      	ldr	r3, [pc, #452]	; (80015f4 <HAL_RCC_OscConfig+0x338>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	2202      	movs	r2, #2
 8001434:	4013      	ands	r3, r2
 8001436:	d005      	beq.n	8001444 <HAL_RCC_OscConfig+0x188>
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	68db      	ldr	r3, [r3, #12]
 800143c:	2b01      	cmp	r3, #1
 800143e:	d001      	beq.n	8001444 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001440:	2301      	movs	r3, #1
 8001442:	e2bb      	b.n	80019bc <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001444:	4b6b      	ldr	r3, [pc, #428]	; (80015f4 <HAL_RCC_OscConfig+0x338>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	22f8      	movs	r2, #248	; 0xf8
 800144a:	4393      	bics	r3, r2
 800144c:	0019      	movs	r1, r3
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	691b      	ldr	r3, [r3, #16]
 8001452:	00da      	lsls	r2, r3, #3
 8001454:	4b67      	ldr	r3, [pc, #412]	; (80015f4 <HAL_RCC_OscConfig+0x338>)
 8001456:	430a      	orrs	r2, r1
 8001458:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800145a:	e041      	b.n	80014e0 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	68db      	ldr	r3, [r3, #12]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d024      	beq.n	80014ae <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001464:	4b63      	ldr	r3, [pc, #396]	; (80015f4 <HAL_RCC_OscConfig+0x338>)
 8001466:	681a      	ldr	r2, [r3, #0]
 8001468:	4b62      	ldr	r3, [pc, #392]	; (80015f4 <HAL_RCC_OscConfig+0x338>)
 800146a:	2101      	movs	r1, #1
 800146c:	430a      	orrs	r2, r1
 800146e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001470:	f7ff fa7c 	bl	800096c <HAL_GetTick>
 8001474:	0003      	movs	r3, r0
 8001476:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001478:	e008      	b.n	800148c <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800147a:	f7ff fa77 	bl	800096c <HAL_GetTick>
 800147e:	0002      	movs	r2, r0
 8001480:	69bb      	ldr	r3, [r7, #24]
 8001482:	1ad3      	subs	r3, r2, r3
 8001484:	2b02      	cmp	r3, #2
 8001486:	d901      	bls.n	800148c <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001488:	2303      	movs	r3, #3
 800148a:	e297      	b.n	80019bc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800148c:	4b59      	ldr	r3, [pc, #356]	; (80015f4 <HAL_RCC_OscConfig+0x338>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	2202      	movs	r2, #2
 8001492:	4013      	ands	r3, r2
 8001494:	d0f1      	beq.n	800147a <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001496:	4b57      	ldr	r3, [pc, #348]	; (80015f4 <HAL_RCC_OscConfig+0x338>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	22f8      	movs	r2, #248	; 0xf8
 800149c:	4393      	bics	r3, r2
 800149e:	0019      	movs	r1, r3
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	691b      	ldr	r3, [r3, #16]
 80014a4:	00da      	lsls	r2, r3, #3
 80014a6:	4b53      	ldr	r3, [pc, #332]	; (80015f4 <HAL_RCC_OscConfig+0x338>)
 80014a8:	430a      	orrs	r2, r1
 80014aa:	601a      	str	r2, [r3, #0]
 80014ac:	e018      	b.n	80014e0 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014ae:	4b51      	ldr	r3, [pc, #324]	; (80015f4 <HAL_RCC_OscConfig+0x338>)
 80014b0:	681a      	ldr	r2, [r3, #0]
 80014b2:	4b50      	ldr	r3, [pc, #320]	; (80015f4 <HAL_RCC_OscConfig+0x338>)
 80014b4:	2101      	movs	r1, #1
 80014b6:	438a      	bics	r2, r1
 80014b8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014ba:	f7ff fa57 	bl	800096c <HAL_GetTick>
 80014be:	0003      	movs	r3, r0
 80014c0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014c2:	e008      	b.n	80014d6 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014c4:	f7ff fa52 	bl	800096c <HAL_GetTick>
 80014c8:	0002      	movs	r2, r0
 80014ca:	69bb      	ldr	r3, [r7, #24]
 80014cc:	1ad3      	subs	r3, r2, r3
 80014ce:	2b02      	cmp	r3, #2
 80014d0:	d901      	bls.n	80014d6 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 80014d2:	2303      	movs	r3, #3
 80014d4:	e272      	b.n	80019bc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014d6:	4b47      	ldr	r3, [pc, #284]	; (80015f4 <HAL_RCC_OscConfig+0x338>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	2202      	movs	r2, #2
 80014dc:	4013      	ands	r3, r2
 80014de:	d1f1      	bne.n	80014c4 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	2208      	movs	r2, #8
 80014e6:	4013      	ands	r3, r2
 80014e8:	d036      	beq.n	8001558 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	69db      	ldr	r3, [r3, #28]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d019      	beq.n	8001526 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014f2:	4b40      	ldr	r3, [pc, #256]	; (80015f4 <HAL_RCC_OscConfig+0x338>)
 80014f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80014f6:	4b3f      	ldr	r3, [pc, #252]	; (80015f4 <HAL_RCC_OscConfig+0x338>)
 80014f8:	2101      	movs	r1, #1
 80014fa:	430a      	orrs	r2, r1
 80014fc:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014fe:	f7ff fa35 	bl	800096c <HAL_GetTick>
 8001502:	0003      	movs	r3, r0
 8001504:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001506:	e008      	b.n	800151a <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001508:	f7ff fa30 	bl	800096c <HAL_GetTick>
 800150c:	0002      	movs	r2, r0
 800150e:	69bb      	ldr	r3, [r7, #24]
 8001510:	1ad3      	subs	r3, r2, r3
 8001512:	2b02      	cmp	r3, #2
 8001514:	d901      	bls.n	800151a <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8001516:	2303      	movs	r3, #3
 8001518:	e250      	b.n	80019bc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800151a:	4b36      	ldr	r3, [pc, #216]	; (80015f4 <HAL_RCC_OscConfig+0x338>)
 800151c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800151e:	2202      	movs	r2, #2
 8001520:	4013      	ands	r3, r2
 8001522:	d0f1      	beq.n	8001508 <HAL_RCC_OscConfig+0x24c>
 8001524:	e018      	b.n	8001558 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001526:	4b33      	ldr	r3, [pc, #204]	; (80015f4 <HAL_RCC_OscConfig+0x338>)
 8001528:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800152a:	4b32      	ldr	r3, [pc, #200]	; (80015f4 <HAL_RCC_OscConfig+0x338>)
 800152c:	2101      	movs	r1, #1
 800152e:	438a      	bics	r2, r1
 8001530:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001532:	f7ff fa1b 	bl	800096c <HAL_GetTick>
 8001536:	0003      	movs	r3, r0
 8001538:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800153a:	e008      	b.n	800154e <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800153c:	f7ff fa16 	bl	800096c <HAL_GetTick>
 8001540:	0002      	movs	r2, r0
 8001542:	69bb      	ldr	r3, [r7, #24]
 8001544:	1ad3      	subs	r3, r2, r3
 8001546:	2b02      	cmp	r3, #2
 8001548:	d901      	bls.n	800154e <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 800154a:	2303      	movs	r3, #3
 800154c:	e236      	b.n	80019bc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800154e:	4b29      	ldr	r3, [pc, #164]	; (80015f4 <HAL_RCC_OscConfig+0x338>)
 8001550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001552:	2202      	movs	r2, #2
 8001554:	4013      	ands	r3, r2
 8001556:	d1f1      	bne.n	800153c <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	2204      	movs	r2, #4
 800155e:	4013      	ands	r3, r2
 8001560:	d100      	bne.n	8001564 <HAL_RCC_OscConfig+0x2a8>
 8001562:	e0b5      	b.n	80016d0 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001564:	201f      	movs	r0, #31
 8001566:	183b      	adds	r3, r7, r0
 8001568:	2200      	movs	r2, #0
 800156a:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800156c:	4b21      	ldr	r3, [pc, #132]	; (80015f4 <HAL_RCC_OscConfig+0x338>)
 800156e:	69da      	ldr	r2, [r3, #28]
 8001570:	2380      	movs	r3, #128	; 0x80
 8001572:	055b      	lsls	r3, r3, #21
 8001574:	4013      	ands	r3, r2
 8001576:	d110      	bne.n	800159a <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001578:	4b1e      	ldr	r3, [pc, #120]	; (80015f4 <HAL_RCC_OscConfig+0x338>)
 800157a:	69da      	ldr	r2, [r3, #28]
 800157c:	4b1d      	ldr	r3, [pc, #116]	; (80015f4 <HAL_RCC_OscConfig+0x338>)
 800157e:	2180      	movs	r1, #128	; 0x80
 8001580:	0549      	lsls	r1, r1, #21
 8001582:	430a      	orrs	r2, r1
 8001584:	61da      	str	r2, [r3, #28]
 8001586:	4b1b      	ldr	r3, [pc, #108]	; (80015f4 <HAL_RCC_OscConfig+0x338>)
 8001588:	69da      	ldr	r2, [r3, #28]
 800158a:	2380      	movs	r3, #128	; 0x80
 800158c:	055b      	lsls	r3, r3, #21
 800158e:	4013      	ands	r3, r2
 8001590:	60fb      	str	r3, [r7, #12]
 8001592:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001594:	183b      	adds	r3, r7, r0
 8001596:	2201      	movs	r2, #1
 8001598:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800159a:	4b19      	ldr	r3, [pc, #100]	; (8001600 <HAL_RCC_OscConfig+0x344>)
 800159c:	681a      	ldr	r2, [r3, #0]
 800159e:	2380      	movs	r3, #128	; 0x80
 80015a0:	005b      	lsls	r3, r3, #1
 80015a2:	4013      	ands	r3, r2
 80015a4:	d11a      	bne.n	80015dc <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015a6:	4b16      	ldr	r3, [pc, #88]	; (8001600 <HAL_RCC_OscConfig+0x344>)
 80015a8:	681a      	ldr	r2, [r3, #0]
 80015aa:	4b15      	ldr	r3, [pc, #84]	; (8001600 <HAL_RCC_OscConfig+0x344>)
 80015ac:	2180      	movs	r1, #128	; 0x80
 80015ae:	0049      	lsls	r1, r1, #1
 80015b0:	430a      	orrs	r2, r1
 80015b2:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015b4:	f7ff f9da 	bl	800096c <HAL_GetTick>
 80015b8:	0003      	movs	r3, r0
 80015ba:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015bc:	e008      	b.n	80015d0 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015be:	f7ff f9d5 	bl	800096c <HAL_GetTick>
 80015c2:	0002      	movs	r2, r0
 80015c4:	69bb      	ldr	r3, [r7, #24]
 80015c6:	1ad3      	subs	r3, r2, r3
 80015c8:	2b64      	cmp	r3, #100	; 0x64
 80015ca:	d901      	bls.n	80015d0 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 80015cc:	2303      	movs	r3, #3
 80015ce:	e1f5      	b.n	80019bc <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015d0:	4b0b      	ldr	r3, [pc, #44]	; (8001600 <HAL_RCC_OscConfig+0x344>)
 80015d2:	681a      	ldr	r2, [r3, #0]
 80015d4:	2380      	movs	r3, #128	; 0x80
 80015d6:	005b      	lsls	r3, r3, #1
 80015d8:	4013      	ands	r3, r2
 80015da:	d0f0      	beq.n	80015be <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	689b      	ldr	r3, [r3, #8]
 80015e0:	2b01      	cmp	r3, #1
 80015e2:	d10f      	bne.n	8001604 <HAL_RCC_OscConfig+0x348>
 80015e4:	4b03      	ldr	r3, [pc, #12]	; (80015f4 <HAL_RCC_OscConfig+0x338>)
 80015e6:	6a1a      	ldr	r2, [r3, #32]
 80015e8:	4b02      	ldr	r3, [pc, #8]	; (80015f4 <HAL_RCC_OscConfig+0x338>)
 80015ea:	2101      	movs	r1, #1
 80015ec:	430a      	orrs	r2, r1
 80015ee:	621a      	str	r2, [r3, #32]
 80015f0:	e036      	b.n	8001660 <HAL_RCC_OscConfig+0x3a4>
 80015f2:	46c0      	nop			; (mov r8, r8)
 80015f4:	40021000 	.word	0x40021000
 80015f8:	fffeffff 	.word	0xfffeffff
 80015fc:	fffbffff 	.word	0xfffbffff
 8001600:	40007000 	.word	0x40007000
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	689b      	ldr	r3, [r3, #8]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d10c      	bne.n	8001626 <HAL_RCC_OscConfig+0x36a>
 800160c:	4bca      	ldr	r3, [pc, #808]	; (8001938 <HAL_RCC_OscConfig+0x67c>)
 800160e:	6a1a      	ldr	r2, [r3, #32]
 8001610:	4bc9      	ldr	r3, [pc, #804]	; (8001938 <HAL_RCC_OscConfig+0x67c>)
 8001612:	2101      	movs	r1, #1
 8001614:	438a      	bics	r2, r1
 8001616:	621a      	str	r2, [r3, #32]
 8001618:	4bc7      	ldr	r3, [pc, #796]	; (8001938 <HAL_RCC_OscConfig+0x67c>)
 800161a:	6a1a      	ldr	r2, [r3, #32]
 800161c:	4bc6      	ldr	r3, [pc, #792]	; (8001938 <HAL_RCC_OscConfig+0x67c>)
 800161e:	2104      	movs	r1, #4
 8001620:	438a      	bics	r2, r1
 8001622:	621a      	str	r2, [r3, #32]
 8001624:	e01c      	b.n	8001660 <HAL_RCC_OscConfig+0x3a4>
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	689b      	ldr	r3, [r3, #8]
 800162a:	2b05      	cmp	r3, #5
 800162c:	d10c      	bne.n	8001648 <HAL_RCC_OscConfig+0x38c>
 800162e:	4bc2      	ldr	r3, [pc, #776]	; (8001938 <HAL_RCC_OscConfig+0x67c>)
 8001630:	6a1a      	ldr	r2, [r3, #32]
 8001632:	4bc1      	ldr	r3, [pc, #772]	; (8001938 <HAL_RCC_OscConfig+0x67c>)
 8001634:	2104      	movs	r1, #4
 8001636:	430a      	orrs	r2, r1
 8001638:	621a      	str	r2, [r3, #32]
 800163a:	4bbf      	ldr	r3, [pc, #764]	; (8001938 <HAL_RCC_OscConfig+0x67c>)
 800163c:	6a1a      	ldr	r2, [r3, #32]
 800163e:	4bbe      	ldr	r3, [pc, #760]	; (8001938 <HAL_RCC_OscConfig+0x67c>)
 8001640:	2101      	movs	r1, #1
 8001642:	430a      	orrs	r2, r1
 8001644:	621a      	str	r2, [r3, #32]
 8001646:	e00b      	b.n	8001660 <HAL_RCC_OscConfig+0x3a4>
 8001648:	4bbb      	ldr	r3, [pc, #748]	; (8001938 <HAL_RCC_OscConfig+0x67c>)
 800164a:	6a1a      	ldr	r2, [r3, #32]
 800164c:	4bba      	ldr	r3, [pc, #744]	; (8001938 <HAL_RCC_OscConfig+0x67c>)
 800164e:	2101      	movs	r1, #1
 8001650:	438a      	bics	r2, r1
 8001652:	621a      	str	r2, [r3, #32]
 8001654:	4bb8      	ldr	r3, [pc, #736]	; (8001938 <HAL_RCC_OscConfig+0x67c>)
 8001656:	6a1a      	ldr	r2, [r3, #32]
 8001658:	4bb7      	ldr	r3, [pc, #732]	; (8001938 <HAL_RCC_OscConfig+0x67c>)
 800165a:	2104      	movs	r1, #4
 800165c:	438a      	bics	r2, r1
 800165e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	689b      	ldr	r3, [r3, #8]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d014      	beq.n	8001692 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001668:	f7ff f980 	bl	800096c <HAL_GetTick>
 800166c:	0003      	movs	r3, r0
 800166e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001670:	e009      	b.n	8001686 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001672:	f7ff f97b 	bl	800096c <HAL_GetTick>
 8001676:	0002      	movs	r2, r0
 8001678:	69bb      	ldr	r3, [r7, #24]
 800167a:	1ad3      	subs	r3, r2, r3
 800167c:	4aaf      	ldr	r2, [pc, #700]	; (800193c <HAL_RCC_OscConfig+0x680>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d901      	bls.n	8001686 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8001682:	2303      	movs	r3, #3
 8001684:	e19a      	b.n	80019bc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001686:	4bac      	ldr	r3, [pc, #688]	; (8001938 <HAL_RCC_OscConfig+0x67c>)
 8001688:	6a1b      	ldr	r3, [r3, #32]
 800168a:	2202      	movs	r2, #2
 800168c:	4013      	ands	r3, r2
 800168e:	d0f0      	beq.n	8001672 <HAL_RCC_OscConfig+0x3b6>
 8001690:	e013      	b.n	80016ba <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001692:	f7ff f96b 	bl	800096c <HAL_GetTick>
 8001696:	0003      	movs	r3, r0
 8001698:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800169a:	e009      	b.n	80016b0 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800169c:	f7ff f966 	bl	800096c <HAL_GetTick>
 80016a0:	0002      	movs	r2, r0
 80016a2:	69bb      	ldr	r3, [r7, #24]
 80016a4:	1ad3      	subs	r3, r2, r3
 80016a6:	4aa5      	ldr	r2, [pc, #660]	; (800193c <HAL_RCC_OscConfig+0x680>)
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d901      	bls.n	80016b0 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80016ac:	2303      	movs	r3, #3
 80016ae:	e185      	b.n	80019bc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016b0:	4ba1      	ldr	r3, [pc, #644]	; (8001938 <HAL_RCC_OscConfig+0x67c>)
 80016b2:	6a1b      	ldr	r3, [r3, #32]
 80016b4:	2202      	movs	r2, #2
 80016b6:	4013      	ands	r3, r2
 80016b8:	d1f0      	bne.n	800169c <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80016ba:	231f      	movs	r3, #31
 80016bc:	18fb      	adds	r3, r7, r3
 80016be:	781b      	ldrb	r3, [r3, #0]
 80016c0:	2b01      	cmp	r3, #1
 80016c2:	d105      	bne.n	80016d0 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016c4:	4b9c      	ldr	r3, [pc, #624]	; (8001938 <HAL_RCC_OscConfig+0x67c>)
 80016c6:	69da      	ldr	r2, [r3, #28]
 80016c8:	4b9b      	ldr	r3, [pc, #620]	; (8001938 <HAL_RCC_OscConfig+0x67c>)
 80016ca:	499d      	ldr	r1, [pc, #628]	; (8001940 <HAL_RCC_OscConfig+0x684>)
 80016cc:	400a      	ands	r2, r1
 80016ce:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	2210      	movs	r2, #16
 80016d6:	4013      	ands	r3, r2
 80016d8:	d063      	beq.n	80017a2 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	695b      	ldr	r3, [r3, #20]
 80016de:	2b01      	cmp	r3, #1
 80016e0:	d12a      	bne.n	8001738 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80016e2:	4b95      	ldr	r3, [pc, #596]	; (8001938 <HAL_RCC_OscConfig+0x67c>)
 80016e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80016e6:	4b94      	ldr	r3, [pc, #592]	; (8001938 <HAL_RCC_OscConfig+0x67c>)
 80016e8:	2104      	movs	r1, #4
 80016ea:	430a      	orrs	r2, r1
 80016ec:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80016ee:	4b92      	ldr	r3, [pc, #584]	; (8001938 <HAL_RCC_OscConfig+0x67c>)
 80016f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80016f2:	4b91      	ldr	r3, [pc, #580]	; (8001938 <HAL_RCC_OscConfig+0x67c>)
 80016f4:	2101      	movs	r1, #1
 80016f6:	430a      	orrs	r2, r1
 80016f8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016fa:	f7ff f937 	bl	800096c <HAL_GetTick>
 80016fe:	0003      	movs	r3, r0
 8001700:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001702:	e008      	b.n	8001716 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001704:	f7ff f932 	bl	800096c <HAL_GetTick>
 8001708:	0002      	movs	r2, r0
 800170a:	69bb      	ldr	r3, [r7, #24]
 800170c:	1ad3      	subs	r3, r2, r3
 800170e:	2b02      	cmp	r3, #2
 8001710:	d901      	bls.n	8001716 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8001712:	2303      	movs	r3, #3
 8001714:	e152      	b.n	80019bc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001716:	4b88      	ldr	r3, [pc, #544]	; (8001938 <HAL_RCC_OscConfig+0x67c>)
 8001718:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800171a:	2202      	movs	r2, #2
 800171c:	4013      	ands	r3, r2
 800171e:	d0f1      	beq.n	8001704 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001720:	4b85      	ldr	r3, [pc, #532]	; (8001938 <HAL_RCC_OscConfig+0x67c>)
 8001722:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001724:	22f8      	movs	r2, #248	; 0xf8
 8001726:	4393      	bics	r3, r2
 8001728:	0019      	movs	r1, r3
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	699b      	ldr	r3, [r3, #24]
 800172e:	00da      	lsls	r2, r3, #3
 8001730:	4b81      	ldr	r3, [pc, #516]	; (8001938 <HAL_RCC_OscConfig+0x67c>)
 8001732:	430a      	orrs	r2, r1
 8001734:	635a      	str	r2, [r3, #52]	; 0x34
 8001736:	e034      	b.n	80017a2 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	695b      	ldr	r3, [r3, #20]
 800173c:	3305      	adds	r3, #5
 800173e:	d111      	bne.n	8001764 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001740:	4b7d      	ldr	r3, [pc, #500]	; (8001938 <HAL_RCC_OscConfig+0x67c>)
 8001742:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001744:	4b7c      	ldr	r3, [pc, #496]	; (8001938 <HAL_RCC_OscConfig+0x67c>)
 8001746:	2104      	movs	r1, #4
 8001748:	438a      	bics	r2, r1
 800174a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800174c:	4b7a      	ldr	r3, [pc, #488]	; (8001938 <HAL_RCC_OscConfig+0x67c>)
 800174e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001750:	22f8      	movs	r2, #248	; 0xf8
 8001752:	4393      	bics	r3, r2
 8001754:	0019      	movs	r1, r3
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	699b      	ldr	r3, [r3, #24]
 800175a:	00da      	lsls	r2, r3, #3
 800175c:	4b76      	ldr	r3, [pc, #472]	; (8001938 <HAL_RCC_OscConfig+0x67c>)
 800175e:	430a      	orrs	r2, r1
 8001760:	635a      	str	r2, [r3, #52]	; 0x34
 8001762:	e01e      	b.n	80017a2 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001764:	4b74      	ldr	r3, [pc, #464]	; (8001938 <HAL_RCC_OscConfig+0x67c>)
 8001766:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001768:	4b73      	ldr	r3, [pc, #460]	; (8001938 <HAL_RCC_OscConfig+0x67c>)
 800176a:	2104      	movs	r1, #4
 800176c:	430a      	orrs	r2, r1
 800176e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001770:	4b71      	ldr	r3, [pc, #452]	; (8001938 <HAL_RCC_OscConfig+0x67c>)
 8001772:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001774:	4b70      	ldr	r3, [pc, #448]	; (8001938 <HAL_RCC_OscConfig+0x67c>)
 8001776:	2101      	movs	r1, #1
 8001778:	438a      	bics	r2, r1
 800177a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800177c:	f7ff f8f6 	bl	800096c <HAL_GetTick>
 8001780:	0003      	movs	r3, r0
 8001782:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001784:	e008      	b.n	8001798 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001786:	f7ff f8f1 	bl	800096c <HAL_GetTick>
 800178a:	0002      	movs	r2, r0
 800178c:	69bb      	ldr	r3, [r7, #24]
 800178e:	1ad3      	subs	r3, r2, r3
 8001790:	2b02      	cmp	r3, #2
 8001792:	d901      	bls.n	8001798 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8001794:	2303      	movs	r3, #3
 8001796:	e111      	b.n	80019bc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001798:	4b67      	ldr	r3, [pc, #412]	; (8001938 <HAL_RCC_OscConfig+0x67c>)
 800179a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800179c:	2202      	movs	r2, #2
 800179e:	4013      	ands	r3, r2
 80017a0:	d1f1      	bne.n	8001786 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	2220      	movs	r2, #32
 80017a8:	4013      	ands	r3, r2
 80017aa:	d05c      	beq.n	8001866 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80017ac:	4b62      	ldr	r3, [pc, #392]	; (8001938 <HAL_RCC_OscConfig+0x67c>)
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	220c      	movs	r2, #12
 80017b2:	4013      	ands	r3, r2
 80017b4:	2b0c      	cmp	r3, #12
 80017b6:	d00e      	beq.n	80017d6 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80017b8:	4b5f      	ldr	r3, [pc, #380]	; (8001938 <HAL_RCC_OscConfig+0x67c>)
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	220c      	movs	r2, #12
 80017be:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80017c0:	2b08      	cmp	r3, #8
 80017c2:	d114      	bne.n	80017ee <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80017c4:	4b5c      	ldr	r3, [pc, #368]	; (8001938 <HAL_RCC_OscConfig+0x67c>)
 80017c6:	685a      	ldr	r2, [r3, #4]
 80017c8:	23c0      	movs	r3, #192	; 0xc0
 80017ca:	025b      	lsls	r3, r3, #9
 80017cc:	401a      	ands	r2, r3
 80017ce:	23c0      	movs	r3, #192	; 0xc0
 80017d0:	025b      	lsls	r3, r3, #9
 80017d2:	429a      	cmp	r2, r3
 80017d4:	d10b      	bne.n	80017ee <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80017d6:	4b58      	ldr	r3, [pc, #352]	; (8001938 <HAL_RCC_OscConfig+0x67c>)
 80017d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017da:	2380      	movs	r3, #128	; 0x80
 80017dc:	025b      	lsls	r3, r3, #9
 80017de:	4013      	ands	r3, r2
 80017e0:	d040      	beq.n	8001864 <HAL_RCC_OscConfig+0x5a8>
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6a1b      	ldr	r3, [r3, #32]
 80017e6:	2b01      	cmp	r3, #1
 80017e8:	d03c      	beq.n	8001864 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80017ea:	2301      	movs	r3, #1
 80017ec:	e0e6      	b.n	80019bc <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6a1b      	ldr	r3, [r3, #32]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d01b      	beq.n	800182e <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80017f6:	4b50      	ldr	r3, [pc, #320]	; (8001938 <HAL_RCC_OscConfig+0x67c>)
 80017f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017fa:	4b4f      	ldr	r3, [pc, #316]	; (8001938 <HAL_RCC_OscConfig+0x67c>)
 80017fc:	2180      	movs	r1, #128	; 0x80
 80017fe:	0249      	lsls	r1, r1, #9
 8001800:	430a      	orrs	r2, r1
 8001802:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001804:	f7ff f8b2 	bl	800096c <HAL_GetTick>
 8001808:	0003      	movs	r3, r0
 800180a:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800180c:	e008      	b.n	8001820 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800180e:	f7ff f8ad 	bl	800096c <HAL_GetTick>
 8001812:	0002      	movs	r2, r0
 8001814:	69bb      	ldr	r3, [r7, #24]
 8001816:	1ad3      	subs	r3, r2, r3
 8001818:	2b02      	cmp	r3, #2
 800181a:	d901      	bls.n	8001820 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 800181c:	2303      	movs	r3, #3
 800181e:	e0cd      	b.n	80019bc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001820:	4b45      	ldr	r3, [pc, #276]	; (8001938 <HAL_RCC_OscConfig+0x67c>)
 8001822:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001824:	2380      	movs	r3, #128	; 0x80
 8001826:	025b      	lsls	r3, r3, #9
 8001828:	4013      	ands	r3, r2
 800182a:	d0f0      	beq.n	800180e <HAL_RCC_OscConfig+0x552>
 800182c:	e01b      	b.n	8001866 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800182e:	4b42      	ldr	r3, [pc, #264]	; (8001938 <HAL_RCC_OscConfig+0x67c>)
 8001830:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001832:	4b41      	ldr	r3, [pc, #260]	; (8001938 <HAL_RCC_OscConfig+0x67c>)
 8001834:	4943      	ldr	r1, [pc, #268]	; (8001944 <HAL_RCC_OscConfig+0x688>)
 8001836:	400a      	ands	r2, r1
 8001838:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800183a:	f7ff f897 	bl	800096c <HAL_GetTick>
 800183e:	0003      	movs	r3, r0
 8001840:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001842:	e008      	b.n	8001856 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001844:	f7ff f892 	bl	800096c <HAL_GetTick>
 8001848:	0002      	movs	r2, r0
 800184a:	69bb      	ldr	r3, [r7, #24]
 800184c:	1ad3      	subs	r3, r2, r3
 800184e:	2b02      	cmp	r3, #2
 8001850:	d901      	bls.n	8001856 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8001852:	2303      	movs	r3, #3
 8001854:	e0b2      	b.n	80019bc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001856:	4b38      	ldr	r3, [pc, #224]	; (8001938 <HAL_RCC_OscConfig+0x67c>)
 8001858:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800185a:	2380      	movs	r3, #128	; 0x80
 800185c:	025b      	lsls	r3, r3, #9
 800185e:	4013      	ands	r3, r2
 8001860:	d1f0      	bne.n	8001844 <HAL_RCC_OscConfig+0x588>
 8001862:	e000      	b.n	8001866 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001864:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800186a:	2b00      	cmp	r3, #0
 800186c:	d100      	bne.n	8001870 <HAL_RCC_OscConfig+0x5b4>
 800186e:	e0a4      	b.n	80019ba <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001870:	4b31      	ldr	r3, [pc, #196]	; (8001938 <HAL_RCC_OscConfig+0x67c>)
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	220c      	movs	r2, #12
 8001876:	4013      	ands	r3, r2
 8001878:	2b08      	cmp	r3, #8
 800187a:	d100      	bne.n	800187e <HAL_RCC_OscConfig+0x5c2>
 800187c:	e078      	b.n	8001970 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001882:	2b02      	cmp	r3, #2
 8001884:	d14c      	bne.n	8001920 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001886:	4b2c      	ldr	r3, [pc, #176]	; (8001938 <HAL_RCC_OscConfig+0x67c>)
 8001888:	681a      	ldr	r2, [r3, #0]
 800188a:	4b2b      	ldr	r3, [pc, #172]	; (8001938 <HAL_RCC_OscConfig+0x67c>)
 800188c:	492e      	ldr	r1, [pc, #184]	; (8001948 <HAL_RCC_OscConfig+0x68c>)
 800188e:	400a      	ands	r2, r1
 8001890:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001892:	f7ff f86b 	bl	800096c <HAL_GetTick>
 8001896:	0003      	movs	r3, r0
 8001898:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800189a:	e008      	b.n	80018ae <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800189c:	f7ff f866 	bl	800096c <HAL_GetTick>
 80018a0:	0002      	movs	r2, r0
 80018a2:	69bb      	ldr	r3, [r7, #24]
 80018a4:	1ad3      	subs	r3, r2, r3
 80018a6:	2b02      	cmp	r3, #2
 80018a8:	d901      	bls.n	80018ae <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 80018aa:	2303      	movs	r3, #3
 80018ac:	e086      	b.n	80019bc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018ae:	4b22      	ldr	r3, [pc, #136]	; (8001938 <HAL_RCC_OscConfig+0x67c>)
 80018b0:	681a      	ldr	r2, [r3, #0]
 80018b2:	2380      	movs	r3, #128	; 0x80
 80018b4:	049b      	lsls	r3, r3, #18
 80018b6:	4013      	ands	r3, r2
 80018b8:	d1f0      	bne.n	800189c <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018ba:	4b1f      	ldr	r3, [pc, #124]	; (8001938 <HAL_RCC_OscConfig+0x67c>)
 80018bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018be:	220f      	movs	r2, #15
 80018c0:	4393      	bics	r3, r2
 80018c2:	0019      	movs	r1, r3
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80018c8:	4b1b      	ldr	r3, [pc, #108]	; (8001938 <HAL_RCC_OscConfig+0x67c>)
 80018ca:	430a      	orrs	r2, r1
 80018cc:	62da      	str	r2, [r3, #44]	; 0x2c
 80018ce:	4b1a      	ldr	r3, [pc, #104]	; (8001938 <HAL_RCC_OscConfig+0x67c>)
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	4a1e      	ldr	r2, [pc, #120]	; (800194c <HAL_RCC_OscConfig+0x690>)
 80018d4:	4013      	ands	r3, r2
 80018d6:	0019      	movs	r1, r3
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018e0:	431a      	orrs	r2, r3
 80018e2:	4b15      	ldr	r3, [pc, #84]	; (8001938 <HAL_RCC_OscConfig+0x67c>)
 80018e4:	430a      	orrs	r2, r1
 80018e6:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018e8:	4b13      	ldr	r3, [pc, #76]	; (8001938 <HAL_RCC_OscConfig+0x67c>)
 80018ea:	681a      	ldr	r2, [r3, #0]
 80018ec:	4b12      	ldr	r3, [pc, #72]	; (8001938 <HAL_RCC_OscConfig+0x67c>)
 80018ee:	2180      	movs	r1, #128	; 0x80
 80018f0:	0449      	lsls	r1, r1, #17
 80018f2:	430a      	orrs	r2, r1
 80018f4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018f6:	f7ff f839 	bl	800096c <HAL_GetTick>
 80018fa:	0003      	movs	r3, r0
 80018fc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018fe:	e008      	b.n	8001912 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001900:	f7ff f834 	bl	800096c <HAL_GetTick>
 8001904:	0002      	movs	r2, r0
 8001906:	69bb      	ldr	r3, [r7, #24]
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	2b02      	cmp	r3, #2
 800190c:	d901      	bls.n	8001912 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 800190e:	2303      	movs	r3, #3
 8001910:	e054      	b.n	80019bc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001912:	4b09      	ldr	r3, [pc, #36]	; (8001938 <HAL_RCC_OscConfig+0x67c>)
 8001914:	681a      	ldr	r2, [r3, #0]
 8001916:	2380      	movs	r3, #128	; 0x80
 8001918:	049b      	lsls	r3, r3, #18
 800191a:	4013      	ands	r3, r2
 800191c:	d0f0      	beq.n	8001900 <HAL_RCC_OscConfig+0x644>
 800191e:	e04c      	b.n	80019ba <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001920:	4b05      	ldr	r3, [pc, #20]	; (8001938 <HAL_RCC_OscConfig+0x67c>)
 8001922:	681a      	ldr	r2, [r3, #0]
 8001924:	4b04      	ldr	r3, [pc, #16]	; (8001938 <HAL_RCC_OscConfig+0x67c>)
 8001926:	4908      	ldr	r1, [pc, #32]	; (8001948 <HAL_RCC_OscConfig+0x68c>)
 8001928:	400a      	ands	r2, r1
 800192a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800192c:	f7ff f81e 	bl	800096c <HAL_GetTick>
 8001930:	0003      	movs	r3, r0
 8001932:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001934:	e015      	b.n	8001962 <HAL_RCC_OscConfig+0x6a6>
 8001936:	46c0      	nop			; (mov r8, r8)
 8001938:	40021000 	.word	0x40021000
 800193c:	00001388 	.word	0x00001388
 8001940:	efffffff 	.word	0xefffffff
 8001944:	fffeffff 	.word	0xfffeffff
 8001948:	feffffff 	.word	0xfeffffff
 800194c:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001950:	f7ff f80c 	bl	800096c <HAL_GetTick>
 8001954:	0002      	movs	r2, r0
 8001956:	69bb      	ldr	r3, [r7, #24]
 8001958:	1ad3      	subs	r3, r2, r3
 800195a:	2b02      	cmp	r3, #2
 800195c:	d901      	bls.n	8001962 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 800195e:	2303      	movs	r3, #3
 8001960:	e02c      	b.n	80019bc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001962:	4b18      	ldr	r3, [pc, #96]	; (80019c4 <HAL_RCC_OscConfig+0x708>)
 8001964:	681a      	ldr	r2, [r3, #0]
 8001966:	2380      	movs	r3, #128	; 0x80
 8001968:	049b      	lsls	r3, r3, #18
 800196a:	4013      	ands	r3, r2
 800196c:	d1f0      	bne.n	8001950 <HAL_RCC_OscConfig+0x694>
 800196e:	e024      	b.n	80019ba <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001974:	2b01      	cmp	r3, #1
 8001976:	d101      	bne.n	800197c <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8001978:	2301      	movs	r3, #1
 800197a:	e01f      	b.n	80019bc <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800197c:	4b11      	ldr	r3, [pc, #68]	; (80019c4 <HAL_RCC_OscConfig+0x708>)
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001982:	4b10      	ldr	r3, [pc, #64]	; (80019c4 <HAL_RCC_OscConfig+0x708>)
 8001984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001986:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001988:	697a      	ldr	r2, [r7, #20]
 800198a:	23c0      	movs	r3, #192	; 0xc0
 800198c:	025b      	lsls	r3, r3, #9
 800198e:	401a      	ands	r2, r3
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001994:	429a      	cmp	r2, r3
 8001996:	d10e      	bne.n	80019b6 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001998:	693b      	ldr	r3, [r7, #16]
 800199a:	220f      	movs	r2, #15
 800199c:	401a      	ands	r2, r3
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80019a2:	429a      	cmp	r2, r3
 80019a4:	d107      	bne.n	80019b6 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80019a6:	697a      	ldr	r2, [r7, #20]
 80019a8:	23f0      	movs	r3, #240	; 0xf0
 80019aa:	039b      	lsls	r3, r3, #14
 80019ac:	401a      	ands	r2, r3
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80019b2:	429a      	cmp	r2, r3
 80019b4:	d001      	beq.n	80019ba <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 80019b6:	2301      	movs	r3, #1
 80019b8:	e000      	b.n	80019bc <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 80019ba:	2300      	movs	r3, #0
}
 80019bc:	0018      	movs	r0, r3
 80019be:	46bd      	mov	sp, r7
 80019c0:	b008      	add	sp, #32
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	40021000 	.word	0x40021000

080019c8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b084      	sub	sp, #16
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
 80019d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d101      	bne.n	80019dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019d8:	2301      	movs	r3, #1
 80019da:	e0bf      	b.n	8001b5c <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80019dc:	4b61      	ldr	r3, [pc, #388]	; (8001b64 <HAL_RCC_ClockConfig+0x19c>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	2201      	movs	r2, #1
 80019e2:	4013      	ands	r3, r2
 80019e4:	683a      	ldr	r2, [r7, #0]
 80019e6:	429a      	cmp	r2, r3
 80019e8:	d911      	bls.n	8001a0e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019ea:	4b5e      	ldr	r3, [pc, #376]	; (8001b64 <HAL_RCC_ClockConfig+0x19c>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	2201      	movs	r2, #1
 80019f0:	4393      	bics	r3, r2
 80019f2:	0019      	movs	r1, r3
 80019f4:	4b5b      	ldr	r3, [pc, #364]	; (8001b64 <HAL_RCC_ClockConfig+0x19c>)
 80019f6:	683a      	ldr	r2, [r7, #0]
 80019f8:	430a      	orrs	r2, r1
 80019fa:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019fc:	4b59      	ldr	r3, [pc, #356]	; (8001b64 <HAL_RCC_ClockConfig+0x19c>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	2201      	movs	r2, #1
 8001a02:	4013      	ands	r3, r2
 8001a04:	683a      	ldr	r2, [r7, #0]
 8001a06:	429a      	cmp	r2, r3
 8001a08:	d001      	beq.n	8001a0e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e0a6      	b.n	8001b5c <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	2202      	movs	r2, #2
 8001a14:	4013      	ands	r3, r2
 8001a16:	d015      	beq.n	8001a44 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	2204      	movs	r2, #4
 8001a1e:	4013      	ands	r3, r2
 8001a20:	d006      	beq.n	8001a30 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001a22:	4b51      	ldr	r3, [pc, #324]	; (8001b68 <HAL_RCC_ClockConfig+0x1a0>)
 8001a24:	685a      	ldr	r2, [r3, #4]
 8001a26:	4b50      	ldr	r3, [pc, #320]	; (8001b68 <HAL_RCC_ClockConfig+0x1a0>)
 8001a28:	21e0      	movs	r1, #224	; 0xe0
 8001a2a:	00c9      	lsls	r1, r1, #3
 8001a2c:	430a      	orrs	r2, r1
 8001a2e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a30:	4b4d      	ldr	r3, [pc, #308]	; (8001b68 <HAL_RCC_ClockConfig+0x1a0>)
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	22f0      	movs	r2, #240	; 0xf0
 8001a36:	4393      	bics	r3, r2
 8001a38:	0019      	movs	r1, r3
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	689a      	ldr	r2, [r3, #8]
 8001a3e:	4b4a      	ldr	r3, [pc, #296]	; (8001b68 <HAL_RCC_ClockConfig+0x1a0>)
 8001a40:	430a      	orrs	r2, r1
 8001a42:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	2201      	movs	r2, #1
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	d04c      	beq.n	8001ae8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	2b01      	cmp	r3, #1
 8001a54:	d107      	bne.n	8001a66 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a56:	4b44      	ldr	r3, [pc, #272]	; (8001b68 <HAL_RCC_ClockConfig+0x1a0>)
 8001a58:	681a      	ldr	r2, [r3, #0]
 8001a5a:	2380      	movs	r3, #128	; 0x80
 8001a5c:	029b      	lsls	r3, r3, #10
 8001a5e:	4013      	ands	r3, r2
 8001a60:	d120      	bne.n	8001aa4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
 8001a64:	e07a      	b.n	8001b5c <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	2b02      	cmp	r3, #2
 8001a6c:	d107      	bne.n	8001a7e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a6e:	4b3e      	ldr	r3, [pc, #248]	; (8001b68 <HAL_RCC_ClockConfig+0x1a0>)
 8001a70:	681a      	ldr	r2, [r3, #0]
 8001a72:	2380      	movs	r3, #128	; 0x80
 8001a74:	049b      	lsls	r3, r3, #18
 8001a76:	4013      	ands	r3, r2
 8001a78:	d114      	bne.n	8001aa4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e06e      	b.n	8001b5c <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	2b03      	cmp	r3, #3
 8001a84:	d107      	bne.n	8001a96 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001a86:	4b38      	ldr	r3, [pc, #224]	; (8001b68 <HAL_RCC_ClockConfig+0x1a0>)
 8001a88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a8a:	2380      	movs	r3, #128	; 0x80
 8001a8c:	025b      	lsls	r3, r3, #9
 8001a8e:	4013      	ands	r3, r2
 8001a90:	d108      	bne.n	8001aa4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001a92:	2301      	movs	r3, #1
 8001a94:	e062      	b.n	8001b5c <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a96:	4b34      	ldr	r3, [pc, #208]	; (8001b68 <HAL_RCC_ClockConfig+0x1a0>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	2202      	movs	r2, #2
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	d101      	bne.n	8001aa4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	e05b      	b.n	8001b5c <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001aa4:	4b30      	ldr	r3, [pc, #192]	; (8001b68 <HAL_RCC_ClockConfig+0x1a0>)
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	2203      	movs	r2, #3
 8001aaa:	4393      	bics	r3, r2
 8001aac:	0019      	movs	r1, r3
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	685a      	ldr	r2, [r3, #4]
 8001ab2:	4b2d      	ldr	r3, [pc, #180]	; (8001b68 <HAL_RCC_ClockConfig+0x1a0>)
 8001ab4:	430a      	orrs	r2, r1
 8001ab6:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ab8:	f7fe ff58 	bl	800096c <HAL_GetTick>
 8001abc:	0003      	movs	r3, r0
 8001abe:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ac0:	e009      	b.n	8001ad6 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ac2:	f7fe ff53 	bl	800096c <HAL_GetTick>
 8001ac6:	0002      	movs	r2, r0
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	1ad3      	subs	r3, r2, r3
 8001acc:	4a27      	ldr	r2, [pc, #156]	; (8001b6c <HAL_RCC_ClockConfig+0x1a4>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d901      	bls.n	8001ad6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ad2:	2303      	movs	r3, #3
 8001ad4:	e042      	b.n	8001b5c <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ad6:	4b24      	ldr	r3, [pc, #144]	; (8001b68 <HAL_RCC_ClockConfig+0x1a0>)
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	220c      	movs	r2, #12
 8001adc:	401a      	ands	r2, r3
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	009b      	lsls	r3, r3, #2
 8001ae4:	429a      	cmp	r2, r3
 8001ae6:	d1ec      	bne.n	8001ac2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ae8:	4b1e      	ldr	r3, [pc, #120]	; (8001b64 <HAL_RCC_ClockConfig+0x19c>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	2201      	movs	r2, #1
 8001aee:	4013      	ands	r3, r2
 8001af0:	683a      	ldr	r2, [r7, #0]
 8001af2:	429a      	cmp	r2, r3
 8001af4:	d211      	bcs.n	8001b1a <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001af6:	4b1b      	ldr	r3, [pc, #108]	; (8001b64 <HAL_RCC_ClockConfig+0x19c>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	2201      	movs	r2, #1
 8001afc:	4393      	bics	r3, r2
 8001afe:	0019      	movs	r1, r3
 8001b00:	4b18      	ldr	r3, [pc, #96]	; (8001b64 <HAL_RCC_ClockConfig+0x19c>)
 8001b02:	683a      	ldr	r2, [r7, #0]
 8001b04:	430a      	orrs	r2, r1
 8001b06:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b08:	4b16      	ldr	r3, [pc, #88]	; (8001b64 <HAL_RCC_ClockConfig+0x19c>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	4013      	ands	r3, r2
 8001b10:	683a      	ldr	r2, [r7, #0]
 8001b12:	429a      	cmp	r2, r3
 8001b14:	d001      	beq.n	8001b1a <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8001b16:	2301      	movs	r3, #1
 8001b18:	e020      	b.n	8001b5c <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	2204      	movs	r2, #4
 8001b20:	4013      	ands	r3, r2
 8001b22:	d009      	beq.n	8001b38 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001b24:	4b10      	ldr	r3, [pc, #64]	; (8001b68 <HAL_RCC_ClockConfig+0x1a0>)
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	4a11      	ldr	r2, [pc, #68]	; (8001b70 <HAL_RCC_ClockConfig+0x1a8>)
 8001b2a:	4013      	ands	r3, r2
 8001b2c:	0019      	movs	r1, r3
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	68da      	ldr	r2, [r3, #12]
 8001b32:	4b0d      	ldr	r3, [pc, #52]	; (8001b68 <HAL_RCC_ClockConfig+0x1a0>)
 8001b34:	430a      	orrs	r2, r1
 8001b36:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001b38:	f000 f820 	bl	8001b7c <HAL_RCC_GetSysClockFreq>
 8001b3c:	0001      	movs	r1, r0
 8001b3e:	4b0a      	ldr	r3, [pc, #40]	; (8001b68 <HAL_RCC_ClockConfig+0x1a0>)
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	091b      	lsrs	r3, r3, #4
 8001b44:	220f      	movs	r2, #15
 8001b46:	4013      	ands	r3, r2
 8001b48:	4a0a      	ldr	r2, [pc, #40]	; (8001b74 <HAL_RCC_ClockConfig+0x1ac>)
 8001b4a:	5cd3      	ldrb	r3, [r2, r3]
 8001b4c:	000a      	movs	r2, r1
 8001b4e:	40da      	lsrs	r2, r3
 8001b50:	4b09      	ldr	r3, [pc, #36]	; (8001b78 <HAL_RCC_ClockConfig+0x1b0>)
 8001b52:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001b54:	2000      	movs	r0, #0
 8001b56:	f7fe fec3 	bl	80008e0 <HAL_InitTick>
  
  return HAL_OK;
 8001b5a:	2300      	movs	r3, #0
}
 8001b5c:	0018      	movs	r0, r3
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	b004      	add	sp, #16
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	40022000 	.word	0x40022000
 8001b68:	40021000 	.word	0x40021000
 8001b6c:	00001388 	.word	0x00001388
 8001b70:	fffff8ff 	.word	0xfffff8ff
 8001b74:	08003cb4 	.word	0x08003cb4
 8001b78:	20000000 	.word	0x20000000

08001b7c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b7c:	b590      	push	{r4, r7, lr}
 8001b7e:	b08f      	sub	sp, #60	; 0x3c
 8001b80:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001b82:	2314      	movs	r3, #20
 8001b84:	18fb      	adds	r3, r7, r3
 8001b86:	4a38      	ldr	r2, [pc, #224]	; (8001c68 <HAL_RCC_GetSysClockFreq+0xec>)
 8001b88:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001b8a:	c313      	stmia	r3!, {r0, r1, r4}
 8001b8c:	6812      	ldr	r2, [r2, #0]
 8001b8e:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001b90:	1d3b      	adds	r3, r7, #4
 8001b92:	4a36      	ldr	r2, [pc, #216]	; (8001c6c <HAL_RCC_GetSysClockFreq+0xf0>)
 8001b94:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001b96:	c313      	stmia	r3!, {r0, r1, r4}
 8001b98:	6812      	ldr	r2, [r2, #0]
 8001b9a:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	637b      	str	r3, [r7, #52]	; 0x34
 8001ba8:	2300      	movs	r3, #0
 8001baa:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001bac:	2300      	movs	r3, #0
 8001bae:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001bb0:	4b2f      	ldr	r3, [pc, #188]	; (8001c70 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001bb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bb8:	220c      	movs	r2, #12
 8001bba:	4013      	ands	r3, r2
 8001bbc:	2b0c      	cmp	r3, #12
 8001bbe:	d047      	beq.n	8001c50 <HAL_RCC_GetSysClockFreq+0xd4>
 8001bc0:	d849      	bhi.n	8001c56 <HAL_RCC_GetSysClockFreq+0xda>
 8001bc2:	2b04      	cmp	r3, #4
 8001bc4:	d002      	beq.n	8001bcc <HAL_RCC_GetSysClockFreq+0x50>
 8001bc6:	2b08      	cmp	r3, #8
 8001bc8:	d003      	beq.n	8001bd2 <HAL_RCC_GetSysClockFreq+0x56>
 8001bca:	e044      	b.n	8001c56 <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001bcc:	4b29      	ldr	r3, [pc, #164]	; (8001c74 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001bce:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001bd0:	e044      	b.n	8001c5c <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001bd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bd4:	0c9b      	lsrs	r3, r3, #18
 8001bd6:	220f      	movs	r2, #15
 8001bd8:	4013      	ands	r3, r2
 8001bda:	2214      	movs	r2, #20
 8001bdc:	18ba      	adds	r2, r7, r2
 8001bde:	5cd3      	ldrb	r3, [r2, r3]
 8001be0:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001be2:	4b23      	ldr	r3, [pc, #140]	; (8001c70 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001be4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001be6:	220f      	movs	r2, #15
 8001be8:	4013      	ands	r3, r2
 8001bea:	1d3a      	adds	r2, r7, #4
 8001bec:	5cd3      	ldrb	r3, [r2, r3]
 8001bee:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001bf0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001bf2:	23c0      	movs	r3, #192	; 0xc0
 8001bf4:	025b      	lsls	r3, r3, #9
 8001bf6:	401a      	ands	r2, r3
 8001bf8:	2380      	movs	r3, #128	; 0x80
 8001bfa:	025b      	lsls	r3, r3, #9
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	d109      	bne.n	8001c14 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001c00:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001c02:	481c      	ldr	r0, [pc, #112]	; (8001c74 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c04:	f7fe fa80 	bl	8000108 <__udivsi3>
 8001c08:	0003      	movs	r3, r0
 8001c0a:	001a      	movs	r2, r3
 8001c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c0e:	4353      	muls	r3, r2
 8001c10:	637b      	str	r3, [r7, #52]	; 0x34
 8001c12:	e01a      	b.n	8001c4a <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8001c14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c16:	23c0      	movs	r3, #192	; 0xc0
 8001c18:	025b      	lsls	r3, r3, #9
 8001c1a:	401a      	ands	r2, r3
 8001c1c:	23c0      	movs	r3, #192	; 0xc0
 8001c1e:	025b      	lsls	r3, r3, #9
 8001c20:	429a      	cmp	r2, r3
 8001c22:	d109      	bne.n	8001c38 <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001c24:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001c26:	4814      	ldr	r0, [pc, #80]	; (8001c78 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001c28:	f7fe fa6e 	bl	8000108 <__udivsi3>
 8001c2c:	0003      	movs	r3, r0
 8001c2e:	001a      	movs	r2, r3
 8001c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c32:	4353      	muls	r3, r2
 8001c34:	637b      	str	r3, [r7, #52]	; 0x34
 8001c36:	e008      	b.n	8001c4a <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001c38:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001c3a:	480e      	ldr	r0, [pc, #56]	; (8001c74 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c3c:	f7fe fa64 	bl	8000108 <__udivsi3>
 8001c40:	0003      	movs	r3, r0
 8001c42:	001a      	movs	r2, r3
 8001c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c46:	4353      	muls	r3, r2
 8001c48:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8001c4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c4c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001c4e:	e005      	b.n	8001c5c <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8001c50:	4b09      	ldr	r3, [pc, #36]	; (8001c78 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001c52:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001c54:	e002      	b.n	8001c5c <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001c56:	4b07      	ldr	r3, [pc, #28]	; (8001c74 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c58:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001c5a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001c5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001c5e:	0018      	movs	r0, r3
 8001c60:	46bd      	mov	sp, r7
 8001c62:	b00f      	add	sp, #60	; 0x3c
 8001c64:	bd90      	pop	{r4, r7, pc}
 8001c66:	46c0      	nop			; (mov r8, r8)
 8001c68:	08003c94 	.word	0x08003c94
 8001c6c:	08003ca4 	.word	0x08003ca4
 8001c70:	40021000 	.word	0x40021000
 8001c74:	007a1200 	.word	0x007a1200
 8001c78:	02dc6c00 	.word	0x02dc6c00

08001c7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c80:	4b02      	ldr	r3, [pc, #8]	; (8001c8c <HAL_RCC_GetHCLKFreq+0x10>)
 8001c82:	681b      	ldr	r3, [r3, #0]
}
 8001c84:	0018      	movs	r0, r3
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	46c0      	nop			; (mov r8, r8)
 8001c8c:	20000000 	.word	0x20000000

08001c90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001c94:	f7ff fff2 	bl	8001c7c <HAL_RCC_GetHCLKFreq>
 8001c98:	0001      	movs	r1, r0
 8001c9a:	4b06      	ldr	r3, [pc, #24]	; (8001cb4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	0a1b      	lsrs	r3, r3, #8
 8001ca0:	2207      	movs	r2, #7
 8001ca2:	4013      	ands	r3, r2
 8001ca4:	4a04      	ldr	r2, [pc, #16]	; (8001cb8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001ca6:	5cd3      	ldrb	r3, [r2, r3]
 8001ca8:	40d9      	lsrs	r1, r3
 8001caa:	000b      	movs	r3, r1
}    
 8001cac:	0018      	movs	r0, r3
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	46c0      	nop			; (mov r8, r8)
 8001cb4:	40021000 	.word	0x40021000
 8001cb8:	08003cc4 	.word	0x08003cc4

08001cbc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b082      	sub	sp, #8
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d101      	bne.n	8001cce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e042      	b.n	8001d54 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	223d      	movs	r2, #61	; 0x3d
 8001cd2:	5c9b      	ldrb	r3, [r3, r2]
 8001cd4:	b2db      	uxtb	r3, r3
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d107      	bne.n	8001cea <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	223c      	movs	r2, #60	; 0x3c
 8001cde:	2100      	movs	r1, #0
 8001ce0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	0018      	movs	r0, r3
 8001ce6:	f7fe fc95 	bl	8000614 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	223d      	movs	r2, #61	; 0x3d
 8001cee:	2102      	movs	r1, #2
 8001cf0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681a      	ldr	r2, [r3, #0]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	3304      	adds	r3, #4
 8001cfa:	0019      	movs	r1, r3
 8001cfc:	0010      	movs	r0, r2
 8001cfe:	f000 fb0f 	bl	8002320 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2246      	movs	r2, #70	; 0x46
 8001d06:	2101      	movs	r1, #1
 8001d08:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	223e      	movs	r2, #62	; 0x3e
 8001d0e:	2101      	movs	r1, #1
 8001d10:	5499      	strb	r1, [r3, r2]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	223f      	movs	r2, #63	; 0x3f
 8001d16:	2101      	movs	r1, #1
 8001d18:	5499      	strb	r1, [r3, r2]
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2240      	movs	r2, #64	; 0x40
 8001d1e:	2101      	movs	r1, #1
 8001d20:	5499      	strb	r1, [r3, r2]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2241      	movs	r2, #65	; 0x41
 8001d26:	2101      	movs	r1, #1
 8001d28:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2242      	movs	r2, #66	; 0x42
 8001d2e:	2101      	movs	r1, #1
 8001d30:	5499      	strb	r1, [r3, r2]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2243      	movs	r2, #67	; 0x43
 8001d36:	2101      	movs	r1, #1
 8001d38:	5499      	strb	r1, [r3, r2]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2244      	movs	r2, #68	; 0x44
 8001d3e:	2101      	movs	r1, #1
 8001d40:	5499      	strb	r1, [r3, r2]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2245      	movs	r2, #69	; 0x45
 8001d46:	2101      	movs	r1, #1
 8001d48:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	223d      	movs	r2, #61	; 0x3d
 8001d4e:	2101      	movs	r1, #1
 8001d50:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001d52:	2300      	movs	r3, #0
}
 8001d54:	0018      	movs	r0, r3
 8001d56:	46bd      	mov	sp, r7
 8001d58:	b002      	add	sp, #8
 8001d5a:	bd80      	pop	{r7, pc}

08001d5c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b084      	sub	sp, #16
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	223d      	movs	r2, #61	; 0x3d
 8001d68:	5c9b      	ldrb	r3, [r3, r2]
 8001d6a:	b2db      	uxtb	r3, r3
 8001d6c:	2b01      	cmp	r3, #1
 8001d6e:	d001      	beq.n	8001d74 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8001d70:	2301      	movs	r3, #1
 8001d72:	e02e      	b.n	8001dd2 <HAL_TIM_Base_Start+0x76>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	223d      	movs	r2, #61	; 0x3d
 8001d78:	2102      	movs	r1, #2
 8001d7a:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a16      	ldr	r2, [pc, #88]	; (8001ddc <HAL_TIM_Base_Start+0x80>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d00a      	beq.n	8001d9c <HAL_TIM_Base_Start+0x40>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681a      	ldr	r2, [r3, #0]
 8001d8a:	2380      	movs	r3, #128	; 0x80
 8001d8c:	05db      	lsls	r3, r3, #23
 8001d8e:	429a      	cmp	r2, r3
 8001d90:	d004      	beq.n	8001d9c <HAL_TIM_Base_Start+0x40>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4a12      	ldr	r2, [pc, #72]	; (8001de0 <HAL_TIM_Base_Start+0x84>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d111      	bne.n	8001dc0 <HAL_TIM_Base_Start+0x64>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	689b      	ldr	r3, [r3, #8]
 8001da2:	2207      	movs	r2, #7
 8001da4:	4013      	ands	r3, r2
 8001da6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	2b06      	cmp	r3, #6
 8001dac:	d010      	beq.n	8001dd0 <HAL_TIM_Base_Start+0x74>
    {
      __HAL_TIM_ENABLE(htim);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	681a      	ldr	r2, [r3, #0]
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	2101      	movs	r1, #1
 8001dba:	430a      	orrs	r2, r1
 8001dbc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001dbe:	e007      	b.n	8001dd0 <HAL_TIM_Base_Start+0x74>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	681a      	ldr	r2, [r3, #0]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	2101      	movs	r1, #1
 8001dcc:	430a      	orrs	r2, r1
 8001dce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001dd0:	2300      	movs	r3, #0
}
 8001dd2:	0018      	movs	r0, r3
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	b004      	add	sp, #16
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	46c0      	nop			; (mov r8, r8)
 8001ddc:	40012c00 	.word	0x40012c00
 8001de0:	40000400 	.word	0x40000400

08001de4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b082      	sub	sp, #8
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d101      	bne.n	8001df6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	e042      	b.n	8001e7c <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	223d      	movs	r2, #61	; 0x3d
 8001dfa:	5c9b      	ldrb	r3, [r3, r2]
 8001dfc:	b2db      	uxtb	r3, r3
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d107      	bne.n	8001e12 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	223c      	movs	r2, #60	; 0x3c
 8001e06:	2100      	movs	r1, #0
 8001e08:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	0018      	movs	r0, r3
 8001e0e:	f000 f839 	bl	8001e84 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	223d      	movs	r2, #61	; 0x3d
 8001e16:	2102      	movs	r1, #2
 8001e18:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681a      	ldr	r2, [r3, #0]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	3304      	adds	r3, #4
 8001e22:	0019      	movs	r1, r3
 8001e24:	0010      	movs	r0, r2
 8001e26:	f000 fa7b 	bl	8002320 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2246      	movs	r2, #70	; 0x46
 8001e2e:	2101      	movs	r1, #1
 8001e30:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	223e      	movs	r2, #62	; 0x3e
 8001e36:	2101      	movs	r1, #1
 8001e38:	5499      	strb	r1, [r3, r2]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	223f      	movs	r2, #63	; 0x3f
 8001e3e:	2101      	movs	r1, #1
 8001e40:	5499      	strb	r1, [r3, r2]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2240      	movs	r2, #64	; 0x40
 8001e46:	2101      	movs	r1, #1
 8001e48:	5499      	strb	r1, [r3, r2]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2241      	movs	r2, #65	; 0x41
 8001e4e:	2101      	movs	r1, #1
 8001e50:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2242      	movs	r2, #66	; 0x42
 8001e56:	2101      	movs	r1, #1
 8001e58:	5499      	strb	r1, [r3, r2]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2243      	movs	r2, #67	; 0x43
 8001e5e:	2101      	movs	r1, #1
 8001e60:	5499      	strb	r1, [r3, r2]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2244      	movs	r2, #68	; 0x44
 8001e66:	2101      	movs	r1, #1
 8001e68:	5499      	strb	r1, [r3, r2]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2245      	movs	r2, #69	; 0x45
 8001e6e:	2101      	movs	r1, #1
 8001e70:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	223d      	movs	r2, #61	; 0x3d
 8001e76:	2101      	movs	r1, #1
 8001e78:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001e7a:	2300      	movs	r3, #0
}
 8001e7c:	0018      	movs	r0, r3
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	b002      	add	sp, #8
 8001e82:	bd80      	pop	{r7, pc}

08001e84 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b082      	sub	sp, #8
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001e8c:	46c0      	nop			; (mov r8, r8)
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	b002      	add	sp, #8
 8001e92:	bd80      	pop	{r7, pc}

08001e94 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b084      	sub	sp, #16
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
 8001e9c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d108      	bne.n	8001eb6 <HAL_TIM_PWM_Start+0x22>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	223e      	movs	r2, #62	; 0x3e
 8001ea8:	5c9b      	ldrb	r3, [r3, r2]
 8001eaa:	b2db      	uxtb	r3, r3
 8001eac:	3b01      	subs	r3, #1
 8001eae:	1e5a      	subs	r2, r3, #1
 8001eb0:	4193      	sbcs	r3, r2
 8001eb2:	b2db      	uxtb	r3, r3
 8001eb4:	e01f      	b.n	8001ef6 <HAL_TIM_PWM_Start+0x62>
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	2b04      	cmp	r3, #4
 8001eba:	d108      	bne.n	8001ece <HAL_TIM_PWM_Start+0x3a>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	223f      	movs	r2, #63	; 0x3f
 8001ec0:	5c9b      	ldrb	r3, [r3, r2]
 8001ec2:	b2db      	uxtb	r3, r3
 8001ec4:	3b01      	subs	r3, #1
 8001ec6:	1e5a      	subs	r2, r3, #1
 8001ec8:	4193      	sbcs	r3, r2
 8001eca:	b2db      	uxtb	r3, r3
 8001ecc:	e013      	b.n	8001ef6 <HAL_TIM_PWM_Start+0x62>
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	2b08      	cmp	r3, #8
 8001ed2:	d108      	bne.n	8001ee6 <HAL_TIM_PWM_Start+0x52>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2240      	movs	r2, #64	; 0x40
 8001ed8:	5c9b      	ldrb	r3, [r3, r2]
 8001eda:	b2db      	uxtb	r3, r3
 8001edc:	3b01      	subs	r3, #1
 8001ede:	1e5a      	subs	r2, r3, #1
 8001ee0:	4193      	sbcs	r3, r2
 8001ee2:	b2db      	uxtb	r3, r3
 8001ee4:	e007      	b.n	8001ef6 <HAL_TIM_PWM_Start+0x62>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2241      	movs	r2, #65	; 0x41
 8001eea:	5c9b      	ldrb	r3, [r3, r2]
 8001eec:	b2db      	uxtb	r3, r3
 8001eee:	3b01      	subs	r3, #1
 8001ef0:	1e5a      	subs	r2, r3, #1
 8001ef2:	4193      	sbcs	r3, r2
 8001ef4:	b2db      	uxtb	r3, r3
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d001      	beq.n	8001efe <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
 8001efc:	e06a      	b.n	8001fd4 <HAL_TIM_PWM_Start+0x140>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d104      	bne.n	8001f0e <HAL_TIM_PWM_Start+0x7a>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	223e      	movs	r2, #62	; 0x3e
 8001f08:	2102      	movs	r1, #2
 8001f0a:	5499      	strb	r1, [r3, r2]
 8001f0c:	e013      	b.n	8001f36 <HAL_TIM_PWM_Start+0xa2>
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	2b04      	cmp	r3, #4
 8001f12:	d104      	bne.n	8001f1e <HAL_TIM_PWM_Start+0x8a>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	223f      	movs	r2, #63	; 0x3f
 8001f18:	2102      	movs	r1, #2
 8001f1a:	5499      	strb	r1, [r3, r2]
 8001f1c:	e00b      	b.n	8001f36 <HAL_TIM_PWM_Start+0xa2>
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	2b08      	cmp	r3, #8
 8001f22:	d104      	bne.n	8001f2e <HAL_TIM_PWM_Start+0x9a>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2240      	movs	r2, #64	; 0x40
 8001f28:	2102      	movs	r1, #2
 8001f2a:	5499      	strb	r1, [r3, r2]
 8001f2c:	e003      	b.n	8001f36 <HAL_TIM_PWM_Start+0xa2>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2241      	movs	r2, #65	; 0x41
 8001f32:	2102      	movs	r1, #2
 8001f34:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	6839      	ldr	r1, [r7, #0]
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	0018      	movs	r0, r3
 8001f40:	f000 fcde 	bl	8002900 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a24      	ldr	r2, [pc, #144]	; (8001fdc <HAL_TIM_PWM_Start+0x148>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d009      	beq.n	8001f62 <HAL_TIM_PWM_Start+0xce>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a23      	ldr	r2, [pc, #140]	; (8001fe0 <HAL_TIM_PWM_Start+0x14c>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d004      	beq.n	8001f62 <HAL_TIM_PWM_Start+0xce>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a21      	ldr	r2, [pc, #132]	; (8001fe4 <HAL_TIM_PWM_Start+0x150>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d101      	bne.n	8001f66 <HAL_TIM_PWM_Start+0xd2>
 8001f62:	2301      	movs	r3, #1
 8001f64:	e000      	b.n	8001f68 <HAL_TIM_PWM_Start+0xd4>
 8001f66:	2300      	movs	r3, #0
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d008      	beq.n	8001f7e <HAL_TIM_PWM_Start+0xea>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	2180      	movs	r1, #128	; 0x80
 8001f78:	0209      	lsls	r1, r1, #8
 8001f7a:	430a      	orrs	r2, r1
 8001f7c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a16      	ldr	r2, [pc, #88]	; (8001fdc <HAL_TIM_PWM_Start+0x148>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d00a      	beq.n	8001f9e <HAL_TIM_PWM_Start+0x10a>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	2380      	movs	r3, #128	; 0x80
 8001f8e:	05db      	lsls	r3, r3, #23
 8001f90:	429a      	cmp	r2, r3
 8001f92:	d004      	beq.n	8001f9e <HAL_TIM_PWM_Start+0x10a>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a13      	ldr	r2, [pc, #76]	; (8001fe8 <HAL_TIM_PWM_Start+0x154>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d111      	bne.n	8001fc2 <HAL_TIM_PWM_Start+0x12e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	689b      	ldr	r3, [r3, #8]
 8001fa4:	2207      	movs	r2, #7
 8001fa6:	4013      	ands	r3, r2
 8001fa8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	2b06      	cmp	r3, #6
 8001fae:	d010      	beq.n	8001fd2 <HAL_TIM_PWM_Start+0x13e>
    {
      __HAL_TIM_ENABLE(htim);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	681a      	ldr	r2, [r3, #0]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	2101      	movs	r1, #1
 8001fbc:	430a      	orrs	r2, r1
 8001fbe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fc0:	e007      	b.n	8001fd2 <HAL_TIM_PWM_Start+0x13e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	2101      	movs	r1, #1
 8001fce:	430a      	orrs	r2, r1
 8001fd0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001fd2:	2300      	movs	r3, #0
}
 8001fd4:	0018      	movs	r0, r3
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	b004      	add	sp, #16
 8001fda:	bd80      	pop	{r7, pc}
 8001fdc:	40012c00 	.word	0x40012c00
 8001fe0:	40014400 	.word	0x40014400
 8001fe4:	40014800 	.word	0x40014800
 8001fe8:	40000400 	.word	0x40000400

08001fec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b086      	sub	sp, #24
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	60f8      	str	r0, [r7, #12]
 8001ff4:	60b9      	str	r1, [r7, #8]
 8001ff6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ff8:	2317      	movs	r3, #23
 8001ffa:	18fb      	adds	r3, r7, r3
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	223c      	movs	r2, #60	; 0x3c
 8002004:	5c9b      	ldrb	r3, [r3, r2]
 8002006:	2b01      	cmp	r3, #1
 8002008:	d101      	bne.n	800200e <HAL_TIM_PWM_ConfigChannel+0x22>
 800200a:	2302      	movs	r3, #2
 800200c:	e0ad      	b.n	800216a <HAL_TIM_PWM_ConfigChannel+0x17e>
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	223c      	movs	r2, #60	; 0x3c
 8002012:	2101      	movs	r1, #1
 8002014:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2b0c      	cmp	r3, #12
 800201a:	d100      	bne.n	800201e <HAL_TIM_PWM_ConfigChannel+0x32>
 800201c:	e076      	b.n	800210c <HAL_TIM_PWM_ConfigChannel+0x120>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2b0c      	cmp	r3, #12
 8002022:	d900      	bls.n	8002026 <HAL_TIM_PWM_ConfigChannel+0x3a>
 8002024:	e095      	b.n	8002152 <HAL_TIM_PWM_ConfigChannel+0x166>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2b08      	cmp	r3, #8
 800202a:	d04e      	beq.n	80020ca <HAL_TIM_PWM_ConfigChannel+0xde>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2b08      	cmp	r3, #8
 8002030:	d900      	bls.n	8002034 <HAL_TIM_PWM_ConfigChannel+0x48>
 8002032:	e08e      	b.n	8002152 <HAL_TIM_PWM_ConfigChannel+0x166>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d003      	beq.n	8002042 <HAL_TIM_PWM_ConfigChannel+0x56>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2b04      	cmp	r3, #4
 800203e:	d021      	beq.n	8002084 <HAL_TIM_PWM_ConfigChannel+0x98>
 8002040:	e087      	b.n	8002152 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	68ba      	ldr	r2, [r7, #8]
 8002048:	0011      	movs	r1, r2
 800204a:	0018      	movs	r0, r3
 800204c:	f000 f9de 	bl	800240c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	699a      	ldr	r2, [r3, #24]
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	2108      	movs	r1, #8
 800205c:	430a      	orrs	r2, r1
 800205e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	699a      	ldr	r2, [r3, #24]
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	2104      	movs	r1, #4
 800206c:	438a      	bics	r2, r1
 800206e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	6999      	ldr	r1, [r3, #24]
 8002076:	68bb      	ldr	r3, [r7, #8]
 8002078:	691a      	ldr	r2, [r3, #16]
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	430a      	orrs	r2, r1
 8002080:	619a      	str	r2, [r3, #24]
      break;
 8002082:	e06b      	b.n	800215c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	68ba      	ldr	r2, [r7, #8]
 800208a:	0011      	movs	r1, r2
 800208c:	0018      	movs	r0, r3
 800208e:	f000 fa3b 	bl	8002508 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	699a      	ldr	r2, [r3, #24]
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	2180      	movs	r1, #128	; 0x80
 800209e:	0109      	lsls	r1, r1, #4
 80020a0:	430a      	orrs	r2, r1
 80020a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	699a      	ldr	r2, [r3, #24]
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4931      	ldr	r1, [pc, #196]	; (8002174 <HAL_TIM_PWM_ConfigChannel+0x188>)
 80020b0:	400a      	ands	r2, r1
 80020b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	6999      	ldr	r1, [r3, #24]
 80020ba:	68bb      	ldr	r3, [r7, #8]
 80020bc:	691b      	ldr	r3, [r3, #16]
 80020be:	021a      	lsls	r2, r3, #8
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	430a      	orrs	r2, r1
 80020c6:	619a      	str	r2, [r3, #24]
      break;
 80020c8:	e048      	b.n	800215c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	68ba      	ldr	r2, [r7, #8]
 80020d0:	0011      	movs	r1, r2
 80020d2:	0018      	movs	r0, r3
 80020d4:	f000 fa96 	bl	8002604 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	69da      	ldr	r2, [r3, #28]
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	2108      	movs	r1, #8
 80020e4:	430a      	orrs	r2, r1
 80020e6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	69da      	ldr	r2, [r3, #28]
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	2104      	movs	r1, #4
 80020f4:	438a      	bics	r2, r1
 80020f6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	69d9      	ldr	r1, [r3, #28]
 80020fe:	68bb      	ldr	r3, [r7, #8]
 8002100:	691a      	ldr	r2, [r3, #16]
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	430a      	orrs	r2, r1
 8002108:	61da      	str	r2, [r3, #28]
      break;
 800210a:	e027      	b.n	800215c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	68ba      	ldr	r2, [r7, #8]
 8002112:	0011      	movs	r1, r2
 8002114:	0018      	movs	r0, r3
 8002116:	f000 faf5 	bl	8002704 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	69da      	ldr	r2, [r3, #28]
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	2180      	movs	r1, #128	; 0x80
 8002126:	0109      	lsls	r1, r1, #4
 8002128:	430a      	orrs	r2, r1
 800212a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	69da      	ldr	r2, [r3, #28]
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	490f      	ldr	r1, [pc, #60]	; (8002174 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8002138:	400a      	ands	r2, r1
 800213a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	69d9      	ldr	r1, [r3, #28]
 8002142:	68bb      	ldr	r3, [r7, #8]
 8002144:	691b      	ldr	r3, [r3, #16]
 8002146:	021a      	lsls	r2, r3, #8
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	430a      	orrs	r2, r1
 800214e:	61da      	str	r2, [r3, #28]
      break;
 8002150:	e004      	b.n	800215c <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8002152:	2317      	movs	r3, #23
 8002154:	18fb      	adds	r3, r7, r3
 8002156:	2201      	movs	r2, #1
 8002158:	701a      	strb	r2, [r3, #0]
      break;
 800215a:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	223c      	movs	r2, #60	; 0x3c
 8002160:	2100      	movs	r1, #0
 8002162:	5499      	strb	r1, [r3, r2]

  return status;
 8002164:	2317      	movs	r3, #23
 8002166:	18fb      	adds	r3, r7, r3
 8002168:	781b      	ldrb	r3, [r3, #0]
}
 800216a:	0018      	movs	r0, r3
 800216c:	46bd      	mov	sp, r7
 800216e:	b006      	add	sp, #24
 8002170:	bd80      	pop	{r7, pc}
 8002172:	46c0      	nop			; (mov r8, r8)
 8002174:	fffffbff 	.word	0xfffffbff

08002178 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b084      	sub	sp, #16
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
 8002180:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002182:	230f      	movs	r3, #15
 8002184:	18fb      	adds	r3, r7, r3
 8002186:	2200      	movs	r2, #0
 8002188:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	223c      	movs	r2, #60	; 0x3c
 800218e:	5c9b      	ldrb	r3, [r3, r2]
 8002190:	2b01      	cmp	r3, #1
 8002192:	d101      	bne.n	8002198 <HAL_TIM_ConfigClockSource+0x20>
 8002194:	2302      	movs	r3, #2
 8002196:	e0bc      	b.n	8002312 <HAL_TIM_ConfigClockSource+0x19a>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	223c      	movs	r2, #60	; 0x3c
 800219c:	2101      	movs	r1, #1
 800219e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	223d      	movs	r2, #61	; 0x3d
 80021a4:	2102      	movs	r1, #2
 80021a6:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	2277      	movs	r2, #119	; 0x77
 80021b4:	4393      	bics	r3, r2
 80021b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	4a58      	ldr	r2, [pc, #352]	; (800231c <HAL_TIM_ConfigClockSource+0x1a4>)
 80021bc:	4013      	ands	r3, r2
 80021be:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	68ba      	ldr	r2, [r7, #8]
 80021c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	2280      	movs	r2, #128	; 0x80
 80021ce:	0192      	lsls	r2, r2, #6
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d040      	beq.n	8002256 <HAL_TIM_ConfigClockSource+0xde>
 80021d4:	2280      	movs	r2, #128	; 0x80
 80021d6:	0192      	lsls	r2, r2, #6
 80021d8:	4293      	cmp	r3, r2
 80021da:	d900      	bls.n	80021de <HAL_TIM_ConfigClockSource+0x66>
 80021dc:	e088      	b.n	80022f0 <HAL_TIM_ConfigClockSource+0x178>
 80021de:	2280      	movs	r2, #128	; 0x80
 80021e0:	0152      	lsls	r2, r2, #5
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d100      	bne.n	80021e8 <HAL_TIM_ConfigClockSource+0x70>
 80021e6:	e088      	b.n	80022fa <HAL_TIM_ConfigClockSource+0x182>
 80021e8:	2280      	movs	r2, #128	; 0x80
 80021ea:	0152      	lsls	r2, r2, #5
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d900      	bls.n	80021f2 <HAL_TIM_ConfigClockSource+0x7a>
 80021f0:	e07e      	b.n	80022f0 <HAL_TIM_ConfigClockSource+0x178>
 80021f2:	2b70      	cmp	r3, #112	; 0x70
 80021f4:	d018      	beq.n	8002228 <HAL_TIM_ConfigClockSource+0xb0>
 80021f6:	d900      	bls.n	80021fa <HAL_TIM_ConfigClockSource+0x82>
 80021f8:	e07a      	b.n	80022f0 <HAL_TIM_ConfigClockSource+0x178>
 80021fa:	2b60      	cmp	r3, #96	; 0x60
 80021fc:	d04f      	beq.n	800229e <HAL_TIM_ConfigClockSource+0x126>
 80021fe:	d900      	bls.n	8002202 <HAL_TIM_ConfigClockSource+0x8a>
 8002200:	e076      	b.n	80022f0 <HAL_TIM_ConfigClockSource+0x178>
 8002202:	2b50      	cmp	r3, #80	; 0x50
 8002204:	d03b      	beq.n	800227e <HAL_TIM_ConfigClockSource+0x106>
 8002206:	d900      	bls.n	800220a <HAL_TIM_ConfigClockSource+0x92>
 8002208:	e072      	b.n	80022f0 <HAL_TIM_ConfigClockSource+0x178>
 800220a:	2b40      	cmp	r3, #64	; 0x40
 800220c:	d057      	beq.n	80022be <HAL_TIM_ConfigClockSource+0x146>
 800220e:	d900      	bls.n	8002212 <HAL_TIM_ConfigClockSource+0x9a>
 8002210:	e06e      	b.n	80022f0 <HAL_TIM_ConfigClockSource+0x178>
 8002212:	2b30      	cmp	r3, #48	; 0x30
 8002214:	d063      	beq.n	80022de <HAL_TIM_ConfigClockSource+0x166>
 8002216:	d86b      	bhi.n	80022f0 <HAL_TIM_ConfigClockSource+0x178>
 8002218:	2b20      	cmp	r3, #32
 800221a:	d060      	beq.n	80022de <HAL_TIM_ConfigClockSource+0x166>
 800221c:	d868      	bhi.n	80022f0 <HAL_TIM_ConfigClockSource+0x178>
 800221e:	2b00      	cmp	r3, #0
 8002220:	d05d      	beq.n	80022de <HAL_TIM_ConfigClockSource+0x166>
 8002222:	2b10      	cmp	r3, #16
 8002224:	d05b      	beq.n	80022de <HAL_TIM_ConfigClockSource+0x166>
 8002226:	e063      	b.n	80022f0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6818      	ldr	r0, [r3, #0]
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	6899      	ldr	r1, [r3, #8]
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	685a      	ldr	r2, [r3, #4]
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	68db      	ldr	r3, [r3, #12]
 8002238:	f000 fb42 	bl	80028c0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	689b      	ldr	r3, [r3, #8]
 8002242:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	2277      	movs	r2, #119	; 0x77
 8002248:	4313      	orrs	r3, r2
 800224a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	68ba      	ldr	r2, [r7, #8]
 8002252:	609a      	str	r2, [r3, #8]
      break;
 8002254:	e052      	b.n	80022fc <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6818      	ldr	r0, [r3, #0]
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	6899      	ldr	r1, [r3, #8]
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	685a      	ldr	r2, [r3, #4]
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	68db      	ldr	r3, [r3, #12]
 8002266:	f000 fb2b 	bl	80028c0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	689a      	ldr	r2, [r3, #8]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	2180      	movs	r1, #128	; 0x80
 8002276:	01c9      	lsls	r1, r1, #7
 8002278:	430a      	orrs	r2, r1
 800227a:	609a      	str	r2, [r3, #8]
      break;
 800227c:	e03e      	b.n	80022fc <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6818      	ldr	r0, [r3, #0]
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	6859      	ldr	r1, [r3, #4]
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	68db      	ldr	r3, [r3, #12]
 800228a:	001a      	movs	r2, r3
 800228c:	f000 fa9e 	bl	80027cc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	2150      	movs	r1, #80	; 0x50
 8002296:	0018      	movs	r0, r3
 8002298:	f000 faf8 	bl	800288c <TIM_ITRx_SetConfig>
      break;
 800229c:	e02e      	b.n	80022fc <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6818      	ldr	r0, [r3, #0]
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	6859      	ldr	r1, [r3, #4]
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	68db      	ldr	r3, [r3, #12]
 80022aa:	001a      	movs	r2, r3
 80022ac:	f000 fabc 	bl	8002828 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	2160      	movs	r1, #96	; 0x60
 80022b6:	0018      	movs	r0, r3
 80022b8:	f000 fae8 	bl	800288c <TIM_ITRx_SetConfig>
      break;
 80022bc:	e01e      	b.n	80022fc <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6818      	ldr	r0, [r3, #0]
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	6859      	ldr	r1, [r3, #4]
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	68db      	ldr	r3, [r3, #12]
 80022ca:	001a      	movs	r2, r3
 80022cc:	f000 fa7e 	bl	80027cc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	2140      	movs	r1, #64	; 0x40
 80022d6:	0018      	movs	r0, r3
 80022d8:	f000 fad8 	bl	800288c <TIM_ITRx_SetConfig>
      break;
 80022dc:	e00e      	b.n	80022fc <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681a      	ldr	r2, [r3, #0]
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	0019      	movs	r1, r3
 80022e8:	0010      	movs	r0, r2
 80022ea:	f000 facf 	bl	800288c <TIM_ITRx_SetConfig>
      break;
 80022ee:	e005      	b.n	80022fc <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80022f0:	230f      	movs	r3, #15
 80022f2:	18fb      	adds	r3, r7, r3
 80022f4:	2201      	movs	r2, #1
 80022f6:	701a      	strb	r2, [r3, #0]
      break;
 80022f8:	e000      	b.n	80022fc <HAL_TIM_ConfigClockSource+0x184>
      break;
 80022fa:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	223d      	movs	r2, #61	; 0x3d
 8002300:	2101      	movs	r1, #1
 8002302:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	223c      	movs	r2, #60	; 0x3c
 8002308:	2100      	movs	r1, #0
 800230a:	5499      	strb	r1, [r3, r2]

  return status;
 800230c:	230f      	movs	r3, #15
 800230e:	18fb      	adds	r3, r7, r3
 8002310:	781b      	ldrb	r3, [r3, #0]
}
 8002312:	0018      	movs	r0, r3
 8002314:	46bd      	mov	sp, r7
 8002316:	b004      	add	sp, #16
 8002318:	bd80      	pop	{r7, pc}
 800231a:	46c0      	nop			; (mov r8, r8)
 800231c:	ffff00ff 	.word	0xffff00ff

08002320 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b084      	sub	sp, #16
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
 8002328:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	4a30      	ldr	r2, [pc, #192]	; (80023f4 <TIM_Base_SetConfig+0xd4>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d008      	beq.n	800234a <TIM_Base_SetConfig+0x2a>
 8002338:	687a      	ldr	r2, [r7, #4]
 800233a:	2380      	movs	r3, #128	; 0x80
 800233c:	05db      	lsls	r3, r3, #23
 800233e:	429a      	cmp	r2, r3
 8002340:	d003      	beq.n	800234a <TIM_Base_SetConfig+0x2a>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	4a2c      	ldr	r2, [pc, #176]	; (80023f8 <TIM_Base_SetConfig+0xd8>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d108      	bne.n	800235c <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	2270      	movs	r2, #112	; 0x70
 800234e:	4393      	bics	r3, r2
 8002350:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	68fa      	ldr	r2, [r7, #12]
 8002358:	4313      	orrs	r3, r2
 800235a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	4a25      	ldr	r2, [pc, #148]	; (80023f4 <TIM_Base_SetConfig+0xd4>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d014      	beq.n	800238e <TIM_Base_SetConfig+0x6e>
 8002364:	687a      	ldr	r2, [r7, #4]
 8002366:	2380      	movs	r3, #128	; 0x80
 8002368:	05db      	lsls	r3, r3, #23
 800236a:	429a      	cmp	r2, r3
 800236c:	d00f      	beq.n	800238e <TIM_Base_SetConfig+0x6e>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	4a21      	ldr	r2, [pc, #132]	; (80023f8 <TIM_Base_SetConfig+0xd8>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d00b      	beq.n	800238e <TIM_Base_SetConfig+0x6e>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	4a20      	ldr	r2, [pc, #128]	; (80023fc <TIM_Base_SetConfig+0xdc>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d007      	beq.n	800238e <TIM_Base_SetConfig+0x6e>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	4a1f      	ldr	r2, [pc, #124]	; (8002400 <TIM_Base_SetConfig+0xe0>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d003      	beq.n	800238e <TIM_Base_SetConfig+0x6e>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	4a1e      	ldr	r2, [pc, #120]	; (8002404 <TIM_Base_SetConfig+0xe4>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d108      	bne.n	80023a0 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	4a1d      	ldr	r2, [pc, #116]	; (8002408 <TIM_Base_SetConfig+0xe8>)
 8002392:	4013      	ands	r3, r2
 8002394:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	68db      	ldr	r3, [r3, #12]
 800239a:	68fa      	ldr	r2, [r7, #12]
 800239c:	4313      	orrs	r3, r2
 800239e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	2280      	movs	r2, #128	; 0x80
 80023a4:	4393      	bics	r3, r2
 80023a6:	001a      	movs	r2, r3
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	695b      	ldr	r3, [r3, #20]
 80023ac:	4313      	orrs	r3, r2
 80023ae:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	68fa      	ldr	r2, [r7, #12]
 80023b4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	689a      	ldr	r2, [r3, #8]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	681a      	ldr	r2, [r3, #0]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	4a0a      	ldr	r2, [pc, #40]	; (80023f4 <TIM_Base_SetConfig+0xd4>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d007      	beq.n	80023de <TIM_Base_SetConfig+0xbe>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	4a0b      	ldr	r2, [pc, #44]	; (8002400 <TIM_Base_SetConfig+0xe0>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d003      	beq.n	80023de <TIM_Base_SetConfig+0xbe>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	4a0a      	ldr	r2, [pc, #40]	; (8002404 <TIM_Base_SetConfig+0xe4>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d103      	bne.n	80023e6 <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	691a      	ldr	r2, [r3, #16]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2201      	movs	r2, #1
 80023ea:	615a      	str	r2, [r3, #20]
}
 80023ec:	46c0      	nop			; (mov r8, r8)
 80023ee:	46bd      	mov	sp, r7
 80023f0:	b004      	add	sp, #16
 80023f2:	bd80      	pop	{r7, pc}
 80023f4:	40012c00 	.word	0x40012c00
 80023f8:	40000400 	.word	0x40000400
 80023fc:	40002000 	.word	0x40002000
 8002400:	40014400 	.word	0x40014400
 8002404:	40014800 	.word	0x40014800
 8002408:	fffffcff 	.word	0xfffffcff

0800240c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b086      	sub	sp, #24
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
 8002414:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6a1b      	ldr	r3, [r3, #32]
 800241a:	2201      	movs	r2, #1
 800241c:	4393      	bics	r3, r2
 800241e:	001a      	movs	r2, r3
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6a1b      	ldr	r3, [r3, #32]
 8002428:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	699b      	ldr	r3, [r3, #24]
 8002434:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	2270      	movs	r2, #112	; 0x70
 800243a:	4393      	bics	r3, r2
 800243c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	2203      	movs	r2, #3
 8002442:	4393      	bics	r3, r2
 8002444:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	68fa      	ldr	r2, [r7, #12]
 800244c:	4313      	orrs	r3, r2
 800244e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	2202      	movs	r2, #2
 8002454:	4393      	bics	r3, r2
 8002456:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	689b      	ldr	r3, [r3, #8]
 800245c:	697a      	ldr	r2, [r7, #20]
 800245e:	4313      	orrs	r3, r2
 8002460:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	4a23      	ldr	r2, [pc, #140]	; (80024f4 <TIM_OC1_SetConfig+0xe8>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d007      	beq.n	800247a <TIM_OC1_SetConfig+0x6e>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	4a22      	ldr	r2, [pc, #136]	; (80024f8 <TIM_OC1_SetConfig+0xec>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d003      	beq.n	800247a <TIM_OC1_SetConfig+0x6e>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	4a21      	ldr	r2, [pc, #132]	; (80024fc <TIM_OC1_SetConfig+0xf0>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d10c      	bne.n	8002494 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800247a:	697b      	ldr	r3, [r7, #20]
 800247c:	2208      	movs	r2, #8
 800247e:	4393      	bics	r3, r2
 8002480:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	68db      	ldr	r3, [r3, #12]
 8002486:	697a      	ldr	r2, [r7, #20]
 8002488:	4313      	orrs	r3, r2
 800248a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	2204      	movs	r2, #4
 8002490:	4393      	bics	r3, r2
 8002492:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	4a17      	ldr	r2, [pc, #92]	; (80024f4 <TIM_OC1_SetConfig+0xe8>)
 8002498:	4293      	cmp	r3, r2
 800249a:	d007      	beq.n	80024ac <TIM_OC1_SetConfig+0xa0>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	4a16      	ldr	r2, [pc, #88]	; (80024f8 <TIM_OC1_SetConfig+0xec>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d003      	beq.n	80024ac <TIM_OC1_SetConfig+0xa0>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	4a15      	ldr	r2, [pc, #84]	; (80024fc <TIM_OC1_SetConfig+0xf0>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d111      	bne.n	80024d0 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	4a14      	ldr	r2, [pc, #80]	; (8002500 <TIM_OC1_SetConfig+0xf4>)
 80024b0:	4013      	ands	r3, r2
 80024b2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	4a13      	ldr	r2, [pc, #76]	; (8002504 <TIM_OC1_SetConfig+0xf8>)
 80024b8:	4013      	ands	r3, r2
 80024ba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	695b      	ldr	r3, [r3, #20]
 80024c0:	693a      	ldr	r2, [r7, #16]
 80024c2:	4313      	orrs	r3, r2
 80024c4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	699b      	ldr	r3, [r3, #24]
 80024ca:	693a      	ldr	r2, [r7, #16]
 80024cc:	4313      	orrs	r3, r2
 80024ce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	693a      	ldr	r2, [r7, #16]
 80024d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	68fa      	ldr	r2, [r7, #12]
 80024da:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	685a      	ldr	r2, [r3, #4]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	697a      	ldr	r2, [r7, #20]
 80024e8:	621a      	str	r2, [r3, #32]
}
 80024ea:	46c0      	nop			; (mov r8, r8)
 80024ec:	46bd      	mov	sp, r7
 80024ee:	b006      	add	sp, #24
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	46c0      	nop			; (mov r8, r8)
 80024f4:	40012c00 	.word	0x40012c00
 80024f8:	40014400 	.word	0x40014400
 80024fc:	40014800 	.word	0x40014800
 8002500:	fffffeff 	.word	0xfffffeff
 8002504:	fffffdff 	.word	0xfffffdff

08002508 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b086      	sub	sp, #24
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
 8002510:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6a1b      	ldr	r3, [r3, #32]
 8002516:	2210      	movs	r2, #16
 8002518:	4393      	bics	r3, r2
 800251a:	001a      	movs	r2, r3
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6a1b      	ldr	r3, [r3, #32]
 8002524:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	699b      	ldr	r3, [r3, #24]
 8002530:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	4a2c      	ldr	r2, [pc, #176]	; (80025e8 <TIM_OC2_SetConfig+0xe0>)
 8002536:	4013      	ands	r3, r2
 8002538:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	4a2b      	ldr	r2, [pc, #172]	; (80025ec <TIM_OC2_SetConfig+0xe4>)
 800253e:	4013      	ands	r3, r2
 8002540:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	021b      	lsls	r3, r3, #8
 8002548:	68fa      	ldr	r2, [r7, #12]
 800254a:	4313      	orrs	r3, r2
 800254c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	2220      	movs	r2, #32
 8002552:	4393      	bics	r3, r2
 8002554:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	011b      	lsls	r3, r3, #4
 800255c:	697a      	ldr	r2, [r7, #20]
 800255e:	4313      	orrs	r3, r2
 8002560:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	4a22      	ldr	r2, [pc, #136]	; (80025f0 <TIM_OC2_SetConfig+0xe8>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d10d      	bne.n	8002586 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	2280      	movs	r2, #128	; 0x80
 800256e:	4393      	bics	r3, r2
 8002570:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	68db      	ldr	r3, [r3, #12]
 8002576:	011b      	lsls	r3, r3, #4
 8002578:	697a      	ldr	r2, [r7, #20]
 800257a:	4313      	orrs	r3, r2
 800257c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	2240      	movs	r2, #64	; 0x40
 8002582:	4393      	bics	r3, r2
 8002584:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	4a19      	ldr	r2, [pc, #100]	; (80025f0 <TIM_OC2_SetConfig+0xe8>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d007      	beq.n	800259e <TIM_OC2_SetConfig+0x96>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	4a18      	ldr	r2, [pc, #96]	; (80025f4 <TIM_OC2_SetConfig+0xec>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d003      	beq.n	800259e <TIM_OC2_SetConfig+0x96>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	4a17      	ldr	r2, [pc, #92]	; (80025f8 <TIM_OC2_SetConfig+0xf0>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d113      	bne.n	80025c6 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	4a16      	ldr	r2, [pc, #88]	; (80025fc <TIM_OC2_SetConfig+0xf4>)
 80025a2:	4013      	ands	r3, r2
 80025a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	4a15      	ldr	r2, [pc, #84]	; (8002600 <TIM_OC2_SetConfig+0xf8>)
 80025aa:	4013      	ands	r3, r2
 80025ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	695b      	ldr	r3, [r3, #20]
 80025b2:	009b      	lsls	r3, r3, #2
 80025b4:	693a      	ldr	r2, [r7, #16]
 80025b6:	4313      	orrs	r3, r2
 80025b8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	699b      	ldr	r3, [r3, #24]
 80025be:	009b      	lsls	r3, r3, #2
 80025c0:	693a      	ldr	r2, [r7, #16]
 80025c2:	4313      	orrs	r3, r2
 80025c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	693a      	ldr	r2, [r7, #16]
 80025ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	68fa      	ldr	r2, [r7, #12]
 80025d0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	685a      	ldr	r2, [r3, #4]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	697a      	ldr	r2, [r7, #20]
 80025de:	621a      	str	r2, [r3, #32]
}
 80025e0:	46c0      	nop			; (mov r8, r8)
 80025e2:	46bd      	mov	sp, r7
 80025e4:	b006      	add	sp, #24
 80025e6:	bd80      	pop	{r7, pc}
 80025e8:	ffff8fff 	.word	0xffff8fff
 80025ec:	fffffcff 	.word	0xfffffcff
 80025f0:	40012c00 	.word	0x40012c00
 80025f4:	40014400 	.word	0x40014400
 80025f8:	40014800 	.word	0x40014800
 80025fc:	fffffbff 	.word	0xfffffbff
 8002600:	fffff7ff 	.word	0xfffff7ff

08002604 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b086      	sub	sp, #24
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
 800260c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6a1b      	ldr	r3, [r3, #32]
 8002612:	4a33      	ldr	r2, [pc, #204]	; (80026e0 <TIM_OC3_SetConfig+0xdc>)
 8002614:	401a      	ands	r2, r3
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6a1b      	ldr	r3, [r3, #32]
 800261e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	69db      	ldr	r3, [r3, #28]
 800262a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	2270      	movs	r2, #112	; 0x70
 8002630:	4393      	bics	r3, r2
 8002632:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	2203      	movs	r2, #3
 8002638:	4393      	bics	r3, r2
 800263a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	68fa      	ldr	r2, [r7, #12]
 8002642:	4313      	orrs	r3, r2
 8002644:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	4a26      	ldr	r2, [pc, #152]	; (80026e4 <TIM_OC3_SetConfig+0xe0>)
 800264a:	4013      	ands	r3, r2
 800264c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	689b      	ldr	r3, [r3, #8]
 8002652:	021b      	lsls	r3, r3, #8
 8002654:	697a      	ldr	r2, [r7, #20]
 8002656:	4313      	orrs	r3, r2
 8002658:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	4a22      	ldr	r2, [pc, #136]	; (80026e8 <TIM_OC3_SetConfig+0xe4>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d10d      	bne.n	800267e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002662:	697b      	ldr	r3, [r7, #20]
 8002664:	4a21      	ldr	r2, [pc, #132]	; (80026ec <TIM_OC3_SetConfig+0xe8>)
 8002666:	4013      	ands	r3, r2
 8002668:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	68db      	ldr	r3, [r3, #12]
 800266e:	021b      	lsls	r3, r3, #8
 8002670:	697a      	ldr	r2, [r7, #20]
 8002672:	4313      	orrs	r3, r2
 8002674:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	4a1d      	ldr	r2, [pc, #116]	; (80026f0 <TIM_OC3_SetConfig+0xec>)
 800267a:	4013      	ands	r3, r2
 800267c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	4a19      	ldr	r2, [pc, #100]	; (80026e8 <TIM_OC3_SetConfig+0xe4>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d007      	beq.n	8002696 <TIM_OC3_SetConfig+0x92>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	4a1a      	ldr	r2, [pc, #104]	; (80026f4 <TIM_OC3_SetConfig+0xf0>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d003      	beq.n	8002696 <TIM_OC3_SetConfig+0x92>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	4a19      	ldr	r2, [pc, #100]	; (80026f8 <TIM_OC3_SetConfig+0xf4>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d113      	bne.n	80026be <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	4a18      	ldr	r2, [pc, #96]	; (80026fc <TIM_OC3_SetConfig+0xf8>)
 800269a:	4013      	ands	r3, r2
 800269c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	4a17      	ldr	r2, [pc, #92]	; (8002700 <TIM_OC3_SetConfig+0xfc>)
 80026a2:	4013      	ands	r3, r2
 80026a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	695b      	ldr	r3, [r3, #20]
 80026aa:	011b      	lsls	r3, r3, #4
 80026ac:	693a      	ldr	r2, [r7, #16]
 80026ae:	4313      	orrs	r3, r2
 80026b0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	699b      	ldr	r3, [r3, #24]
 80026b6:	011b      	lsls	r3, r3, #4
 80026b8:	693a      	ldr	r2, [r7, #16]
 80026ba:	4313      	orrs	r3, r2
 80026bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	693a      	ldr	r2, [r7, #16]
 80026c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	68fa      	ldr	r2, [r7, #12]
 80026c8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	685a      	ldr	r2, [r3, #4]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	697a      	ldr	r2, [r7, #20]
 80026d6:	621a      	str	r2, [r3, #32]
}
 80026d8:	46c0      	nop			; (mov r8, r8)
 80026da:	46bd      	mov	sp, r7
 80026dc:	b006      	add	sp, #24
 80026de:	bd80      	pop	{r7, pc}
 80026e0:	fffffeff 	.word	0xfffffeff
 80026e4:	fffffdff 	.word	0xfffffdff
 80026e8:	40012c00 	.word	0x40012c00
 80026ec:	fffff7ff 	.word	0xfffff7ff
 80026f0:	fffffbff 	.word	0xfffffbff
 80026f4:	40014400 	.word	0x40014400
 80026f8:	40014800 	.word	0x40014800
 80026fc:	ffffefff 	.word	0xffffefff
 8002700:	ffffdfff 	.word	0xffffdfff

08002704 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b086      	sub	sp, #24
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
 800270c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6a1b      	ldr	r3, [r3, #32]
 8002712:	4a26      	ldr	r2, [pc, #152]	; (80027ac <TIM_OC4_SetConfig+0xa8>)
 8002714:	401a      	ands	r2, r3
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6a1b      	ldr	r3, [r3, #32]
 800271e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	69db      	ldr	r3, [r3, #28]
 800272a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	4a20      	ldr	r2, [pc, #128]	; (80027b0 <TIM_OC4_SetConfig+0xac>)
 8002730:	4013      	ands	r3, r2
 8002732:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	4a1f      	ldr	r2, [pc, #124]	; (80027b4 <TIM_OC4_SetConfig+0xb0>)
 8002738:	4013      	ands	r3, r2
 800273a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	021b      	lsls	r3, r3, #8
 8002742:	68fa      	ldr	r2, [r7, #12]
 8002744:	4313      	orrs	r3, r2
 8002746:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	4a1b      	ldr	r2, [pc, #108]	; (80027b8 <TIM_OC4_SetConfig+0xb4>)
 800274c:	4013      	ands	r3, r2
 800274e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	689b      	ldr	r3, [r3, #8]
 8002754:	031b      	lsls	r3, r3, #12
 8002756:	693a      	ldr	r2, [r7, #16]
 8002758:	4313      	orrs	r3, r2
 800275a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	4a17      	ldr	r2, [pc, #92]	; (80027bc <TIM_OC4_SetConfig+0xb8>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d007      	beq.n	8002774 <TIM_OC4_SetConfig+0x70>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	4a16      	ldr	r2, [pc, #88]	; (80027c0 <TIM_OC4_SetConfig+0xbc>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d003      	beq.n	8002774 <TIM_OC4_SetConfig+0x70>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	4a15      	ldr	r2, [pc, #84]	; (80027c4 <TIM_OC4_SetConfig+0xc0>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d109      	bne.n	8002788 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	4a14      	ldr	r2, [pc, #80]	; (80027c8 <TIM_OC4_SetConfig+0xc4>)
 8002778:	4013      	ands	r3, r2
 800277a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	695b      	ldr	r3, [r3, #20]
 8002780:	019b      	lsls	r3, r3, #6
 8002782:	697a      	ldr	r2, [r7, #20]
 8002784:	4313      	orrs	r3, r2
 8002786:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	697a      	ldr	r2, [r7, #20]
 800278c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	68fa      	ldr	r2, [r7, #12]
 8002792:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	685a      	ldr	r2, [r3, #4]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	693a      	ldr	r2, [r7, #16]
 80027a0:	621a      	str	r2, [r3, #32]
}
 80027a2:	46c0      	nop			; (mov r8, r8)
 80027a4:	46bd      	mov	sp, r7
 80027a6:	b006      	add	sp, #24
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	46c0      	nop			; (mov r8, r8)
 80027ac:	ffffefff 	.word	0xffffefff
 80027b0:	ffff8fff 	.word	0xffff8fff
 80027b4:	fffffcff 	.word	0xfffffcff
 80027b8:	ffffdfff 	.word	0xffffdfff
 80027bc:	40012c00 	.word	0x40012c00
 80027c0:	40014400 	.word	0x40014400
 80027c4:	40014800 	.word	0x40014800
 80027c8:	ffffbfff 	.word	0xffffbfff

080027cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b086      	sub	sp, #24
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	60f8      	str	r0, [r7, #12]
 80027d4:	60b9      	str	r1, [r7, #8]
 80027d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	6a1b      	ldr	r3, [r3, #32]
 80027dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	6a1b      	ldr	r3, [r3, #32]
 80027e2:	2201      	movs	r2, #1
 80027e4:	4393      	bics	r3, r2
 80027e6:	001a      	movs	r2, r3
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	699b      	ldr	r3, [r3, #24]
 80027f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	22f0      	movs	r2, #240	; 0xf0
 80027f6:	4393      	bics	r3, r2
 80027f8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	011b      	lsls	r3, r3, #4
 80027fe:	693a      	ldr	r2, [r7, #16]
 8002800:	4313      	orrs	r3, r2
 8002802:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	220a      	movs	r2, #10
 8002808:	4393      	bics	r3, r2
 800280a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800280c:	697a      	ldr	r2, [r7, #20]
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	4313      	orrs	r3, r2
 8002812:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	693a      	ldr	r2, [r7, #16]
 8002818:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	697a      	ldr	r2, [r7, #20]
 800281e:	621a      	str	r2, [r3, #32]
}
 8002820:	46c0      	nop			; (mov r8, r8)
 8002822:	46bd      	mov	sp, r7
 8002824:	b006      	add	sp, #24
 8002826:	bd80      	pop	{r7, pc}

08002828 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b086      	sub	sp, #24
 800282c:	af00      	add	r7, sp, #0
 800282e:	60f8      	str	r0, [r7, #12]
 8002830:	60b9      	str	r1, [r7, #8]
 8002832:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	6a1b      	ldr	r3, [r3, #32]
 8002838:	2210      	movs	r2, #16
 800283a:	4393      	bics	r3, r2
 800283c:	001a      	movs	r2, r3
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	699b      	ldr	r3, [r3, #24]
 8002846:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	6a1b      	ldr	r3, [r3, #32]
 800284c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	4a0d      	ldr	r2, [pc, #52]	; (8002888 <TIM_TI2_ConfigInputStage+0x60>)
 8002852:	4013      	ands	r3, r2
 8002854:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	031b      	lsls	r3, r3, #12
 800285a:	697a      	ldr	r2, [r7, #20]
 800285c:	4313      	orrs	r3, r2
 800285e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002860:	693b      	ldr	r3, [r7, #16]
 8002862:	22a0      	movs	r2, #160	; 0xa0
 8002864:	4393      	bics	r3, r2
 8002866:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	011b      	lsls	r3, r3, #4
 800286c:	693a      	ldr	r2, [r7, #16]
 800286e:	4313      	orrs	r3, r2
 8002870:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	697a      	ldr	r2, [r7, #20]
 8002876:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	693a      	ldr	r2, [r7, #16]
 800287c:	621a      	str	r2, [r3, #32]
}
 800287e:	46c0      	nop			; (mov r8, r8)
 8002880:	46bd      	mov	sp, r7
 8002882:	b006      	add	sp, #24
 8002884:	bd80      	pop	{r7, pc}
 8002886:	46c0      	nop			; (mov r8, r8)
 8002888:	ffff0fff 	.word	0xffff0fff

0800288c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b084      	sub	sp, #16
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
 8002894:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	689b      	ldr	r3, [r3, #8]
 800289a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	2270      	movs	r2, #112	; 0x70
 80028a0:	4393      	bics	r3, r2
 80028a2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80028a4:	683a      	ldr	r2, [r7, #0]
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	4313      	orrs	r3, r2
 80028aa:	2207      	movs	r2, #7
 80028ac:	4313      	orrs	r3, r2
 80028ae:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	68fa      	ldr	r2, [r7, #12]
 80028b4:	609a      	str	r2, [r3, #8]
}
 80028b6:	46c0      	nop			; (mov r8, r8)
 80028b8:	46bd      	mov	sp, r7
 80028ba:	b004      	add	sp, #16
 80028bc:	bd80      	pop	{r7, pc}
	...

080028c0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b086      	sub	sp, #24
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	60f8      	str	r0, [r7, #12]
 80028c8:	60b9      	str	r1, [r7, #8]
 80028ca:	607a      	str	r2, [r7, #4]
 80028cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	689b      	ldr	r3, [r3, #8]
 80028d2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	4a09      	ldr	r2, [pc, #36]	; (80028fc <TIM_ETR_SetConfig+0x3c>)
 80028d8:	4013      	ands	r3, r2
 80028da:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	021a      	lsls	r2, r3, #8
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	431a      	orrs	r2, r3
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	4313      	orrs	r3, r2
 80028e8:	697a      	ldr	r2, [r7, #20]
 80028ea:	4313      	orrs	r3, r2
 80028ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	697a      	ldr	r2, [r7, #20]
 80028f2:	609a      	str	r2, [r3, #8]
}
 80028f4:	46c0      	nop			; (mov r8, r8)
 80028f6:	46bd      	mov	sp, r7
 80028f8:	b006      	add	sp, #24
 80028fa:	bd80      	pop	{r7, pc}
 80028fc:	ffff00ff 	.word	0xffff00ff

08002900 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b086      	sub	sp, #24
 8002904:	af00      	add	r7, sp, #0
 8002906:	60f8      	str	r0, [r7, #12]
 8002908:	60b9      	str	r1, [r7, #8]
 800290a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	221f      	movs	r2, #31
 8002910:	4013      	ands	r3, r2
 8002912:	2201      	movs	r2, #1
 8002914:	409a      	lsls	r2, r3
 8002916:	0013      	movs	r3, r2
 8002918:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	6a1b      	ldr	r3, [r3, #32]
 800291e:	697a      	ldr	r2, [r7, #20]
 8002920:	43d2      	mvns	r2, r2
 8002922:	401a      	ands	r2, r3
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	6a1a      	ldr	r2, [r3, #32]
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	211f      	movs	r1, #31
 8002930:	400b      	ands	r3, r1
 8002932:	6879      	ldr	r1, [r7, #4]
 8002934:	4099      	lsls	r1, r3
 8002936:	000b      	movs	r3, r1
 8002938:	431a      	orrs	r2, r3
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	621a      	str	r2, [r3, #32]
}
 800293e:	46c0      	nop			; (mov r8, r8)
 8002940:	46bd      	mov	sp, r7
 8002942:	b006      	add	sp, #24
 8002944:	bd80      	pop	{r7, pc}
	...

08002948 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b084      	sub	sp, #16
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
 8002950:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	223c      	movs	r2, #60	; 0x3c
 8002956:	5c9b      	ldrb	r3, [r3, r2]
 8002958:	2b01      	cmp	r3, #1
 800295a:	d101      	bne.n	8002960 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800295c:	2302      	movs	r3, #2
 800295e:	e042      	b.n	80029e6 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	223c      	movs	r2, #60	; 0x3c
 8002964:	2101      	movs	r1, #1
 8002966:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	223d      	movs	r2, #61	; 0x3d
 800296c:	2102      	movs	r1, #2
 800296e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	689b      	ldr	r3, [r3, #8]
 800297e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	2270      	movs	r2, #112	; 0x70
 8002984:	4393      	bics	r3, r2
 8002986:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	68fa      	ldr	r2, [r7, #12]
 800298e:	4313      	orrs	r3, r2
 8002990:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	68fa      	ldr	r2, [r7, #12]
 8002998:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4a14      	ldr	r2, [pc, #80]	; (80029f0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d00a      	beq.n	80029ba <HAL_TIMEx_MasterConfigSynchronization+0x72>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681a      	ldr	r2, [r3, #0]
 80029a8:	2380      	movs	r3, #128	; 0x80
 80029aa:	05db      	lsls	r3, r3, #23
 80029ac:	429a      	cmp	r2, r3
 80029ae:	d004      	beq.n	80029ba <HAL_TIMEx_MasterConfigSynchronization+0x72>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a0f      	ldr	r2, [pc, #60]	; (80029f4 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d10c      	bne.n	80029d4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80029ba:	68bb      	ldr	r3, [r7, #8]
 80029bc:	2280      	movs	r2, #128	; 0x80
 80029be:	4393      	bics	r3, r2
 80029c0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	68ba      	ldr	r2, [r7, #8]
 80029c8:	4313      	orrs	r3, r2
 80029ca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	68ba      	ldr	r2, [r7, #8]
 80029d2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	223d      	movs	r2, #61	; 0x3d
 80029d8:	2101      	movs	r1, #1
 80029da:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	223c      	movs	r2, #60	; 0x3c
 80029e0:	2100      	movs	r1, #0
 80029e2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80029e4:	2300      	movs	r3, #0
}
 80029e6:	0018      	movs	r0, r3
 80029e8:	46bd      	mov	sp, r7
 80029ea:	b004      	add	sp, #16
 80029ec:	bd80      	pop	{r7, pc}
 80029ee:	46c0      	nop			; (mov r8, r8)
 80029f0:	40012c00 	.word	0x40012c00
 80029f4:	40000400 	.word	0x40000400

080029f8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b082      	sub	sp, #8
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d101      	bne.n	8002a0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	e044      	b.n	8002a94 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d107      	bne.n	8002a22 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2274      	movs	r2, #116	; 0x74
 8002a16:	2100      	movs	r1, #0
 8002a18:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	0018      	movs	r0, r3
 8002a1e:	f7fd fe53 	bl	80006c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2224      	movs	r2, #36	; 0x24
 8002a26:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	2101      	movs	r1, #1
 8002a34:	438a      	bics	r2, r1
 8002a36:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	0018      	movs	r0, r3
 8002a3c:	f000 fb8e 	bl	800315c <UART_SetConfig>
 8002a40:	0003      	movs	r3, r0
 8002a42:	2b01      	cmp	r3, #1
 8002a44:	d101      	bne.n	8002a4a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	e024      	b.n	8002a94 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d003      	beq.n	8002a5a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	0018      	movs	r0, r3
 8002a56:	f000 fcc1 	bl	80033dc <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	685a      	ldr	r2, [r3, #4]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	490d      	ldr	r1, [pc, #52]	; (8002a9c <HAL_UART_Init+0xa4>)
 8002a66:	400a      	ands	r2, r1
 8002a68:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	689a      	ldr	r2, [r3, #8]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	212a      	movs	r1, #42	; 0x2a
 8002a76:	438a      	bics	r2, r1
 8002a78:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	2101      	movs	r1, #1
 8002a86:	430a      	orrs	r2, r1
 8002a88:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	0018      	movs	r0, r3
 8002a8e:	f000 fd59 	bl	8003544 <UART_CheckIdleState>
 8002a92:	0003      	movs	r3, r0
}
 8002a94:	0018      	movs	r0, r3
 8002a96:	46bd      	mov	sp, r7
 8002a98:	b002      	add	sp, #8
 8002a9a:	bd80      	pop	{r7, pc}
 8002a9c:	ffffb7ff 	.word	0xffffb7ff

08002aa0 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b088      	sub	sp, #32
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	60f8      	str	r0, [r7, #12]
 8002aa8:	60b9      	str	r1, [r7, #8]
 8002aaa:	1dbb      	adds	r3, r7, #6
 8002aac:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ab2:	2b20      	cmp	r3, #32
 8002ab4:	d150      	bne.n	8002b58 <HAL_UART_Receive_DMA+0xb8>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d003      	beq.n	8002ac4 <HAL_UART_Receive_DMA+0x24>
 8002abc:	1dbb      	adds	r3, r7, #6
 8002abe:	881b      	ldrh	r3, [r3, #0]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d101      	bne.n	8002ac8 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	e048      	b.n	8002b5a <HAL_UART_Receive_DMA+0xba>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	689a      	ldr	r2, [r3, #8]
 8002acc:	2380      	movs	r3, #128	; 0x80
 8002ace:	015b      	lsls	r3, r3, #5
 8002ad0:	429a      	cmp	r2, r3
 8002ad2:	d109      	bne.n	8002ae8 <HAL_UART_Receive_DMA+0x48>
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	691b      	ldr	r3, [r3, #16]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d105      	bne.n	8002ae8 <HAL_UART_Receive_DMA+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	2201      	movs	r2, #1
 8002ae0:	4013      	ands	r3, r2
 8002ae2:	d001      	beq.n	8002ae8 <HAL_UART_Receive_DMA+0x48>
      {
        return  HAL_ERROR;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	e038      	b.n	8002b5a <HAL_UART_Receive_DMA+0xba>
      }
    }

    __HAL_LOCK(huart);
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	2274      	movs	r2, #116	; 0x74
 8002aec:	5c9b      	ldrb	r3, [r3, r2]
 8002aee:	2b01      	cmp	r3, #1
 8002af0:	d101      	bne.n	8002af6 <HAL_UART_Receive_DMA+0x56>
 8002af2:	2302      	movs	r3, #2
 8002af4:	e031      	b.n	8002b5a <HAL_UART_Receive_DMA+0xba>
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	2274      	movs	r2, #116	; 0x74
 8002afa:	2101      	movs	r1, #1
 8002afc:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	2200      	movs	r2, #0
 8002b02:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	685a      	ldr	r2, [r3, #4]
 8002b0a:	2380      	movs	r3, #128	; 0x80
 8002b0c:	041b      	lsls	r3, r3, #16
 8002b0e:	4013      	ands	r3, r2
 8002b10:	d019      	beq.n	8002b46 <HAL_UART_Receive_DMA+0xa6>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b12:	f3ef 8310 	mrs	r3, PRIMASK
 8002b16:	613b      	str	r3, [r7, #16]
  return(result);
 8002b18:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002b1a:	61fb      	str	r3, [r7, #28]
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	f383 8810 	msr	PRIMASK, r3
}
 8002b26:	46c0      	nop			; (mov r8, r8)
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	681a      	ldr	r2, [r3, #0]
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	2180      	movs	r1, #128	; 0x80
 8002b34:	04c9      	lsls	r1, r1, #19
 8002b36:	430a      	orrs	r2, r1
 8002b38:	601a      	str	r2, [r3, #0]
 8002b3a:	69fb      	ldr	r3, [r7, #28]
 8002b3c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b3e:	69bb      	ldr	r3, [r7, #24]
 8002b40:	f383 8810 	msr	PRIMASK, r3
}
 8002b44:	46c0      	nop			; (mov r8, r8)
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8002b46:	1dbb      	adds	r3, r7, #6
 8002b48:	881a      	ldrh	r2, [r3, #0]
 8002b4a:	68b9      	ldr	r1, [r7, #8]
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	0018      	movs	r0, r3
 8002b50:	f000 fe04 	bl	800375c <UART_Start_Receive_DMA>
 8002b54:	0003      	movs	r3, r0
 8002b56:	e000      	b.n	8002b5a <HAL_UART_Receive_DMA+0xba>
  }
  else
  {
    return HAL_BUSY;
 8002b58:	2302      	movs	r3, #2
  }
}
 8002b5a:	0018      	movs	r0, r3
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	b008      	add	sp, #32
 8002b60:	bd80      	pop	{r7, pc}
	...

08002b64 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002b64:	b590      	push	{r4, r7, lr}
 8002b66:	b0ab      	sub	sp, #172	; 0xac
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	69db      	ldr	r3, [r3, #28]
 8002b72:	22a4      	movs	r2, #164	; 0xa4
 8002b74:	18b9      	adds	r1, r7, r2
 8002b76:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	20a0      	movs	r0, #160	; 0xa0
 8002b80:	1839      	adds	r1, r7, r0
 8002b82:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	689b      	ldr	r3, [r3, #8]
 8002b8a:	219c      	movs	r1, #156	; 0x9c
 8002b8c:	1879      	adds	r1, r7, r1
 8002b8e:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002b90:	0011      	movs	r1, r2
 8002b92:	18bb      	adds	r3, r7, r2
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a99      	ldr	r2, [pc, #612]	; (8002dfc <HAL_UART_IRQHandler+0x298>)
 8002b98:	4013      	ands	r3, r2
 8002b9a:	2298      	movs	r2, #152	; 0x98
 8002b9c:	18bc      	adds	r4, r7, r2
 8002b9e:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8002ba0:	18bb      	adds	r3, r7, r2
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d114      	bne.n	8002bd2 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002ba8:	187b      	adds	r3, r7, r1
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	2220      	movs	r2, #32
 8002bae:	4013      	ands	r3, r2
 8002bb0:	d00f      	beq.n	8002bd2 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002bb2:	183b      	adds	r3, r7, r0
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	2220      	movs	r2, #32
 8002bb8:	4013      	ands	r3, r2
 8002bba:	d00a      	beq.n	8002bd2 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d100      	bne.n	8002bc6 <HAL_UART_IRQHandler+0x62>
 8002bc4:	e296      	b.n	80030f4 <HAL_UART_IRQHandler+0x590>
      {
        huart->RxISR(huart);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002bca:	687a      	ldr	r2, [r7, #4]
 8002bcc:	0010      	movs	r0, r2
 8002bce:	4798      	blx	r3
      }
      return;
 8002bd0:	e290      	b.n	80030f4 <HAL_UART_IRQHandler+0x590>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002bd2:	2398      	movs	r3, #152	; 0x98
 8002bd4:	18fb      	adds	r3, r7, r3
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d100      	bne.n	8002bde <HAL_UART_IRQHandler+0x7a>
 8002bdc:	e114      	b.n	8002e08 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002bde:	239c      	movs	r3, #156	; 0x9c
 8002be0:	18fb      	adds	r3, r7, r3
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	2201      	movs	r2, #1
 8002be6:	4013      	ands	r3, r2
 8002be8:	d106      	bne.n	8002bf8 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002bea:	23a0      	movs	r3, #160	; 0xa0
 8002bec:	18fb      	adds	r3, r7, r3
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a83      	ldr	r2, [pc, #524]	; (8002e00 <HAL_UART_IRQHandler+0x29c>)
 8002bf2:	4013      	ands	r3, r2
 8002bf4:	d100      	bne.n	8002bf8 <HAL_UART_IRQHandler+0x94>
 8002bf6:	e107      	b.n	8002e08 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002bf8:	23a4      	movs	r3, #164	; 0xa4
 8002bfa:	18fb      	adds	r3, r7, r3
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	2201      	movs	r2, #1
 8002c00:	4013      	ands	r3, r2
 8002c02:	d012      	beq.n	8002c2a <HAL_UART_IRQHandler+0xc6>
 8002c04:	23a0      	movs	r3, #160	; 0xa0
 8002c06:	18fb      	adds	r3, r7, r3
 8002c08:	681a      	ldr	r2, [r3, #0]
 8002c0a:	2380      	movs	r3, #128	; 0x80
 8002c0c:	005b      	lsls	r3, r3, #1
 8002c0e:	4013      	ands	r3, r2
 8002c10:	d00b      	beq.n	8002c2a <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	2201      	movs	r2, #1
 8002c18:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2280      	movs	r2, #128	; 0x80
 8002c1e:	589b      	ldr	r3, [r3, r2]
 8002c20:	2201      	movs	r2, #1
 8002c22:	431a      	orrs	r2, r3
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2180      	movs	r1, #128	; 0x80
 8002c28:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002c2a:	23a4      	movs	r3, #164	; 0xa4
 8002c2c:	18fb      	adds	r3, r7, r3
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	2202      	movs	r2, #2
 8002c32:	4013      	ands	r3, r2
 8002c34:	d011      	beq.n	8002c5a <HAL_UART_IRQHandler+0xf6>
 8002c36:	239c      	movs	r3, #156	; 0x9c
 8002c38:	18fb      	adds	r3, r7, r3
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	2201      	movs	r2, #1
 8002c3e:	4013      	ands	r3, r2
 8002c40:	d00b      	beq.n	8002c5a <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	2202      	movs	r2, #2
 8002c48:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2280      	movs	r2, #128	; 0x80
 8002c4e:	589b      	ldr	r3, [r3, r2]
 8002c50:	2204      	movs	r2, #4
 8002c52:	431a      	orrs	r2, r3
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2180      	movs	r1, #128	; 0x80
 8002c58:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002c5a:	23a4      	movs	r3, #164	; 0xa4
 8002c5c:	18fb      	adds	r3, r7, r3
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	2204      	movs	r2, #4
 8002c62:	4013      	ands	r3, r2
 8002c64:	d011      	beq.n	8002c8a <HAL_UART_IRQHandler+0x126>
 8002c66:	239c      	movs	r3, #156	; 0x9c
 8002c68:	18fb      	adds	r3, r7, r3
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	2201      	movs	r2, #1
 8002c6e:	4013      	ands	r3, r2
 8002c70:	d00b      	beq.n	8002c8a <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	2204      	movs	r2, #4
 8002c78:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2280      	movs	r2, #128	; 0x80
 8002c7e:	589b      	ldr	r3, [r3, r2]
 8002c80:	2202      	movs	r2, #2
 8002c82:	431a      	orrs	r2, r3
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2180      	movs	r1, #128	; 0x80
 8002c88:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002c8a:	23a4      	movs	r3, #164	; 0xa4
 8002c8c:	18fb      	adds	r3, r7, r3
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	2208      	movs	r2, #8
 8002c92:	4013      	ands	r3, r2
 8002c94:	d017      	beq.n	8002cc6 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002c96:	23a0      	movs	r3, #160	; 0xa0
 8002c98:	18fb      	adds	r3, r7, r3
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	2220      	movs	r2, #32
 8002c9e:	4013      	ands	r3, r2
 8002ca0:	d105      	bne.n	8002cae <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002ca2:	239c      	movs	r3, #156	; 0x9c
 8002ca4:	18fb      	adds	r3, r7, r3
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	2201      	movs	r2, #1
 8002caa:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002cac:	d00b      	beq.n	8002cc6 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	2208      	movs	r2, #8
 8002cb4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2280      	movs	r2, #128	; 0x80
 8002cba:	589b      	ldr	r3, [r3, r2]
 8002cbc:	2208      	movs	r2, #8
 8002cbe:	431a      	orrs	r2, r3
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2180      	movs	r1, #128	; 0x80
 8002cc4:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002cc6:	23a4      	movs	r3, #164	; 0xa4
 8002cc8:	18fb      	adds	r3, r7, r3
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	2380      	movs	r3, #128	; 0x80
 8002cce:	011b      	lsls	r3, r3, #4
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	d013      	beq.n	8002cfc <HAL_UART_IRQHandler+0x198>
 8002cd4:	23a0      	movs	r3, #160	; 0xa0
 8002cd6:	18fb      	adds	r3, r7, r3
 8002cd8:	681a      	ldr	r2, [r3, #0]
 8002cda:	2380      	movs	r3, #128	; 0x80
 8002cdc:	04db      	lsls	r3, r3, #19
 8002cde:	4013      	ands	r3, r2
 8002ce0:	d00c      	beq.n	8002cfc <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	2280      	movs	r2, #128	; 0x80
 8002ce8:	0112      	lsls	r2, r2, #4
 8002cea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2280      	movs	r2, #128	; 0x80
 8002cf0:	589b      	ldr	r3, [r3, r2]
 8002cf2:	2220      	movs	r2, #32
 8002cf4:	431a      	orrs	r2, r3
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2180      	movs	r1, #128	; 0x80
 8002cfa:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2280      	movs	r2, #128	; 0x80
 8002d00:	589b      	ldr	r3, [r3, r2]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d100      	bne.n	8002d08 <HAL_UART_IRQHandler+0x1a4>
 8002d06:	e1f7      	b.n	80030f8 <HAL_UART_IRQHandler+0x594>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002d08:	23a4      	movs	r3, #164	; 0xa4
 8002d0a:	18fb      	adds	r3, r7, r3
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	2220      	movs	r2, #32
 8002d10:	4013      	ands	r3, r2
 8002d12:	d00e      	beq.n	8002d32 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002d14:	23a0      	movs	r3, #160	; 0xa0
 8002d16:	18fb      	adds	r3, r7, r3
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	2220      	movs	r2, #32
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	d008      	beq.n	8002d32 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d004      	beq.n	8002d32 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d2c:	687a      	ldr	r2, [r7, #4]
 8002d2e:	0010      	movs	r0, r2
 8002d30:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2280      	movs	r2, #128	; 0x80
 8002d36:	589b      	ldr	r3, [r3, r2]
 8002d38:	2194      	movs	r1, #148	; 0x94
 8002d3a:	187a      	adds	r2, r7, r1
 8002d3c:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	689b      	ldr	r3, [r3, #8]
 8002d44:	2240      	movs	r2, #64	; 0x40
 8002d46:	4013      	ands	r3, r2
 8002d48:	2b40      	cmp	r3, #64	; 0x40
 8002d4a:	d004      	beq.n	8002d56 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002d4c:	187b      	adds	r3, r7, r1
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	2228      	movs	r2, #40	; 0x28
 8002d52:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002d54:	d047      	beq.n	8002de6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	0018      	movs	r0, r3
 8002d5a:	f000 fdc5 	bl	80038e8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	2240      	movs	r2, #64	; 0x40
 8002d66:	4013      	ands	r3, r2
 8002d68:	2b40      	cmp	r3, #64	; 0x40
 8002d6a:	d137      	bne.n	8002ddc <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d6c:	f3ef 8310 	mrs	r3, PRIMASK
 8002d70:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8002d72:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002d74:	2090      	movs	r0, #144	; 0x90
 8002d76:	183a      	adds	r2, r7, r0
 8002d78:	6013      	str	r3, [r2, #0]
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d7e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002d80:	f383 8810 	msr	PRIMASK, r3
}
 8002d84:	46c0      	nop			; (mov r8, r8)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	689a      	ldr	r2, [r3, #8]
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	2140      	movs	r1, #64	; 0x40
 8002d92:	438a      	bics	r2, r1
 8002d94:	609a      	str	r2, [r3, #8]
 8002d96:	183b      	adds	r3, r7, r0
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d9c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002d9e:	f383 8810 	msr	PRIMASK, r3
}
 8002da2:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d012      	beq.n	8002dd2 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002db0:	4a14      	ldr	r2, [pc, #80]	; (8002e04 <HAL_UART_IRQHandler+0x2a0>)
 8002db2:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002db8:	0018      	movs	r0, r3
 8002dba:	f7fd ffc9 	bl	8000d50 <HAL_DMA_Abort_IT>
 8002dbe:	1e03      	subs	r3, r0, #0
 8002dc0:	d01a      	beq.n	8002df8 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dc6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dcc:	0018      	movs	r0, r3
 8002dce:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002dd0:	e012      	b.n	8002df8 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	0018      	movs	r0, r3
 8002dd6:	f000 f9ad 	bl	8003134 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002dda:	e00d      	b.n	8002df8 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	0018      	movs	r0, r3
 8002de0:	f000 f9a8 	bl	8003134 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002de4:	e008      	b.n	8002df8 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	0018      	movs	r0, r3
 8002dea:	f000 f9a3 	bl	8003134 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2280      	movs	r2, #128	; 0x80
 8002df2:	2100      	movs	r1, #0
 8002df4:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8002df6:	e17f      	b.n	80030f8 <HAL_UART_IRQHandler+0x594>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002df8:	46c0      	nop			; (mov r8, r8)
    return;
 8002dfa:	e17d      	b.n	80030f8 <HAL_UART_IRQHandler+0x594>
 8002dfc:	0000080f 	.word	0x0000080f
 8002e00:	04000120 	.word	0x04000120
 8002e04:	08003b8f 	.word	0x08003b8f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e0c:	2b01      	cmp	r3, #1
 8002e0e:	d000      	beq.n	8002e12 <HAL_UART_IRQHandler+0x2ae>
 8002e10:	e131      	b.n	8003076 <HAL_UART_IRQHandler+0x512>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002e12:	23a4      	movs	r3, #164	; 0xa4
 8002e14:	18fb      	adds	r3, r7, r3
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	2210      	movs	r2, #16
 8002e1a:	4013      	ands	r3, r2
 8002e1c:	d100      	bne.n	8002e20 <HAL_UART_IRQHandler+0x2bc>
 8002e1e:	e12a      	b.n	8003076 <HAL_UART_IRQHandler+0x512>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002e20:	23a0      	movs	r3, #160	; 0xa0
 8002e22:	18fb      	adds	r3, r7, r3
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	2210      	movs	r2, #16
 8002e28:	4013      	ands	r3, r2
 8002e2a:	d100      	bne.n	8002e2e <HAL_UART_IRQHandler+0x2ca>
 8002e2c:	e123      	b.n	8003076 <HAL_UART_IRQHandler+0x512>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	2210      	movs	r2, #16
 8002e34:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	689b      	ldr	r3, [r3, #8]
 8002e3c:	2240      	movs	r2, #64	; 0x40
 8002e3e:	4013      	ands	r3, r2
 8002e40:	2b40      	cmp	r3, #64	; 0x40
 8002e42:	d000      	beq.n	8002e46 <HAL_UART_IRQHandler+0x2e2>
 8002e44:	e09b      	b.n	8002f7e <HAL_UART_IRQHandler+0x41a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	685a      	ldr	r2, [r3, #4]
 8002e4e:	217e      	movs	r1, #126	; 0x7e
 8002e50:	187b      	adds	r3, r7, r1
 8002e52:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8002e54:	187b      	adds	r3, r7, r1
 8002e56:	881b      	ldrh	r3, [r3, #0]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d100      	bne.n	8002e5e <HAL_UART_IRQHandler+0x2fa>
 8002e5c:	e14e      	b.n	80030fc <HAL_UART_IRQHandler+0x598>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2258      	movs	r2, #88	; 0x58
 8002e62:	5a9b      	ldrh	r3, [r3, r2]
 8002e64:	187a      	adds	r2, r7, r1
 8002e66:	8812      	ldrh	r2, [r2, #0]
 8002e68:	429a      	cmp	r2, r3
 8002e6a:	d300      	bcc.n	8002e6e <HAL_UART_IRQHandler+0x30a>
 8002e6c:	e146      	b.n	80030fc <HAL_UART_IRQHandler+0x598>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	187a      	adds	r2, r7, r1
 8002e72:	215a      	movs	r1, #90	; 0x5a
 8002e74:	8812      	ldrh	r2, [r2, #0]
 8002e76:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e7c:	699b      	ldr	r3, [r3, #24]
 8002e7e:	2b20      	cmp	r3, #32
 8002e80:	d06e      	beq.n	8002f60 <HAL_UART_IRQHandler+0x3fc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e82:	f3ef 8310 	mrs	r3, PRIMASK
 8002e86:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8002e88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002e8a:	67bb      	str	r3, [r7, #120]	; 0x78
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e92:	f383 8810 	msr	PRIMASK, r3
}
 8002e96:	46c0      	nop			; (mov r8, r8)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	681a      	ldr	r2, [r3, #0]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	499a      	ldr	r1, [pc, #616]	; (800310c <HAL_UART_IRQHandler+0x5a8>)
 8002ea4:	400a      	ands	r2, r1
 8002ea6:	601a      	str	r2, [r3, #0]
 8002ea8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002eaa:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002eac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002eae:	f383 8810 	msr	PRIMASK, r3
}
 8002eb2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002eb4:	f3ef 8310 	mrs	r3, PRIMASK
 8002eb8:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8002eba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ebc:	677b      	str	r3, [r7, #116]	; 0x74
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ec2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ec4:	f383 8810 	msr	PRIMASK, r3
}
 8002ec8:	46c0      	nop			; (mov r8, r8)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	689a      	ldr	r2, [r3, #8]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	2101      	movs	r1, #1
 8002ed6:	438a      	bics	r2, r1
 8002ed8:	609a      	str	r2, [r3, #8]
 8002eda:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002edc:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ede:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ee0:	f383 8810 	msr	PRIMASK, r3
}
 8002ee4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ee6:	f3ef 8310 	mrs	r3, PRIMASK
 8002eea:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8002eec:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002eee:	673b      	str	r3, [r7, #112]	; 0x70
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ef4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ef6:	f383 8810 	msr	PRIMASK, r3
}
 8002efa:	46c0      	nop			; (mov r8, r8)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	689a      	ldr	r2, [r3, #8]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	2140      	movs	r1, #64	; 0x40
 8002f08:	438a      	bics	r2, r1
 8002f0a:	609a      	str	r2, [r3, #8]
 8002f0c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002f0e:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f12:	f383 8810 	msr	PRIMASK, r3
}
 8002f16:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2220      	movs	r2, #32
 8002f1c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2200      	movs	r2, #0
 8002f22:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f24:	f3ef 8310 	mrs	r3, PRIMASK
 8002f28:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8002f2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f2c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002f2e:	2301      	movs	r3, #1
 8002f30:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f32:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f34:	f383 8810 	msr	PRIMASK, r3
}
 8002f38:	46c0      	nop			; (mov r8, r8)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	681a      	ldr	r2, [r3, #0]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	2110      	movs	r1, #16
 8002f46:	438a      	bics	r2, r1
 8002f48:	601a      	str	r2, [r3, #0]
 8002f4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f4c:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f50:	f383 8810 	msr	PRIMASK, r3
}
 8002f54:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f5a:	0018      	movs	r0, r3
 8002f5c:	f7fd fec0 	bl	8000ce0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2258      	movs	r2, #88	; 0x58
 8002f64:	5a9a      	ldrh	r2, [r3, r2]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	215a      	movs	r1, #90	; 0x5a
 8002f6a:	5a5b      	ldrh	r3, [r3, r1]
 8002f6c:	b29b      	uxth	r3, r3
 8002f6e:	1ad3      	subs	r3, r2, r3
 8002f70:	b29a      	uxth	r2, r3
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	0011      	movs	r1, r2
 8002f76:	0018      	movs	r0, r3
 8002f78:	f000 f8e4 	bl	8003144 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002f7c:	e0be      	b.n	80030fc <HAL_UART_IRQHandler+0x598>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2258      	movs	r2, #88	; 0x58
 8002f82:	5a99      	ldrh	r1, [r3, r2]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	225a      	movs	r2, #90	; 0x5a
 8002f88:	5a9b      	ldrh	r3, [r3, r2]
 8002f8a:	b29a      	uxth	r2, r3
 8002f8c:	208e      	movs	r0, #142	; 0x8e
 8002f8e:	183b      	adds	r3, r7, r0
 8002f90:	1a8a      	subs	r2, r1, r2
 8002f92:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	225a      	movs	r2, #90	; 0x5a
 8002f98:	5a9b      	ldrh	r3, [r3, r2]
 8002f9a:	b29b      	uxth	r3, r3
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d100      	bne.n	8002fa2 <HAL_UART_IRQHandler+0x43e>
 8002fa0:	e0ae      	b.n	8003100 <HAL_UART_IRQHandler+0x59c>
          && (nb_rx_data > 0U))
 8002fa2:	183b      	adds	r3, r7, r0
 8002fa4:	881b      	ldrh	r3, [r3, #0]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d100      	bne.n	8002fac <HAL_UART_IRQHandler+0x448>
 8002faa:	e0a9      	b.n	8003100 <HAL_UART_IRQHandler+0x59c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002fac:	f3ef 8310 	mrs	r3, PRIMASK
 8002fb0:	60fb      	str	r3, [r7, #12]
  return(result);
 8002fb2:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002fb4:	2488      	movs	r4, #136	; 0x88
 8002fb6:	193a      	adds	r2, r7, r4
 8002fb8:	6013      	str	r3, [r2, #0]
 8002fba:	2301      	movs	r3, #1
 8002fbc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fbe:	693b      	ldr	r3, [r7, #16]
 8002fc0:	f383 8810 	msr	PRIMASK, r3
}
 8002fc4:	46c0      	nop			; (mov r8, r8)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	681a      	ldr	r2, [r3, #0]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	494f      	ldr	r1, [pc, #316]	; (8003110 <HAL_UART_IRQHandler+0x5ac>)
 8002fd2:	400a      	ands	r2, r1
 8002fd4:	601a      	str	r2, [r3, #0]
 8002fd6:	193b      	adds	r3, r7, r4
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fdc:	697b      	ldr	r3, [r7, #20]
 8002fde:	f383 8810 	msr	PRIMASK, r3
}
 8002fe2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002fe4:	f3ef 8310 	mrs	r3, PRIMASK
 8002fe8:	61bb      	str	r3, [r7, #24]
  return(result);
 8002fea:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fec:	2484      	movs	r4, #132	; 0x84
 8002fee:	193a      	adds	r2, r7, r4
 8002ff0:	6013      	str	r3, [r2, #0]
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ff6:	69fb      	ldr	r3, [r7, #28]
 8002ff8:	f383 8810 	msr	PRIMASK, r3
}
 8002ffc:	46c0      	nop			; (mov r8, r8)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	689a      	ldr	r2, [r3, #8]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	2101      	movs	r1, #1
 800300a:	438a      	bics	r2, r1
 800300c:	609a      	str	r2, [r3, #8]
 800300e:	193b      	adds	r3, r7, r4
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003014:	6a3b      	ldr	r3, [r7, #32]
 8003016:	f383 8810 	msr	PRIMASK, r3
}
 800301a:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2220      	movs	r2, #32
 8003020:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2200      	movs	r2, #0
 8003026:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2200      	movs	r2, #0
 800302c:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800302e:	f3ef 8310 	mrs	r3, PRIMASK
 8003032:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003034:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003036:	2480      	movs	r4, #128	; 0x80
 8003038:	193a      	adds	r2, r7, r4
 800303a:	6013      	str	r3, [r2, #0]
 800303c:	2301      	movs	r3, #1
 800303e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003042:	f383 8810 	msr	PRIMASK, r3
}
 8003046:	46c0      	nop			; (mov r8, r8)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	681a      	ldr	r2, [r3, #0]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	2110      	movs	r1, #16
 8003054:	438a      	bics	r2, r1
 8003056:	601a      	str	r2, [r3, #0]
 8003058:	193b      	adds	r3, r7, r4
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800305e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003060:	f383 8810 	msr	PRIMASK, r3
}
 8003064:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003066:	183b      	adds	r3, r7, r0
 8003068:	881a      	ldrh	r2, [r3, #0]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	0011      	movs	r1, r2
 800306e:	0018      	movs	r0, r3
 8003070:	f000 f868 	bl	8003144 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003074:	e044      	b.n	8003100 <HAL_UART_IRQHandler+0x59c>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003076:	23a4      	movs	r3, #164	; 0xa4
 8003078:	18fb      	adds	r3, r7, r3
 800307a:	681a      	ldr	r2, [r3, #0]
 800307c:	2380      	movs	r3, #128	; 0x80
 800307e:	035b      	lsls	r3, r3, #13
 8003080:	4013      	ands	r3, r2
 8003082:	d010      	beq.n	80030a6 <HAL_UART_IRQHandler+0x542>
 8003084:	239c      	movs	r3, #156	; 0x9c
 8003086:	18fb      	adds	r3, r7, r3
 8003088:	681a      	ldr	r2, [r3, #0]
 800308a:	2380      	movs	r3, #128	; 0x80
 800308c:	03db      	lsls	r3, r3, #15
 800308e:	4013      	ands	r3, r2
 8003090:	d009      	beq.n	80030a6 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	2280      	movs	r2, #128	; 0x80
 8003098:	0352      	lsls	r2, r2, #13
 800309a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	0018      	movs	r0, r3
 80030a0:	f000 fdb7 	bl	8003c12 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80030a4:	e02f      	b.n	8003106 <HAL_UART_IRQHandler+0x5a2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80030a6:	23a4      	movs	r3, #164	; 0xa4
 80030a8:	18fb      	adds	r3, r7, r3
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	2280      	movs	r2, #128	; 0x80
 80030ae:	4013      	ands	r3, r2
 80030b0:	d00f      	beq.n	80030d2 <HAL_UART_IRQHandler+0x56e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80030b2:	23a0      	movs	r3, #160	; 0xa0
 80030b4:	18fb      	adds	r3, r7, r3
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	2280      	movs	r2, #128	; 0x80
 80030ba:	4013      	ands	r3, r2
 80030bc:	d009      	beq.n	80030d2 <HAL_UART_IRQHandler+0x56e>
  {
    if (huart->TxISR != NULL)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d01e      	beq.n	8003104 <HAL_UART_IRQHandler+0x5a0>
    {
      huart->TxISR(huart);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80030ca:	687a      	ldr	r2, [r7, #4]
 80030cc:	0010      	movs	r0, r2
 80030ce:	4798      	blx	r3
    }
    return;
 80030d0:	e018      	b.n	8003104 <HAL_UART_IRQHandler+0x5a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80030d2:	23a4      	movs	r3, #164	; 0xa4
 80030d4:	18fb      	adds	r3, r7, r3
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	2240      	movs	r2, #64	; 0x40
 80030da:	4013      	ands	r3, r2
 80030dc:	d013      	beq.n	8003106 <HAL_UART_IRQHandler+0x5a2>
 80030de:	23a0      	movs	r3, #160	; 0xa0
 80030e0:	18fb      	adds	r3, r7, r3
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	2240      	movs	r2, #64	; 0x40
 80030e6:	4013      	ands	r3, r2
 80030e8:	d00d      	beq.n	8003106 <HAL_UART_IRQHandler+0x5a2>
  {
    UART_EndTransmit_IT(huart);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	0018      	movs	r0, r3
 80030ee:	f000 fd65 	bl	8003bbc <UART_EndTransmit_IT>
    return;
 80030f2:	e008      	b.n	8003106 <HAL_UART_IRQHandler+0x5a2>
      return;
 80030f4:	46c0      	nop			; (mov r8, r8)
 80030f6:	e006      	b.n	8003106 <HAL_UART_IRQHandler+0x5a2>
    return;
 80030f8:	46c0      	nop			; (mov r8, r8)
 80030fa:	e004      	b.n	8003106 <HAL_UART_IRQHandler+0x5a2>
      return;
 80030fc:	46c0      	nop			; (mov r8, r8)
 80030fe:	e002      	b.n	8003106 <HAL_UART_IRQHandler+0x5a2>
      return;
 8003100:	46c0      	nop			; (mov r8, r8)
 8003102:	e000      	b.n	8003106 <HAL_UART_IRQHandler+0x5a2>
    return;
 8003104:	46c0      	nop			; (mov r8, r8)
  }

}
 8003106:	46bd      	mov	sp, r7
 8003108:	b02b      	add	sp, #172	; 0xac
 800310a:	bd90      	pop	{r4, r7, pc}
 800310c:	fffffeff 	.word	0xfffffeff
 8003110:	fffffedf 	.word	0xfffffedf

08003114 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b082      	sub	sp, #8
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800311c:	46c0      	nop			; (mov r8, r8)
 800311e:	46bd      	mov	sp, r7
 8003120:	b002      	add	sp, #8
 8003122:	bd80      	pop	{r7, pc}

08003124 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b082      	sub	sp, #8
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800312c:	46c0      	nop			; (mov r8, r8)
 800312e:	46bd      	mov	sp, r7
 8003130:	b002      	add	sp, #8
 8003132:	bd80      	pop	{r7, pc}

08003134 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b082      	sub	sp, #8
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800313c:	46c0      	nop			; (mov r8, r8)
 800313e:	46bd      	mov	sp, r7
 8003140:	b002      	add	sp, #8
 8003142:	bd80      	pop	{r7, pc}

08003144 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b082      	sub	sp, #8
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
 800314c:	000a      	movs	r2, r1
 800314e:	1cbb      	adds	r3, r7, #2
 8003150:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003152:	46c0      	nop			; (mov r8, r8)
 8003154:	46bd      	mov	sp, r7
 8003156:	b002      	add	sp, #8
 8003158:	bd80      	pop	{r7, pc}
	...

0800315c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b088      	sub	sp, #32
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003164:	231e      	movs	r3, #30
 8003166:	18fb      	adds	r3, r7, r3
 8003168:	2200      	movs	r2, #0
 800316a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	689a      	ldr	r2, [r3, #8]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	691b      	ldr	r3, [r3, #16]
 8003174:	431a      	orrs	r2, r3
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	695b      	ldr	r3, [r3, #20]
 800317a:	431a      	orrs	r2, r3
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	69db      	ldr	r3, [r3, #28]
 8003180:	4313      	orrs	r3, r2
 8003182:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a8d      	ldr	r2, [pc, #564]	; (80033c0 <UART_SetConfig+0x264>)
 800318c:	4013      	ands	r3, r2
 800318e:	0019      	movs	r1, r3
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	697a      	ldr	r2, [r7, #20]
 8003196:	430a      	orrs	r2, r1
 8003198:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	4a88      	ldr	r2, [pc, #544]	; (80033c4 <UART_SetConfig+0x268>)
 80031a2:	4013      	ands	r3, r2
 80031a4:	0019      	movs	r1, r3
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	68da      	ldr	r2, [r3, #12]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	430a      	orrs	r2, r1
 80031b0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	699b      	ldr	r3, [r3, #24]
 80031b6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6a1b      	ldr	r3, [r3, #32]
 80031bc:	697a      	ldr	r2, [r7, #20]
 80031be:	4313      	orrs	r3, r2
 80031c0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	689b      	ldr	r3, [r3, #8]
 80031c8:	4a7f      	ldr	r2, [pc, #508]	; (80033c8 <UART_SetConfig+0x26c>)
 80031ca:	4013      	ands	r3, r2
 80031cc:	0019      	movs	r1, r3
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	697a      	ldr	r2, [r7, #20]
 80031d4:	430a      	orrs	r2, r1
 80031d6:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a7b      	ldr	r2, [pc, #492]	; (80033cc <UART_SetConfig+0x270>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d127      	bne.n	8003232 <UART_SetConfig+0xd6>
 80031e2:	4b7b      	ldr	r3, [pc, #492]	; (80033d0 <UART_SetConfig+0x274>)
 80031e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031e6:	2203      	movs	r2, #3
 80031e8:	4013      	ands	r3, r2
 80031ea:	2b03      	cmp	r3, #3
 80031ec:	d00d      	beq.n	800320a <UART_SetConfig+0xae>
 80031ee:	d81b      	bhi.n	8003228 <UART_SetConfig+0xcc>
 80031f0:	2b02      	cmp	r3, #2
 80031f2:	d014      	beq.n	800321e <UART_SetConfig+0xc2>
 80031f4:	d818      	bhi.n	8003228 <UART_SetConfig+0xcc>
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d002      	beq.n	8003200 <UART_SetConfig+0xa4>
 80031fa:	2b01      	cmp	r3, #1
 80031fc:	d00a      	beq.n	8003214 <UART_SetConfig+0xb8>
 80031fe:	e013      	b.n	8003228 <UART_SetConfig+0xcc>
 8003200:	231f      	movs	r3, #31
 8003202:	18fb      	adds	r3, r7, r3
 8003204:	2200      	movs	r2, #0
 8003206:	701a      	strb	r2, [r3, #0]
 8003208:	e021      	b.n	800324e <UART_SetConfig+0xf2>
 800320a:	231f      	movs	r3, #31
 800320c:	18fb      	adds	r3, r7, r3
 800320e:	2202      	movs	r2, #2
 8003210:	701a      	strb	r2, [r3, #0]
 8003212:	e01c      	b.n	800324e <UART_SetConfig+0xf2>
 8003214:	231f      	movs	r3, #31
 8003216:	18fb      	adds	r3, r7, r3
 8003218:	2204      	movs	r2, #4
 800321a:	701a      	strb	r2, [r3, #0]
 800321c:	e017      	b.n	800324e <UART_SetConfig+0xf2>
 800321e:	231f      	movs	r3, #31
 8003220:	18fb      	adds	r3, r7, r3
 8003222:	2208      	movs	r2, #8
 8003224:	701a      	strb	r2, [r3, #0]
 8003226:	e012      	b.n	800324e <UART_SetConfig+0xf2>
 8003228:	231f      	movs	r3, #31
 800322a:	18fb      	adds	r3, r7, r3
 800322c:	2210      	movs	r2, #16
 800322e:	701a      	strb	r2, [r3, #0]
 8003230:	e00d      	b.n	800324e <UART_SetConfig+0xf2>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a67      	ldr	r2, [pc, #412]	; (80033d4 <UART_SetConfig+0x278>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d104      	bne.n	8003246 <UART_SetConfig+0xea>
 800323c:	231f      	movs	r3, #31
 800323e:	18fb      	adds	r3, r7, r3
 8003240:	2200      	movs	r2, #0
 8003242:	701a      	strb	r2, [r3, #0]
 8003244:	e003      	b.n	800324e <UART_SetConfig+0xf2>
 8003246:	231f      	movs	r3, #31
 8003248:	18fb      	adds	r3, r7, r3
 800324a:	2210      	movs	r2, #16
 800324c:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	69da      	ldr	r2, [r3, #28]
 8003252:	2380      	movs	r3, #128	; 0x80
 8003254:	021b      	lsls	r3, r3, #8
 8003256:	429a      	cmp	r2, r3
 8003258:	d15d      	bne.n	8003316 <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 800325a:	231f      	movs	r3, #31
 800325c:	18fb      	adds	r3, r7, r3
 800325e:	781b      	ldrb	r3, [r3, #0]
 8003260:	2b08      	cmp	r3, #8
 8003262:	d015      	beq.n	8003290 <UART_SetConfig+0x134>
 8003264:	dc18      	bgt.n	8003298 <UART_SetConfig+0x13c>
 8003266:	2b04      	cmp	r3, #4
 8003268:	d00d      	beq.n	8003286 <UART_SetConfig+0x12a>
 800326a:	dc15      	bgt.n	8003298 <UART_SetConfig+0x13c>
 800326c:	2b00      	cmp	r3, #0
 800326e:	d002      	beq.n	8003276 <UART_SetConfig+0x11a>
 8003270:	2b02      	cmp	r3, #2
 8003272:	d005      	beq.n	8003280 <UART_SetConfig+0x124>
 8003274:	e010      	b.n	8003298 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003276:	f7fe fd0b 	bl	8001c90 <HAL_RCC_GetPCLK1Freq>
 800327a:	0003      	movs	r3, r0
 800327c:	61bb      	str	r3, [r7, #24]
        break;
 800327e:	e012      	b.n	80032a6 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003280:	4b55      	ldr	r3, [pc, #340]	; (80033d8 <UART_SetConfig+0x27c>)
 8003282:	61bb      	str	r3, [r7, #24]
        break;
 8003284:	e00f      	b.n	80032a6 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003286:	f7fe fc79 	bl	8001b7c <HAL_RCC_GetSysClockFreq>
 800328a:	0003      	movs	r3, r0
 800328c:	61bb      	str	r3, [r7, #24]
        break;
 800328e:	e00a      	b.n	80032a6 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003290:	2380      	movs	r3, #128	; 0x80
 8003292:	021b      	lsls	r3, r3, #8
 8003294:	61bb      	str	r3, [r7, #24]
        break;
 8003296:	e006      	b.n	80032a6 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8003298:	2300      	movs	r3, #0
 800329a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800329c:	231e      	movs	r3, #30
 800329e:	18fb      	adds	r3, r7, r3
 80032a0:	2201      	movs	r2, #1
 80032a2:	701a      	strb	r2, [r3, #0]
        break;
 80032a4:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80032a6:	69bb      	ldr	r3, [r7, #24]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d100      	bne.n	80032ae <UART_SetConfig+0x152>
 80032ac:	e07b      	b.n	80033a6 <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80032ae:	69bb      	ldr	r3, [r7, #24]
 80032b0:	005a      	lsls	r2, r3, #1
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	085b      	lsrs	r3, r3, #1
 80032b8:	18d2      	adds	r2, r2, r3
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	0019      	movs	r1, r3
 80032c0:	0010      	movs	r0, r2
 80032c2:	f7fc ff21 	bl	8000108 <__udivsi3>
 80032c6:	0003      	movs	r3, r0
 80032c8:	b29b      	uxth	r3, r3
 80032ca:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80032cc:	693b      	ldr	r3, [r7, #16]
 80032ce:	2b0f      	cmp	r3, #15
 80032d0:	d91c      	bls.n	800330c <UART_SetConfig+0x1b0>
 80032d2:	693a      	ldr	r2, [r7, #16]
 80032d4:	2380      	movs	r3, #128	; 0x80
 80032d6:	025b      	lsls	r3, r3, #9
 80032d8:	429a      	cmp	r2, r3
 80032da:	d217      	bcs.n	800330c <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	b29a      	uxth	r2, r3
 80032e0:	200e      	movs	r0, #14
 80032e2:	183b      	adds	r3, r7, r0
 80032e4:	210f      	movs	r1, #15
 80032e6:	438a      	bics	r2, r1
 80032e8:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	085b      	lsrs	r3, r3, #1
 80032ee:	b29b      	uxth	r3, r3
 80032f0:	2207      	movs	r2, #7
 80032f2:	4013      	ands	r3, r2
 80032f4:	b299      	uxth	r1, r3
 80032f6:	183b      	adds	r3, r7, r0
 80032f8:	183a      	adds	r2, r7, r0
 80032fa:	8812      	ldrh	r2, [r2, #0]
 80032fc:	430a      	orrs	r2, r1
 80032fe:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	183a      	adds	r2, r7, r0
 8003306:	8812      	ldrh	r2, [r2, #0]
 8003308:	60da      	str	r2, [r3, #12]
 800330a:	e04c      	b.n	80033a6 <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 800330c:	231e      	movs	r3, #30
 800330e:	18fb      	adds	r3, r7, r3
 8003310:	2201      	movs	r2, #1
 8003312:	701a      	strb	r2, [r3, #0]
 8003314:	e047      	b.n	80033a6 <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003316:	231f      	movs	r3, #31
 8003318:	18fb      	adds	r3, r7, r3
 800331a:	781b      	ldrb	r3, [r3, #0]
 800331c:	2b08      	cmp	r3, #8
 800331e:	d015      	beq.n	800334c <UART_SetConfig+0x1f0>
 8003320:	dc18      	bgt.n	8003354 <UART_SetConfig+0x1f8>
 8003322:	2b04      	cmp	r3, #4
 8003324:	d00d      	beq.n	8003342 <UART_SetConfig+0x1e6>
 8003326:	dc15      	bgt.n	8003354 <UART_SetConfig+0x1f8>
 8003328:	2b00      	cmp	r3, #0
 800332a:	d002      	beq.n	8003332 <UART_SetConfig+0x1d6>
 800332c:	2b02      	cmp	r3, #2
 800332e:	d005      	beq.n	800333c <UART_SetConfig+0x1e0>
 8003330:	e010      	b.n	8003354 <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003332:	f7fe fcad 	bl	8001c90 <HAL_RCC_GetPCLK1Freq>
 8003336:	0003      	movs	r3, r0
 8003338:	61bb      	str	r3, [r7, #24]
        break;
 800333a:	e012      	b.n	8003362 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800333c:	4b26      	ldr	r3, [pc, #152]	; (80033d8 <UART_SetConfig+0x27c>)
 800333e:	61bb      	str	r3, [r7, #24]
        break;
 8003340:	e00f      	b.n	8003362 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003342:	f7fe fc1b 	bl	8001b7c <HAL_RCC_GetSysClockFreq>
 8003346:	0003      	movs	r3, r0
 8003348:	61bb      	str	r3, [r7, #24]
        break;
 800334a:	e00a      	b.n	8003362 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800334c:	2380      	movs	r3, #128	; 0x80
 800334e:	021b      	lsls	r3, r3, #8
 8003350:	61bb      	str	r3, [r7, #24]
        break;
 8003352:	e006      	b.n	8003362 <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 8003354:	2300      	movs	r3, #0
 8003356:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003358:	231e      	movs	r3, #30
 800335a:	18fb      	adds	r3, r7, r3
 800335c:	2201      	movs	r2, #1
 800335e:	701a      	strb	r2, [r3, #0]
        break;
 8003360:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003362:	69bb      	ldr	r3, [r7, #24]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d01e      	beq.n	80033a6 <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	085a      	lsrs	r2, r3, #1
 800336e:	69bb      	ldr	r3, [r7, #24]
 8003370:	18d2      	adds	r2, r2, r3
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	0019      	movs	r1, r3
 8003378:	0010      	movs	r0, r2
 800337a:	f7fc fec5 	bl	8000108 <__udivsi3>
 800337e:	0003      	movs	r3, r0
 8003380:	b29b      	uxth	r3, r3
 8003382:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003384:	693b      	ldr	r3, [r7, #16]
 8003386:	2b0f      	cmp	r3, #15
 8003388:	d909      	bls.n	800339e <UART_SetConfig+0x242>
 800338a:	693a      	ldr	r2, [r7, #16]
 800338c:	2380      	movs	r3, #128	; 0x80
 800338e:	025b      	lsls	r3, r3, #9
 8003390:	429a      	cmp	r2, r3
 8003392:	d204      	bcs.n	800339e <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	693a      	ldr	r2, [r7, #16]
 800339a:	60da      	str	r2, [r3, #12]
 800339c:	e003      	b.n	80033a6 <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 800339e:	231e      	movs	r3, #30
 80033a0:	18fb      	adds	r3, r7, r3
 80033a2:	2201      	movs	r2, #1
 80033a4:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2200      	movs	r2, #0
 80033aa:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2200      	movs	r2, #0
 80033b0:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80033b2:	231e      	movs	r3, #30
 80033b4:	18fb      	adds	r3, r7, r3
 80033b6:	781b      	ldrb	r3, [r3, #0]
}
 80033b8:	0018      	movs	r0, r3
 80033ba:	46bd      	mov	sp, r7
 80033bc:	b008      	add	sp, #32
 80033be:	bd80      	pop	{r7, pc}
 80033c0:	efff69f3 	.word	0xefff69f3
 80033c4:	ffffcfff 	.word	0xffffcfff
 80033c8:	fffff4ff 	.word	0xfffff4ff
 80033cc:	40013800 	.word	0x40013800
 80033d0:	40021000 	.word	0x40021000
 80033d4:	40004400 	.word	0x40004400
 80033d8:	007a1200 	.word	0x007a1200

080033dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b082      	sub	sp, #8
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e8:	2201      	movs	r2, #1
 80033ea:	4013      	ands	r3, r2
 80033ec:	d00b      	beq.n	8003406 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	4a4a      	ldr	r2, [pc, #296]	; (8003520 <UART_AdvFeatureConfig+0x144>)
 80033f6:	4013      	ands	r3, r2
 80033f8:	0019      	movs	r1, r3
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	430a      	orrs	r2, r1
 8003404:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800340a:	2202      	movs	r2, #2
 800340c:	4013      	ands	r3, r2
 800340e:	d00b      	beq.n	8003428 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	4a43      	ldr	r2, [pc, #268]	; (8003524 <UART_AdvFeatureConfig+0x148>)
 8003418:	4013      	ands	r3, r2
 800341a:	0019      	movs	r1, r3
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	430a      	orrs	r2, r1
 8003426:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800342c:	2204      	movs	r2, #4
 800342e:	4013      	ands	r3, r2
 8003430:	d00b      	beq.n	800344a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	4a3b      	ldr	r2, [pc, #236]	; (8003528 <UART_AdvFeatureConfig+0x14c>)
 800343a:	4013      	ands	r3, r2
 800343c:	0019      	movs	r1, r3
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	430a      	orrs	r2, r1
 8003448:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800344e:	2208      	movs	r2, #8
 8003450:	4013      	ands	r3, r2
 8003452:	d00b      	beq.n	800346c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	4a34      	ldr	r2, [pc, #208]	; (800352c <UART_AdvFeatureConfig+0x150>)
 800345c:	4013      	ands	r3, r2
 800345e:	0019      	movs	r1, r3
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	430a      	orrs	r2, r1
 800346a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003470:	2210      	movs	r2, #16
 8003472:	4013      	ands	r3, r2
 8003474:	d00b      	beq.n	800348e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	689b      	ldr	r3, [r3, #8]
 800347c:	4a2c      	ldr	r2, [pc, #176]	; (8003530 <UART_AdvFeatureConfig+0x154>)
 800347e:	4013      	ands	r3, r2
 8003480:	0019      	movs	r1, r3
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	430a      	orrs	r2, r1
 800348c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003492:	2220      	movs	r2, #32
 8003494:	4013      	ands	r3, r2
 8003496:	d00b      	beq.n	80034b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	4a25      	ldr	r2, [pc, #148]	; (8003534 <UART_AdvFeatureConfig+0x158>)
 80034a0:	4013      	ands	r3, r2
 80034a2:	0019      	movs	r1, r3
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	430a      	orrs	r2, r1
 80034ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b4:	2240      	movs	r2, #64	; 0x40
 80034b6:	4013      	ands	r3, r2
 80034b8:	d01d      	beq.n	80034f6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	4a1d      	ldr	r2, [pc, #116]	; (8003538 <UART_AdvFeatureConfig+0x15c>)
 80034c2:	4013      	ands	r3, r2
 80034c4:	0019      	movs	r1, r3
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	430a      	orrs	r2, r1
 80034d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80034d6:	2380      	movs	r3, #128	; 0x80
 80034d8:	035b      	lsls	r3, r3, #13
 80034da:	429a      	cmp	r2, r3
 80034dc:	d10b      	bne.n	80034f6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	4a15      	ldr	r2, [pc, #84]	; (800353c <UART_AdvFeatureConfig+0x160>)
 80034e6:	4013      	ands	r3, r2
 80034e8:	0019      	movs	r1, r3
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	430a      	orrs	r2, r1
 80034f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034fa:	2280      	movs	r2, #128	; 0x80
 80034fc:	4013      	ands	r3, r2
 80034fe:	d00b      	beq.n	8003518 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	4a0e      	ldr	r2, [pc, #56]	; (8003540 <UART_AdvFeatureConfig+0x164>)
 8003508:	4013      	ands	r3, r2
 800350a:	0019      	movs	r1, r3
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	430a      	orrs	r2, r1
 8003516:	605a      	str	r2, [r3, #4]
  }
}
 8003518:	46c0      	nop			; (mov r8, r8)
 800351a:	46bd      	mov	sp, r7
 800351c:	b002      	add	sp, #8
 800351e:	bd80      	pop	{r7, pc}
 8003520:	fffdffff 	.word	0xfffdffff
 8003524:	fffeffff 	.word	0xfffeffff
 8003528:	fffbffff 	.word	0xfffbffff
 800352c:	ffff7fff 	.word	0xffff7fff
 8003530:	ffffefff 	.word	0xffffefff
 8003534:	ffffdfff 	.word	0xffffdfff
 8003538:	ffefffff 	.word	0xffefffff
 800353c:	ff9fffff 	.word	0xff9fffff
 8003540:	fff7ffff 	.word	0xfff7ffff

08003544 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b086      	sub	sp, #24
 8003548:	af02      	add	r7, sp, #8
 800354a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2280      	movs	r2, #128	; 0x80
 8003550:	2100      	movs	r1, #0
 8003552:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003554:	f7fd fa0a 	bl	800096c <HAL_GetTick>
 8003558:	0003      	movs	r3, r0
 800355a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	2208      	movs	r2, #8
 8003564:	4013      	ands	r3, r2
 8003566:	2b08      	cmp	r3, #8
 8003568:	d10c      	bne.n	8003584 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	2280      	movs	r2, #128	; 0x80
 800356e:	0391      	lsls	r1, r2, #14
 8003570:	6878      	ldr	r0, [r7, #4]
 8003572:	4a17      	ldr	r2, [pc, #92]	; (80035d0 <UART_CheckIdleState+0x8c>)
 8003574:	9200      	str	r2, [sp, #0]
 8003576:	2200      	movs	r2, #0
 8003578:	f000 f82c 	bl	80035d4 <UART_WaitOnFlagUntilTimeout>
 800357c:	1e03      	subs	r3, r0, #0
 800357e:	d001      	beq.n	8003584 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003580:	2303      	movs	r3, #3
 8003582:	e021      	b.n	80035c8 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	2204      	movs	r2, #4
 800358c:	4013      	ands	r3, r2
 800358e:	2b04      	cmp	r3, #4
 8003590:	d10c      	bne.n	80035ac <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	2280      	movs	r2, #128	; 0x80
 8003596:	03d1      	lsls	r1, r2, #15
 8003598:	6878      	ldr	r0, [r7, #4]
 800359a:	4a0d      	ldr	r2, [pc, #52]	; (80035d0 <UART_CheckIdleState+0x8c>)
 800359c:	9200      	str	r2, [sp, #0]
 800359e:	2200      	movs	r2, #0
 80035a0:	f000 f818 	bl	80035d4 <UART_WaitOnFlagUntilTimeout>
 80035a4:	1e03      	subs	r3, r0, #0
 80035a6:	d001      	beq.n	80035ac <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80035a8:	2303      	movs	r3, #3
 80035aa:	e00d      	b.n	80035c8 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2220      	movs	r2, #32
 80035b0:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2220      	movs	r2, #32
 80035b6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2200      	movs	r2, #0
 80035bc:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2274      	movs	r2, #116	; 0x74
 80035c2:	2100      	movs	r1, #0
 80035c4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80035c6:	2300      	movs	r3, #0
}
 80035c8:	0018      	movs	r0, r3
 80035ca:	46bd      	mov	sp, r7
 80035cc:	b004      	add	sp, #16
 80035ce:	bd80      	pop	{r7, pc}
 80035d0:	01ffffff 	.word	0x01ffffff

080035d4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b094      	sub	sp, #80	; 0x50
 80035d8:	af00      	add	r7, sp, #0
 80035da:	60f8      	str	r0, [r7, #12]
 80035dc:	60b9      	str	r1, [r7, #8]
 80035de:	603b      	str	r3, [r7, #0]
 80035e0:	1dfb      	adds	r3, r7, #7
 80035e2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035e4:	e0a3      	b.n	800372e <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80035e8:	3301      	adds	r3, #1
 80035ea:	d100      	bne.n	80035ee <UART_WaitOnFlagUntilTimeout+0x1a>
 80035ec:	e09f      	b.n	800372e <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035ee:	f7fd f9bd 	bl	800096c <HAL_GetTick>
 80035f2:	0002      	movs	r2, r0
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	1ad3      	subs	r3, r2, r3
 80035f8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80035fa:	429a      	cmp	r2, r3
 80035fc:	d302      	bcc.n	8003604 <UART_WaitOnFlagUntilTimeout+0x30>
 80035fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003600:	2b00      	cmp	r3, #0
 8003602:	d13d      	bne.n	8003680 <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003604:	f3ef 8310 	mrs	r3, PRIMASK
 8003608:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800360a:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800360c:	647b      	str	r3, [r7, #68]	; 0x44
 800360e:	2301      	movs	r3, #1
 8003610:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003614:	f383 8810 	msr	PRIMASK, r3
}
 8003618:	46c0      	nop			; (mov r8, r8)
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	681a      	ldr	r2, [r3, #0]
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	494c      	ldr	r1, [pc, #304]	; (8003758 <UART_WaitOnFlagUntilTimeout+0x184>)
 8003626:	400a      	ands	r2, r1
 8003628:	601a      	str	r2, [r3, #0]
 800362a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800362c:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800362e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003630:	f383 8810 	msr	PRIMASK, r3
}
 8003634:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003636:	f3ef 8310 	mrs	r3, PRIMASK
 800363a:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 800363c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800363e:	643b      	str	r3, [r7, #64]	; 0x40
 8003640:	2301      	movs	r3, #1
 8003642:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003644:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003646:	f383 8810 	msr	PRIMASK, r3
}
 800364a:	46c0      	nop			; (mov r8, r8)
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	689a      	ldr	r2, [r3, #8]
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	2101      	movs	r1, #1
 8003658:	438a      	bics	r2, r1
 800365a:	609a      	str	r2, [r3, #8]
 800365c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800365e:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003660:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003662:	f383 8810 	msr	PRIMASK, r3
}
 8003666:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	2220      	movs	r2, #32
 800366c:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	2220      	movs	r2, #32
 8003672:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	2274      	movs	r2, #116	; 0x74
 8003678:	2100      	movs	r1, #0
 800367a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800367c:	2303      	movs	r3, #3
 800367e:	e067      	b.n	8003750 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	2204      	movs	r2, #4
 8003688:	4013      	ands	r3, r2
 800368a:	d050      	beq.n	800372e <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	69da      	ldr	r2, [r3, #28]
 8003692:	2380      	movs	r3, #128	; 0x80
 8003694:	011b      	lsls	r3, r3, #4
 8003696:	401a      	ands	r2, r3
 8003698:	2380      	movs	r3, #128	; 0x80
 800369a:	011b      	lsls	r3, r3, #4
 800369c:	429a      	cmp	r2, r3
 800369e:	d146      	bne.n	800372e <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	2280      	movs	r2, #128	; 0x80
 80036a6:	0112      	lsls	r2, r2, #4
 80036a8:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036aa:	f3ef 8310 	mrs	r3, PRIMASK
 80036ae:	613b      	str	r3, [r7, #16]
  return(result);
 80036b0:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80036b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80036b4:	2301      	movs	r3, #1
 80036b6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	f383 8810 	msr	PRIMASK, r3
}
 80036be:	46c0      	nop			; (mov r8, r8)
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	681a      	ldr	r2, [r3, #0]
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4923      	ldr	r1, [pc, #140]	; (8003758 <UART_WaitOnFlagUntilTimeout+0x184>)
 80036cc:	400a      	ands	r2, r1
 80036ce:	601a      	str	r2, [r3, #0]
 80036d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036d2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036d4:	69bb      	ldr	r3, [r7, #24]
 80036d6:	f383 8810 	msr	PRIMASK, r3
}
 80036da:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036dc:	f3ef 8310 	mrs	r3, PRIMASK
 80036e0:	61fb      	str	r3, [r7, #28]
  return(result);
 80036e2:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036e4:	64bb      	str	r3, [r7, #72]	; 0x48
 80036e6:	2301      	movs	r3, #1
 80036e8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036ea:	6a3b      	ldr	r3, [r7, #32]
 80036ec:	f383 8810 	msr	PRIMASK, r3
}
 80036f0:	46c0      	nop			; (mov r8, r8)
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	689a      	ldr	r2, [r3, #8]
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	2101      	movs	r1, #1
 80036fe:	438a      	bics	r2, r1
 8003700:	609a      	str	r2, [r3, #8]
 8003702:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003704:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003708:	f383 8810 	msr	PRIMASK, r3
}
 800370c:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	2220      	movs	r2, #32
 8003712:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	2220      	movs	r2, #32
 8003718:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	2280      	movs	r2, #128	; 0x80
 800371e:	2120      	movs	r1, #32
 8003720:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	2274      	movs	r2, #116	; 0x74
 8003726:	2100      	movs	r1, #0
 8003728:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800372a:	2303      	movs	r3, #3
 800372c:	e010      	b.n	8003750 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	69db      	ldr	r3, [r3, #28]
 8003734:	68ba      	ldr	r2, [r7, #8]
 8003736:	4013      	ands	r3, r2
 8003738:	68ba      	ldr	r2, [r7, #8]
 800373a:	1ad3      	subs	r3, r2, r3
 800373c:	425a      	negs	r2, r3
 800373e:	4153      	adcs	r3, r2
 8003740:	b2db      	uxtb	r3, r3
 8003742:	001a      	movs	r2, r3
 8003744:	1dfb      	adds	r3, r7, #7
 8003746:	781b      	ldrb	r3, [r3, #0]
 8003748:	429a      	cmp	r2, r3
 800374a:	d100      	bne.n	800374e <UART_WaitOnFlagUntilTimeout+0x17a>
 800374c:	e74b      	b.n	80035e6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800374e:	2300      	movs	r3, #0
}
 8003750:	0018      	movs	r0, r3
 8003752:	46bd      	mov	sp, r7
 8003754:	b014      	add	sp, #80	; 0x50
 8003756:	bd80      	pop	{r7, pc}
 8003758:	fffffe5f 	.word	0xfffffe5f

0800375c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b090      	sub	sp, #64	; 0x40
 8003760:	af00      	add	r7, sp, #0
 8003762:	60f8      	str	r0, [r7, #12]
 8003764:	60b9      	str	r1, [r7, #8]
 8003766:	1dbb      	adds	r3, r7, #6
 8003768:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	68ba      	ldr	r2, [r7, #8]
 800376e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	1dba      	adds	r2, r7, #6
 8003774:	2158      	movs	r1, #88	; 0x58
 8003776:	8812      	ldrh	r2, [r2, #0]
 8003778:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	2280      	movs	r2, #128	; 0x80
 800377e:	2100      	movs	r1, #0
 8003780:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	2222      	movs	r2, #34	; 0x22
 8003786:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800378c:	2b00      	cmp	r3, #0
 800378e:	d02b      	beq.n	80037e8 <UART_Start_Receive_DMA+0x8c>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003794:	4a3f      	ldr	r2, [pc, #252]	; (8003894 <UART_Start_Receive_DMA+0x138>)
 8003796:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800379c:	4a3e      	ldr	r2, [pc, #248]	; (8003898 <UART_Start_Receive_DMA+0x13c>)
 800379e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037a4:	4a3d      	ldr	r2, [pc, #244]	; (800389c <UART_Start_Receive_DMA+0x140>)
 80037a6:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037ac:	2200      	movs	r2, #0
 80037ae:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	6f18      	ldr	r0, [r3, #112]	; 0x70
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	3324      	adds	r3, #36	; 0x24
 80037ba:	0019      	movs	r1, r3
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037c0:	001a      	movs	r2, r3
 80037c2:	1dbb      	adds	r3, r7, #6
 80037c4:	881b      	ldrh	r3, [r3, #0]
 80037c6:	f7fd fa25 	bl	8000c14 <HAL_DMA_Start_IT>
 80037ca:	1e03      	subs	r3, r0, #0
 80037cc:	d00c      	beq.n	80037e8 <UART_Start_Receive_DMA+0x8c>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	2280      	movs	r2, #128	; 0x80
 80037d2:	2110      	movs	r1, #16
 80037d4:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	2274      	movs	r2, #116	; 0x74
 80037da:	2100      	movs	r1, #0
 80037dc:	5499      	strb	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	2220      	movs	r2, #32
 80037e2:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_ERROR;
 80037e4:	2301      	movs	r3, #1
 80037e6:	e050      	b.n	800388a <UART_Start_Receive_DMA+0x12e>
    }
  }
  __HAL_UNLOCK(huart);
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	2274      	movs	r2, #116	; 0x74
 80037ec:	2100      	movs	r1, #0
 80037ee:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037f0:	f3ef 8310 	mrs	r3, PRIMASK
 80037f4:	613b      	str	r3, [r7, #16]
  return(result);
 80037f6:	693b      	ldr	r3, [r7, #16]

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80037f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80037fa:	2301      	movs	r3, #1
 80037fc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	f383 8810 	msr	PRIMASK, r3
}
 8003804:	46c0      	nop			; (mov r8, r8)
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	681a      	ldr	r2, [r3, #0]
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	2180      	movs	r1, #128	; 0x80
 8003812:	0049      	lsls	r1, r1, #1
 8003814:	430a      	orrs	r2, r1
 8003816:	601a      	str	r2, [r3, #0]
 8003818:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800381a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800381c:	69bb      	ldr	r3, [r7, #24]
 800381e:	f383 8810 	msr	PRIMASK, r3
}
 8003822:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003824:	f3ef 8310 	mrs	r3, PRIMASK
 8003828:	61fb      	str	r3, [r7, #28]
  return(result);
 800382a:	69fb      	ldr	r3, [r7, #28]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800382c:	63bb      	str	r3, [r7, #56]	; 0x38
 800382e:	2301      	movs	r3, #1
 8003830:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003832:	6a3b      	ldr	r3, [r7, #32]
 8003834:	f383 8810 	msr	PRIMASK, r3
}
 8003838:	46c0      	nop			; (mov r8, r8)
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	689a      	ldr	r2, [r3, #8]
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	2101      	movs	r1, #1
 8003846:	430a      	orrs	r2, r1
 8003848:	609a      	str	r2, [r3, #8]
 800384a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800384c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800384e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003850:	f383 8810 	msr	PRIMASK, r3
}
 8003854:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003856:	f3ef 8310 	mrs	r3, PRIMASK
 800385a:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800385c:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800385e:	637b      	str	r3, [r7, #52]	; 0x34
 8003860:	2301      	movs	r3, #1
 8003862:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003866:	f383 8810 	msr	PRIMASK, r3
}
 800386a:	46c0      	nop			; (mov r8, r8)
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	689a      	ldr	r2, [r3, #8]
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	2140      	movs	r1, #64	; 0x40
 8003878:	430a      	orrs	r2, r1
 800387a:	609a      	str	r2, [r3, #8]
 800387c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800387e:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003882:	f383 8810 	msr	PRIMASK, r3
}
 8003886:	46c0      	nop			; (mov r8, r8)

  return HAL_OK;
 8003888:	2300      	movs	r3, #0
}
 800388a:	0018      	movs	r0, r3
 800388c:	46bd      	mov	sp, r7
 800388e:	b010      	add	sp, #64	; 0x40
 8003890:	bd80      	pop	{r7, pc}
 8003892:	46c0      	nop			; (mov r8, r8)
 8003894:	080039ad 	.word	0x080039ad
 8003898:	08003ad1 	.word	0x08003ad1
 800389c:	08003b0d 	.word	0x08003b0d

080038a0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b086      	sub	sp, #24
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038a8:	f3ef 8310 	mrs	r3, PRIMASK
 80038ac:	60bb      	str	r3, [r7, #8]
  return(result);
 80038ae:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80038b0:	617b      	str	r3, [r7, #20]
 80038b2:	2301      	movs	r3, #1
 80038b4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	f383 8810 	msr	PRIMASK, r3
}
 80038bc:	46c0      	nop			; (mov r8, r8)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	681a      	ldr	r2, [r3, #0]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	21c0      	movs	r1, #192	; 0xc0
 80038ca:	438a      	bics	r2, r1
 80038cc:	601a      	str	r2, [r3, #0]
 80038ce:	697b      	ldr	r3, [r7, #20]
 80038d0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	f383 8810 	msr	PRIMASK, r3
}
 80038d8:	46c0      	nop			; (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2220      	movs	r2, #32
 80038de:	679a      	str	r2, [r3, #120]	; 0x78
}
 80038e0:	46c0      	nop			; (mov r8, r8)
 80038e2:	46bd      	mov	sp, r7
 80038e4:	b006      	add	sp, #24
 80038e6:	bd80      	pop	{r7, pc}

080038e8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b08e      	sub	sp, #56	; 0x38
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038f0:	f3ef 8310 	mrs	r3, PRIMASK
 80038f4:	617b      	str	r3, [r7, #20]
  return(result);
 80038f6:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80038f8:	637b      	str	r3, [r7, #52]	; 0x34
 80038fa:	2301      	movs	r3, #1
 80038fc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038fe:	69bb      	ldr	r3, [r7, #24]
 8003900:	f383 8810 	msr	PRIMASK, r3
}
 8003904:	46c0      	nop			; (mov r8, r8)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	681a      	ldr	r2, [r3, #0]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4925      	ldr	r1, [pc, #148]	; (80039a8 <UART_EndRxTransfer+0xc0>)
 8003912:	400a      	ands	r2, r1
 8003914:	601a      	str	r2, [r3, #0]
 8003916:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003918:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800391a:	69fb      	ldr	r3, [r7, #28]
 800391c:	f383 8810 	msr	PRIMASK, r3
}
 8003920:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003922:	f3ef 8310 	mrs	r3, PRIMASK
 8003926:	623b      	str	r3, [r7, #32]
  return(result);
 8003928:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800392a:	633b      	str	r3, [r7, #48]	; 0x30
 800392c:	2301      	movs	r3, #1
 800392e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003932:	f383 8810 	msr	PRIMASK, r3
}
 8003936:	46c0      	nop			; (mov r8, r8)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	689a      	ldr	r2, [r3, #8]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	2101      	movs	r1, #1
 8003944:	438a      	bics	r2, r1
 8003946:	609a      	str	r2, [r3, #8]
 8003948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800394a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800394c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800394e:	f383 8810 	msr	PRIMASK, r3
}
 8003952:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003958:	2b01      	cmp	r3, #1
 800395a:	d118      	bne.n	800398e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800395c:	f3ef 8310 	mrs	r3, PRIMASK
 8003960:	60bb      	str	r3, [r7, #8]
  return(result);
 8003962:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003964:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003966:	2301      	movs	r3, #1
 8003968:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	f383 8810 	msr	PRIMASK, r3
}
 8003970:	46c0      	nop			; (mov r8, r8)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	681a      	ldr	r2, [r3, #0]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	2110      	movs	r1, #16
 800397e:	438a      	bics	r2, r1
 8003980:	601a      	str	r2, [r3, #0]
 8003982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003984:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	f383 8810 	msr	PRIMASK, r3
}
 800398c:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2220      	movs	r2, #32
 8003992:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2200      	movs	r2, #0
 8003998:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2200      	movs	r2, #0
 800399e:	665a      	str	r2, [r3, #100]	; 0x64
}
 80039a0:	46c0      	nop			; (mov r8, r8)
 80039a2:	46bd      	mov	sp, r7
 80039a4:	b00e      	add	sp, #56	; 0x38
 80039a6:	bd80      	pop	{r7, pc}
 80039a8:	fffffedf 	.word	0xfffffedf

080039ac <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b094      	sub	sp, #80	; 0x50
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b8:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	699b      	ldr	r3, [r3, #24]
 80039be:	2b20      	cmp	r3, #32
 80039c0:	d06e      	beq.n	8003aa0 <UART_DMAReceiveCplt+0xf4>
  {
    huart->RxXferCount = 0U;
 80039c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039c4:	225a      	movs	r2, #90	; 0x5a
 80039c6:	2100      	movs	r1, #0
 80039c8:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039ca:	f3ef 8310 	mrs	r3, PRIMASK
 80039ce:	61bb      	str	r3, [r7, #24]
  return(result);
 80039d0:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80039d2:	64bb      	str	r3, [r7, #72]	; 0x48
 80039d4:	2301      	movs	r3, #1
 80039d6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039d8:	69fb      	ldr	r3, [r7, #28]
 80039da:	f383 8810 	msr	PRIMASK, r3
}
 80039de:	46c0      	nop			; (mov r8, r8)
 80039e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	681a      	ldr	r2, [r3, #0]
 80039e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4938      	ldr	r1, [pc, #224]	; (8003acc <UART_DMAReceiveCplt+0x120>)
 80039ec:	400a      	ands	r2, r1
 80039ee:	601a      	str	r2, [r3, #0]
 80039f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80039f2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039f4:	6a3b      	ldr	r3, [r7, #32]
 80039f6:	f383 8810 	msr	PRIMASK, r3
}
 80039fa:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039fc:	f3ef 8310 	mrs	r3, PRIMASK
 8003a00:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a04:	647b      	str	r3, [r7, #68]	; 0x44
 8003a06:	2301      	movs	r3, #1
 8003a08:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a0c:	f383 8810 	msr	PRIMASK, r3
}
 8003a10:	46c0      	nop			; (mov r8, r8)
 8003a12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	689a      	ldr	r2, [r3, #8]
 8003a18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	2101      	movs	r1, #1
 8003a1e:	438a      	bics	r2, r1
 8003a20:	609a      	str	r2, [r3, #8]
 8003a22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a24:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a28:	f383 8810 	msr	PRIMASK, r3
}
 8003a2c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a2e:	f3ef 8310 	mrs	r3, PRIMASK
 8003a32:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8003a34:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a36:	643b      	str	r3, [r7, #64]	; 0x40
 8003a38:	2301      	movs	r3, #1
 8003a3a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a3e:	f383 8810 	msr	PRIMASK, r3
}
 8003a42:	46c0      	nop			; (mov r8, r8)
 8003a44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	689a      	ldr	r2, [r3, #8]
 8003a4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	2140      	movs	r1, #64	; 0x40
 8003a50:	438a      	bics	r2, r1
 8003a52:	609a      	str	r2, [r3, #8]
 8003a54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a56:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a5a:	f383 8810 	msr	PRIMASK, r3
}
 8003a5e:	46c0      	nop			; (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003a60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a62:	2220      	movs	r2, #32
 8003a64:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a6a:	2b01      	cmp	r3, #1
 8003a6c:	d118      	bne.n	8003aa0 <UART_DMAReceiveCplt+0xf4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a6e:	f3ef 8310 	mrs	r3, PRIMASK
 8003a72:	60fb      	str	r3, [r7, #12]
  return(result);
 8003a74:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a76:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a78:	2301      	movs	r3, #1
 8003a7a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	f383 8810 	msr	PRIMASK, r3
}
 8003a82:	46c0      	nop			; (mov r8, r8)
 8003a84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	681a      	ldr	r2, [r3, #0]
 8003a8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	2110      	movs	r1, #16
 8003a90:	438a      	bics	r2, r1
 8003a92:	601a      	str	r2, [r3, #0]
 8003a94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a96:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	f383 8810 	msr	PRIMASK, r3
}
 8003a9e:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003aa0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003aa2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003aa4:	2b01      	cmp	r3, #1
 8003aa6:	d108      	bne.n	8003aba <UART_DMAReceiveCplt+0x10e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003aa8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003aaa:	2258      	movs	r2, #88	; 0x58
 8003aac:	5a9a      	ldrh	r2, [r3, r2]
 8003aae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ab0:	0011      	movs	r1, r2
 8003ab2:	0018      	movs	r0, r3
 8003ab4:	f7ff fb46 	bl	8003144 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003ab8:	e003      	b.n	8003ac2 <UART_DMAReceiveCplt+0x116>
    HAL_UART_RxCpltCallback(huart);
 8003aba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003abc:	0018      	movs	r0, r3
 8003abe:	f7fc fbaf 	bl	8000220 <HAL_UART_RxCpltCallback>
}
 8003ac2:	46c0      	nop			; (mov r8, r8)
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	b014      	add	sp, #80	; 0x50
 8003ac8:	bd80      	pop	{r7, pc}
 8003aca:	46c0      	nop			; (mov r8, r8)
 8003acc:	fffffeff 	.word	0xfffffeff

08003ad0 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b084      	sub	sp, #16
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003adc:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ae2:	2b01      	cmp	r3, #1
 8003ae4:	d10a      	bne.n	8003afc <UART_DMARxHalfCplt+0x2c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	2258      	movs	r2, #88	; 0x58
 8003aea:	5a9b      	ldrh	r3, [r3, r2]
 8003aec:	085b      	lsrs	r3, r3, #1
 8003aee:	b29a      	uxth	r2, r3
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	0011      	movs	r1, r2
 8003af4:	0018      	movs	r0, r3
 8003af6:	f7ff fb25 	bl	8003144 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003afa:	e003      	b.n	8003b04 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	0018      	movs	r0, r3
 8003b00:	f7ff fb10 	bl	8003124 <HAL_UART_RxHalfCpltCallback>
}
 8003b04:	46c0      	nop			; (mov r8, r8)
 8003b06:	46bd      	mov	sp, r7
 8003b08:	b004      	add	sp, #16
 8003b0a:	bd80      	pop	{r7, pc}

08003b0c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b086      	sub	sp, #24
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b18:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8003b1a:	697b      	ldr	r3, [r7, #20]
 8003b1c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b1e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003b24:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8003b26:	697b      	ldr	r3, [r7, #20]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	689b      	ldr	r3, [r3, #8]
 8003b2c:	2280      	movs	r2, #128	; 0x80
 8003b2e:	4013      	ands	r3, r2
 8003b30:	2b80      	cmp	r3, #128	; 0x80
 8003b32:	d10a      	bne.n	8003b4a <UART_DMAError+0x3e>
 8003b34:	693b      	ldr	r3, [r7, #16]
 8003b36:	2b21      	cmp	r3, #33	; 0x21
 8003b38:	d107      	bne.n	8003b4a <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8003b3a:	697b      	ldr	r3, [r7, #20]
 8003b3c:	2252      	movs	r2, #82	; 0x52
 8003b3e:	2100      	movs	r1, #0
 8003b40:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8003b42:	697b      	ldr	r3, [r7, #20]
 8003b44:	0018      	movs	r0, r3
 8003b46:	f7ff feab 	bl	80038a0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8003b4a:	697b      	ldr	r3, [r7, #20]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	689b      	ldr	r3, [r3, #8]
 8003b50:	2240      	movs	r2, #64	; 0x40
 8003b52:	4013      	ands	r3, r2
 8003b54:	2b40      	cmp	r3, #64	; 0x40
 8003b56:	d10a      	bne.n	8003b6e <UART_DMAError+0x62>
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	2b22      	cmp	r3, #34	; 0x22
 8003b5c:	d107      	bne.n	8003b6e <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8003b5e:	697b      	ldr	r3, [r7, #20]
 8003b60:	225a      	movs	r2, #90	; 0x5a
 8003b62:	2100      	movs	r1, #0
 8003b64:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	0018      	movs	r0, r3
 8003b6a:	f7ff febd 	bl	80038e8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	2280      	movs	r2, #128	; 0x80
 8003b72:	589b      	ldr	r3, [r3, r2]
 8003b74:	2210      	movs	r2, #16
 8003b76:	431a      	orrs	r2, r3
 8003b78:	697b      	ldr	r3, [r7, #20]
 8003b7a:	2180      	movs	r1, #128	; 0x80
 8003b7c:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003b7e:	697b      	ldr	r3, [r7, #20]
 8003b80:	0018      	movs	r0, r3
 8003b82:	f7ff fad7 	bl	8003134 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003b86:	46c0      	nop			; (mov r8, r8)
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	b006      	add	sp, #24
 8003b8c:	bd80      	pop	{r7, pc}

08003b8e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003b8e:	b580      	push	{r7, lr}
 8003b90:	b084      	sub	sp, #16
 8003b92:	af00      	add	r7, sp, #0
 8003b94:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b9a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	225a      	movs	r2, #90	; 0x5a
 8003ba0:	2100      	movs	r1, #0
 8003ba2:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	2252      	movs	r2, #82	; 0x52
 8003ba8:	2100      	movs	r1, #0
 8003baa:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	0018      	movs	r0, r3
 8003bb0:	f7ff fac0 	bl	8003134 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003bb4:	46c0      	nop			; (mov r8, r8)
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	b004      	add	sp, #16
 8003bba:	bd80      	pop	{r7, pc}

08003bbc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b086      	sub	sp, #24
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003bc4:	f3ef 8310 	mrs	r3, PRIMASK
 8003bc8:	60bb      	str	r3, [r7, #8]
  return(result);
 8003bca:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003bcc:	617b      	str	r3, [r7, #20]
 8003bce:	2301      	movs	r3, #1
 8003bd0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	f383 8810 	msr	PRIMASK, r3
}
 8003bd8:	46c0      	nop			; (mov r8, r8)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	681a      	ldr	r2, [r3, #0]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	2140      	movs	r1, #64	; 0x40
 8003be6:	438a      	bics	r2, r1
 8003be8:	601a      	str	r2, [r3, #0]
 8003bea:	697b      	ldr	r3, [r7, #20]
 8003bec:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	f383 8810 	msr	PRIMASK, r3
}
 8003bf4:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2220      	movs	r2, #32
 8003bfa:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	0018      	movs	r0, r3
 8003c06:	f7ff fa85 	bl	8003114 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003c0a:	46c0      	nop			; (mov r8, r8)
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	b006      	add	sp, #24
 8003c10:	bd80      	pop	{r7, pc}

08003c12 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003c12:	b580      	push	{r7, lr}
 8003c14:	b082      	sub	sp, #8
 8003c16:	af00      	add	r7, sp, #0
 8003c18:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003c1a:	46c0      	nop			; (mov r8, r8)
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	b002      	add	sp, #8
 8003c20:	bd80      	pop	{r7, pc}
	...

08003c24 <__libc_init_array>:
 8003c24:	b570      	push	{r4, r5, r6, lr}
 8003c26:	2600      	movs	r6, #0
 8003c28:	4d0c      	ldr	r5, [pc, #48]	; (8003c5c <__libc_init_array+0x38>)
 8003c2a:	4c0d      	ldr	r4, [pc, #52]	; (8003c60 <__libc_init_array+0x3c>)
 8003c2c:	1b64      	subs	r4, r4, r5
 8003c2e:	10a4      	asrs	r4, r4, #2
 8003c30:	42a6      	cmp	r6, r4
 8003c32:	d109      	bne.n	8003c48 <__libc_init_array+0x24>
 8003c34:	2600      	movs	r6, #0
 8003c36:	f000 f821 	bl	8003c7c <_init>
 8003c3a:	4d0a      	ldr	r5, [pc, #40]	; (8003c64 <__libc_init_array+0x40>)
 8003c3c:	4c0a      	ldr	r4, [pc, #40]	; (8003c68 <__libc_init_array+0x44>)
 8003c3e:	1b64      	subs	r4, r4, r5
 8003c40:	10a4      	asrs	r4, r4, #2
 8003c42:	42a6      	cmp	r6, r4
 8003c44:	d105      	bne.n	8003c52 <__libc_init_array+0x2e>
 8003c46:	bd70      	pop	{r4, r5, r6, pc}
 8003c48:	00b3      	lsls	r3, r6, #2
 8003c4a:	58eb      	ldr	r3, [r5, r3]
 8003c4c:	4798      	blx	r3
 8003c4e:	3601      	adds	r6, #1
 8003c50:	e7ee      	b.n	8003c30 <__libc_init_array+0xc>
 8003c52:	00b3      	lsls	r3, r6, #2
 8003c54:	58eb      	ldr	r3, [r5, r3]
 8003c56:	4798      	blx	r3
 8003c58:	3601      	adds	r6, #1
 8003c5a:	e7f2      	b.n	8003c42 <__libc_init_array+0x1e>
 8003c5c:	08003ccc 	.word	0x08003ccc
 8003c60:	08003ccc 	.word	0x08003ccc
 8003c64:	08003ccc 	.word	0x08003ccc
 8003c68:	08003cd0 	.word	0x08003cd0

08003c6c <memset>:
 8003c6c:	0003      	movs	r3, r0
 8003c6e:	1882      	adds	r2, r0, r2
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d100      	bne.n	8003c76 <memset+0xa>
 8003c74:	4770      	bx	lr
 8003c76:	7019      	strb	r1, [r3, #0]
 8003c78:	3301      	adds	r3, #1
 8003c7a:	e7f9      	b.n	8003c70 <memset+0x4>

08003c7c <_init>:
 8003c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c7e:	46c0      	nop			; (mov r8, r8)
 8003c80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c82:	bc08      	pop	{r3}
 8003c84:	469e      	mov	lr, r3
 8003c86:	4770      	bx	lr

08003c88 <_fini>:
 8003c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c8a:	46c0      	nop			; (mov r8, r8)
 8003c8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c8e:	bc08      	pop	{r3}
 8003c90:	469e      	mov	lr, r3
 8003c92:	4770      	bx	lr
